'-----------------------------------------------------------------------------------------------------------------------
' raylib-64: raylib bindings for QB64-PE
' Copyright (c) 2024 Samuel Gomes
'
' This file was autogenerated by QB64-PE raylib bindings generator (bindgen.bas)
'-----------------------------------------------------------------------------------------------------------------------

$INCLUDEONCE

$IF VERSION < 3.12.0 OR 32BIT THEN
    $ERROR 'raylib-64 requires the latest 64-bit version of QB64-PE from https://github.com/QB64-Phoenix-Edition/QB64pe/releases/latest'
$END IF

' These are a few things that we'll enforce on the BASIC side
_DEFINE A-Z AS LONG
OPTION _EXPLICIT
'$STATIC
OPTION BASE 1

' Disable the QB64 OpenGL window
$IF WINDOWS THEN
    $SCREENHIDE
    _ALLOWFULLSCREEN OFF
$ELSE
    $CONSOLE:ONLY
$END IF

' Some common and useful constants
CONST FALSE = 0, TRUE = NOT FALSE
CONST NULL = 0
CONST STRING_EMPTY = ""
CONST STRING_NULL = CHR$(NULL)
' Size of primitive QB64 data types (in bytes)
CONST SIZE_OF_BYTE = 1
CONST SIZE_OF_INTEGER = 2
CONST SIZE_OF_LONG = 4
CONST SIZE_OF_INTEGER64 = 8
CONST SIZE_OF_SINGLE = 4
CONST SIZE_OF_DOUBLE = 8
CONST SIZE_OF_OFFSET = 8
' ConfigFlags: System/Window config flags
CONST FLAG_VSYNC_HINT = 64 ' Set to try enabling V-Sync on GPU
CONST FLAG_FULLSCREEN_MODE = 2 ' Set to run program in fullscreen
CONST FLAG_WINDOW_RESIZABLE = 4 ' Set to allow resizable window
CONST FLAG_WINDOW_UNDECORATED = 8 ' Set to disable window decoration (frame and buttons)
CONST FLAG_WINDOW_HIDDEN = 128 ' Set to hide window
CONST FLAG_WINDOW_MINIMIZED = 512 ' Set to minimize window (iconify)
CONST FLAG_WINDOW_MAXIMIZED = 1024 ' Set to maximize window (expanded to monitor)
CONST FLAG_WINDOW_UNFOCUSED = 2048 ' Set to window non focused
CONST FLAG_WINDOW_TOPMOST = 4096 ' Set to window always on top
CONST FLAG_WINDOW_ALWAYS_RUN = 256 ' Set to allow windows running while minimized
CONST FLAG_WINDOW_TRANSPARENT = 16 ' Set to allow transparent framebuffer
CONST FLAG_WINDOW_HIGHDPI = 8192 ' Set to support HighDPI
CONST FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384 ' Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
CONST FLAG_BORDERLESS_WINDOWED_MODE = 32768 ' Set to run program in borderless windowed mode
CONST FLAG_MSAA_4X_HINT = 32 ' Set to try enabling MSAA 4X
CONST FLAG_INTERLACED_HINT = 65536 ' Set to try enabling interlaced video format (for V3D)
' TraceLogLevel: Trace log level
CONST LOG_ALL = 0 ' Display all logs
CONST LOG_TRACE = 1 ' Trace logging, intended for internal use only
CONST LOG_DEBUG = 2 ' Debug logging, used for internal debugging, it should be disabled on release builds
CONST LOG_INFO = 3 ' Info logging, used for program execution info
CONST LOG_WARNING = 4 ' Warning logging, used on recoverable failures
CONST LOG_ERROR = 5 ' Error logging, used on unrecoverable failures
CONST LOG_FATAL = 6 ' Fatal logging, used to abort program: exit(EXIT_FAILURE)
CONST LOG_NONE = 7 ' Disable logging
' KeyboardKey: Keyboard keys (US keyboard layout)
CONST KEY_NULL = 0 ' Key: NULL, used for no key pressed
CONST KEY_APOSTROPHE = 39 ' Key: '
CONST KEY_COMMA = 44 ' Key: ,
CONST KEY_MINUS = 45 ' Key: -
CONST KEY_PERIOD = 46 ' Key: .
CONST KEY_SLASH = 47 ' Key: /
CONST KEY_ZERO = 48 ' Key: 0
CONST KEY_ONE = 49 ' Key: 1
CONST KEY_TWO = 50 ' Key: 2
CONST KEY_THREE = 51 ' Key: 3
CONST KEY_FOUR = 52 ' Key: 4
CONST KEY_FIVE = 53 ' Key: 5
CONST KEY_SIX = 54 ' Key: 6
CONST KEY_SEVEN = 55 ' Key: 7
CONST KEY_EIGHT = 56 ' Key: 8
CONST KEY_NINE = 57 ' Key: 9
CONST KEY_SEMICOLON = 59 ' Key: ;
CONST KEY_EQUAL = 61 ' Key: =
CONST KEY_A = 65 ' Key: A | a
CONST KEY_B = 66 ' Key: B | b
CONST KEY_C = 67 ' Key: C | c
CONST KEY_D = 68 ' Key: D | d
CONST KEY_E = 69 ' Key: E | e
CONST KEY_F = 70 ' Key: F | f
CONST KEY_G = 71 ' Key: G | g
CONST KEY_H = 72 ' Key: H | h
CONST KEY_I = 73 ' Key: I | i
CONST KEY_J = 74 ' Key: J | j
CONST KEY_K = 75 ' Key: K | k
CONST KEY_L = 76 ' Key: L | l
CONST KEY_M = 77 ' Key: M | m
CONST KEY_N = 78 ' Key: N | n
CONST KEY_O = 79 ' Key: O | o
CONST KEY_P = 80 ' Key: P | p
CONST KEY_Q = 81 ' Key: Q | q
CONST KEY_R = 82 ' Key: R | r
CONST KEY_S = 83 ' Key: S | s
CONST KEY_T = 84 ' Key: T | t
CONST KEY_U = 85 ' Key: U | u
CONST KEY_V = 86 ' Key: V | v
CONST KEY_W = 87 ' Key: W | w
CONST KEY_X = 88 ' Key: X | x
CONST KEY_Y = 89 ' Key: Y | y
CONST KEY_Z = 90 ' Key: Z | z
CONST KEY_LEFT_BRACKET = 91 ' Key: [
CONST KEY_BACKSLASH = 92 ' Key: '\'
CONST KEY_RIGHT_BRACKET = 93 ' Key: ]
CONST KEY_GRAVE = 96 ' Key: `
CONST KEY_SPACE = 32 ' Key: Space
CONST KEY_ESCAPE = 256 ' Key: Esc
CONST KEY_ENTER = 257 ' Key: Enter
CONST KEY_TAB = 258 ' Key: Tab
CONST KEY_BACKSPACE = 259 ' Key: Backspace
CONST KEY_INSERT = 260 ' Key: Ins
CONST KEY_DELETE = 261 ' Key: Del
CONST KEY_RIGHT = 262 ' Key: Cursor right
CONST KEY_LEFT = 263 ' Key: Cursor left
CONST KEY_DOWN = 264 ' Key: Cursor down
CONST KEY_UP = 265 ' Key: Cursor up
CONST KEY_PAGE_UP = 266 ' Key: Page up
CONST KEY_PAGE_DOWN = 267 ' Key: Page down
CONST KEY_HOME = 268 ' Key: Home
CONST KEY_END = 269 ' Key: End
CONST KEY_CAPS_LOCK = 280 ' Key: Caps lock
CONST KEY_SCROLL_LOCK = 281 ' Key: Scroll down
CONST KEY_NUM_LOCK = 282 ' Key: Num lock
CONST KEY_PRINT_SCREEN = 283 ' Key: Print screen
CONST KEY_PAUSE = 284 ' Key: Pause
CONST KEY_F1 = 290 ' Key: F1
CONST KEY_F2 = 291 ' Key: F2
CONST KEY_F3 = 292 ' Key: F3
CONST KEY_F4 = 293 ' Key: F4
CONST KEY_F5 = 294 ' Key: F5
CONST KEY_F6 = 295 ' Key: F6
CONST KEY_F7 = 296 ' Key: F7
CONST KEY_F8 = 297 ' Key: F8
CONST KEY_F9 = 298 ' Key: F9
CONST KEY_F10 = 299 ' Key: F10
CONST KEY_F11 = 300 ' Key: F11
CONST KEY_F12 = 301 ' Key: F12
CONST KEY_LEFT_SHIFT = 340 ' Key: Shift left
CONST KEY_LEFT_CONTROL = 341 ' Key: Control left
CONST KEY_LEFT_ALT = 342 ' Key: Alt left
CONST KEY_LEFT_SUPER = 343 ' Key: Super left
CONST KEY_RIGHT_SHIFT = 344 ' Key: Shift right
CONST KEY_RIGHT_CONTROL = 345 ' Key: Control right
CONST KEY_RIGHT_ALT = 346 ' Key: Alt right
CONST KEY_RIGHT_SUPER = 347 ' Key: Super right
CONST KEY_KB_MENU = 348 ' Key: KB menu
CONST KEY_KP_0 = 320 ' Key: Keypad 0
CONST KEY_KP_1 = 321 ' Key: Keypad 1
CONST KEY_KP_2 = 322 ' Key: Keypad 2
CONST KEY_KP_3 = 323 ' Key: Keypad 3
CONST KEY_KP_4 = 324 ' Key: Keypad 4
CONST KEY_KP_5 = 325 ' Key: Keypad 5
CONST KEY_KP_6 = 326 ' Key: Keypad 6
CONST KEY_KP_7 = 327 ' Key: Keypad 7
CONST KEY_KP_8 = 328 ' Key: Keypad 8
CONST KEY_KP_9 = 329 ' Key: Keypad 9
CONST KEY_KP_DECIMAL = 330 ' Key: Keypad .
CONST KEY_KP_DIVIDE = 331 ' Key: Keypad /
CONST KEY_KP_MULTIPLY = 332 ' Key: Keypad *
CONST KEY_KP_SUBTRACT = 333 ' Key: Keypad -
CONST KEY_KP_ADD = 334 ' Key: Keypad +
CONST KEY_KP_ENTER = 335 ' Key: Keypad Enter
CONST KEY_KP_EQUAL = 336 ' Key: Keypad =
CONST KEY_BACK = 4 ' Key: Android back button
CONST KEY_MENU = 82 ' Key: Android menu button
CONST KEY_VOLUME_UP = 24 ' Key: Android volume up button
CONST KEY_VOLUME_DOWN = 25 ' Key: Android volume down button
' MouseButton: Mouse buttons
CONST MOUSE_BUTTON_LEFT = 0 ' Mouse button left
CONST MOUSE_BUTTON_RIGHT = 1 ' Mouse button right
CONST MOUSE_BUTTON_MIDDLE = 2 ' Mouse button middle (pressed wheel)
CONST MOUSE_BUTTON_SIDE = 3 ' Mouse button side (advanced mouse device)
CONST MOUSE_BUTTON_EXTRA = 4 ' Mouse button extra (advanced mouse device)
CONST MOUSE_BUTTON_FORWARD = 5 ' Mouse button forward (advanced mouse device)
CONST MOUSE_BUTTON_BACK = 6 ' Mouse button back (advanced mouse device)
' MouseCursor: Mouse cursor
CONST MOUSE_CURSOR_DEFAULT = 0 ' Default pointer shape
CONST MOUSE_CURSOR_ARROW = 1 ' Arrow shape
CONST MOUSE_CURSOR_IBEAM = 2 ' Text writing cursor shape
CONST MOUSE_CURSOR_CROSSHAIR = 3 ' Cross shape
CONST MOUSE_CURSOR_POINTING_HAND = 4 ' Pointing hand cursor
CONST MOUSE_CURSOR_RESIZE_EW = 5 ' Horizontal resize/move arrow shape
CONST MOUSE_CURSOR_RESIZE_NS = 6 ' Vertical resize/move arrow shape
CONST MOUSE_CURSOR_RESIZE_NWSE = 7 ' Top-left to bottom-right diagonal resize/move arrow shape
CONST MOUSE_CURSOR_RESIZE_NESW = 8 ' The top-right to bottom-left diagonal resize/move arrow shape
CONST MOUSE_CURSOR_RESIZE_ALL = 9 ' The omnidirectional resize/move cursor shape
CONST MOUSE_CURSOR_NOT_ALLOWED = 10 ' The operation-not-allowed shape
' GamepadButton: Gamepad buttons
CONST GAMEPAD_BUTTON_UNKNOWN = 0 ' Unknown button, just for error checking
CONST GAMEPAD_BUTTON_LEFT_FACE_UP = 1 ' Gamepad left DPAD up button
CONST GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2 ' Gamepad left DPAD right button
CONST GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3 ' Gamepad left DPAD down button
CONST GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4 ' Gamepad left DPAD left button
CONST GAMEPAD_BUTTON_RIGHT_FACE_UP = 5 ' Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
CONST GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6 ' Gamepad right button right (i.e. PS3: Square, Xbox: X)
CONST GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7 ' Gamepad right button down (i.e. PS3: Cross, Xbox: A)
CONST GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8 ' Gamepad right button left (i.e. PS3: Circle, Xbox: B)
CONST GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9 ' Gamepad top/back trigger left (first), it could be a trailing button
CONST GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10 ' Gamepad top/back trigger left (second), it could be a trailing button
CONST GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11 ' Gamepad top/back trigger right (one), it could be a trailing button
CONST GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12 ' Gamepad top/back trigger right (second), it could be a trailing button
CONST GAMEPAD_BUTTON_MIDDLE_LEFT = 13 ' Gamepad center buttons, left one (i.e. PS3: Select)
CONST GAMEPAD_BUTTON_MIDDLE = 14 ' Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
CONST GAMEPAD_BUTTON_MIDDLE_RIGHT = 15 ' Gamepad center buttons, right one (i.e. PS3: Start)
CONST GAMEPAD_BUTTON_LEFT_THUMB = 16 ' Gamepad joystick pressed button left
CONST GAMEPAD_BUTTON_RIGHT_THUMB = 17 ' Gamepad joystick pressed button right
' GamepadAxis: Gamepad axis
CONST GAMEPAD_AXIS_LEFT_X = 0 ' Gamepad left stick X axis
CONST GAMEPAD_AXIS_LEFT_Y = 1 ' Gamepad left stick Y axis
CONST GAMEPAD_AXIS_RIGHT_X = 2 ' Gamepad right stick X axis
CONST GAMEPAD_AXIS_RIGHT_Y = 3 ' Gamepad right stick Y axis
CONST GAMEPAD_AXIS_LEFT_TRIGGER = 4 ' Gamepad back trigger left, pressure level: [1..-1]
CONST GAMEPAD_AXIS_RIGHT_TRIGGER = 5 ' Gamepad back trigger right, pressure level: [1..-1]
' MaterialMapIndex: Material map index
CONST MATERIAL_MAP_ALBEDO = 0 ' Albedo material (same as: MATERIAL_MAP_DIFFUSE)
CONST MATERIAL_MAP_METALNESS = 1 ' Metalness material (same as: MATERIAL_MAP_SPECULAR)
CONST MATERIAL_MAP_NORMAL = 2 ' Normal material
CONST MATERIAL_MAP_ROUGHNESS = 3 ' Roughness material
CONST MATERIAL_MAP_OCCLUSION = 4 ' Ambient occlusion material
CONST MATERIAL_MAP_EMISSION = 5 ' Emission material
CONST MATERIAL_MAP_HEIGHT = 6 ' Heightmap material
CONST MATERIAL_MAP_CUBEMAP = 7 ' Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
CONST MATERIAL_MAP_IRRADIANCE = 8 ' Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
CONST MATERIAL_MAP_PREFILTER = 9 ' Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
CONST MATERIAL_MAP_BRDF = 10 ' Brdf material
' ShaderLocationIndex: Shader location index
CONST SHADER_LOC_VERTEX_POSITION = 0 ' Shader location: vertex attribute: position
CONST SHADER_LOC_VERTEX_TEXCOORD01 = 1 ' Shader location: vertex attribute: texcoord01
CONST SHADER_LOC_VERTEX_TEXCOORD02 = 2 ' Shader location: vertex attribute: texcoord02
CONST SHADER_LOC_VERTEX_NORMAL = 3 ' Shader location: vertex attribute: normal
CONST SHADER_LOC_VERTEX_TANGENT = 4 ' Shader location: vertex attribute: tangent
CONST SHADER_LOC_VERTEX_COLOR = 5 ' Shader location: vertex attribute: color
CONST SHADER_LOC_MATRIX_MVP = 6 ' Shader location: matrix uniform: model-view-projection
CONST SHADER_LOC_MATRIX_VIEW = 7 ' Shader location: matrix uniform: view (camera transform)
CONST SHADER_LOC_MATRIX_PROJECTION = 8 ' Shader location: matrix uniform: projection
CONST SHADER_LOC_MATRIX_MODEL = 9 ' Shader location: matrix uniform: model (transform)
CONST SHADER_LOC_MATRIX_NORMAL = 10 ' Shader location: matrix uniform: normal
CONST SHADER_LOC_VECTOR_VIEW = 11 ' Shader location: vector uniform: view
CONST SHADER_LOC_COLOR_DIFFUSE = 12 ' Shader location: vector uniform: diffuse color
CONST SHADER_LOC_COLOR_SPECULAR = 13 ' Shader location: vector uniform: specular color
CONST SHADER_LOC_COLOR_AMBIENT = 14 ' Shader location: vector uniform: ambient color
CONST SHADER_LOC_MAP_ALBEDO = 15 ' Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
CONST SHADER_LOC_MAP_METALNESS = 16 ' Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
CONST SHADER_LOC_MAP_NORMAL = 17 ' Shader location: sampler2d texture: normal
CONST SHADER_LOC_MAP_ROUGHNESS = 18 ' Shader location: sampler2d texture: roughness
CONST SHADER_LOC_MAP_OCCLUSION = 19 ' Shader location: sampler2d texture: occlusion
CONST SHADER_LOC_MAP_EMISSION = 20 ' Shader location: sampler2d texture: emission
CONST SHADER_LOC_MAP_HEIGHT = 21 ' Shader location: sampler2d texture: height
CONST SHADER_LOC_MAP_CUBEMAP = 22 ' Shader location: samplerCube texture: cubemap
CONST SHADER_LOC_MAP_IRRADIANCE = 23 ' Shader location: samplerCube texture: irradiance
CONST SHADER_LOC_MAP_PREFILTER = 24 ' Shader location: samplerCube texture: prefilter
CONST SHADER_LOC_MAP_BRDF = 25 ' Shader location: sampler2d texture: brdf
' ShaderUniformDataType: Shader uniform data type
CONST SHADER_UNIFORM_FLOAT = 0 ' Shader uniform type: float
CONST SHADER_UNIFORM_VEC2 = 1 ' Shader uniform type: vec2 (2 float)
CONST SHADER_UNIFORM_VEC3 = 2 ' Shader uniform type: vec3 (3 float)
CONST SHADER_UNIFORM_VEC4 = 3 ' Shader uniform type: vec4 (4 float)
CONST SHADER_UNIFORM_INT = 4 ' Shader uniform type: int
CONST SHADER_UNIFORM_IVEC2 = 5 ' Shader uniform type: ivec2 (2 int)
CONST SHADER_UNIFORM_IVEC3 = 6 ' Shader uniform type: ivec3 (3 int)
CONST SHADER_UNIFORM_IVEC4 = 7 ' Shader uniform type: ivec4 (4 int)
CONST SHADER_UNIFORM_SAMPLER2D = 8 ' Shader uniform type: sampler2d
' ShaderAttributeDataType: Shader attribute data types
CONST SHADER_ATTRIB_FLOAT = 0 ' Shader attribute type: float
CONST SHADER_ATTRIB_VEC2 = 1 ' Shader attribute type: vec2 (2 float)
CONST SHADER_ATTRIB_VEC3 = 2 ' Shader attribute type: vec3 (3 float)
CONST SHADER_ATTRIB_VEC4 = 3 ' Shader attribute type: vec4 (4 float)
' PixelFormat: Pixel formats
CONST PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1 ' 8 bit per pixel (no alpha)
CONST PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2 ' 8*2 bpp (2 channels)
CONST PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3 ' 16 bpp
CONST PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4 ' 24 bpp
CONST PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5 ' 16 bpp (1 bit alpha)
CONST PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6 ' 16 bpp (4 bit alpha)
CONST PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7 ' 32 bpp
CONST PIXELFORMAT_UNCOMPRESSED_R32 = 8 ' 32 bpp (1 channel - float)
CONST PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9 ' 32*3 bpp (3 channels - float)
CONST PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10 ' 32*4 bpp (4 channels - float)
CONST PIXELFORMAT_UNCOMPRESSED_R16 = 11 ' 16 bpp (1 channel - half float)
CONST PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12 ' 16*3 bpp (3 channels - half float)
CONST PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13 ' 16*4 bpp (4 channels - half float)
CONST PIXELFORMAT_COMPRESSED_DXT1_RGB = 14 ' 4 bpp (no alpha)
CONST PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15 ' 4 bpp (1 bit alpha)
CONST PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16 ' 8 bpp
CONST PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17 ' 8 bpp
CONST PIXELFORMAT_COMPRESSED_ETC1_RGB = 18 ' 4 bpp
CONST PIXELFORMAT_COMPRESSED_ETC2_RGB = 19 ' 4 bpp
CONST PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20 ' 8 bpp
CONST PIXELFORMAT_COMPRESSED_PVRT_RGB = 21 ' 4 bpp
CONST PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22 ' 4 bpp
CONST PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23 ' 8 bpp
CONST PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24 ' 2 bpp
' TextureFilter: Texture parameters: filter mode
CONST TEXTURE_FILTER_POINT = 0 ' No filter, just pixel approximation
CONST TEXTURE_FILTER_BILINEAR = 1 ' Linear filtering
CONST TEXTURE_FILTER_TRILINEAR = 2 ' Trilinear filtering (linear with mipmaps)
CONST TEXTURE_FILTER_ANISOTROPIC_4X = 3 ' Anisotropic filtering 4x
CONST TEXTURE_FILTER_ANISOTROPIC_8X = 4 ' Anisotropic filtering 8x
CONST TEXTURE_FILTER_ANISOTROPIC_16X = 5 ' Anisotropic filtering 16x
' TextureWrap: Texture parameters: wrap mode
CONST TEXTURE_WRAP_REPEAT = 0 ' Repeats texture in tiled mode
CONST TEXTURE_WRAP_CLAMP = 1 ' Clamps texture to edge pixel in tiled mode
CONST TEXTURE_WRAP_MIRROR_REPEAT = 2 ' Mirrors and repeats the texture in tiled mode
CONST TEXTURE_WRAP_MIRROR_CLAMP = 3 ' Mirrors and clamps to border the texture in tiled mode
' CubemapLayout: Cubemap layouts
CONST CUBEMAP_LAYOUT_AUTO_DETECT = 0 ' Automatically detect layout type
CONST CUBEMAP_LAYOUT_LINE_VERTICAL = 1 ' Layout is defined by a vertical line with faces
CONST CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2 ' Layout is defined by a horizontal line with faces
CONST CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3 ' Layout is defined by a 3x4 cross with cubemap faces
CONST CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4 ' Layout is defined by a 4x3 cross with cubemap faces
CONST CUBEMAP_LAYOUT_PANORAMA = 5 ' Layout is defined by a panorama image (equirrectangular map)
' FontType: Font type, defines generation method
CONST FONT_DEFAULT = 0 ' Default font generation, anti-aliased
CONST FONT_BITMAP = 1 ' Bitmap font generation, no anti-aliasing
CONST FONT_SDF = 2 ' SDF font generation, requires external shader
' BlendMode: Color blending modes (pre-defined)
CONST BLEND_ALPHA = 0 ' Blend textures considering alpha (default)
CONST BLEND_ADDITIVE = 1 ' Blend textures adding colors
CONST BLEND_MULTIPLIED = 2 ' Blend textures multiplying colors
CONST BLEND_ADD_COLORS = 3 ' Blend textures adding colors (alternative)
CONST BLEND_SUBTRACT_COLORS = 4 ' Blend textures subtracting colors (alternative)
CONST BLEND_ALPHA_PREMULTIPLY = 5 ' Blend premultiplied textures considering alpha
CONST BLEND_CUSTOM = 6 ' Blend textures using custom src/dst factors (use rlSetBlendFactors())
CONST BLEND_CUSTOM_SEPARATE = 7 ' Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
' Gesture: Gesture
CONST GESTURE_NONE = 0 ' No gesture
CONST GESTURE_TAP = 1 ' Tap gesture
CONST GESTURE_DOUBLETAP = 2 ' Double tap gesture
CONST GESTURE_HOLD = 4 ' Hold gesture
CONST GESTURE_DRAG = 8 ' Drag gesture
CONST GESTURE_SWIPE_RIGHT = 16 ' Swipe right gesture
CONST GESTURE_SWIPE_LEFT = 32 ' Swipe left gesture
CONST GESTURE_SWIPE_UP = 64 ' Swipe up gesture
CONST GESTURE_SWIPE_DOWN = 128 ' Swipe down gesture
CONST GESTURE_PINCH_IN = 256 ' Pinch in gesture
CONST GESTURE_PINCH_OUT = 512 ' Pinch out gesture
' CameraMode: Camera system modes
CONST CAMERA_CUSTOM = 0 ' Custom camera
CONST CAMERA_FREE = 1 ' Free camera
CONST CAMERA_ORBITAL = 2 ' Orbital camera
CONST CAMERA_FIRST_PERSON = 3 ' First person camera
CONST CAMERA_THIRD_PERSON = 4 ' Third person camera
' CameraProjection: Camera projection
CONST CAMERA_PERSPECTIVE = 0 ' Perspective projection
CONST CAMERA_ORTHOGRAPHIC = 1 ' Orthographic projection
' NPatchLayout: N-patch layout
CONST NPATCH_NINE_PATCH = 0 ' Npatch layout: 3x3 tiles
CONST NPATCH_THREE_PATCH_VERTICAL = 1 ' Npatch layout: 1x3 tiles
CONST NPATCH_THREE_PATCH_HORIZONTAL = 2 ' Npatch layout: 3x1 tiles
' More raylib constants
CONST RAYLIB_VERSION_MAJOR = 5
CONST RAYLIB_VERSION_MINOR = 0
CONST RAYLIB_VERSION_PATCH = 0
CONST RAYLIB_VERSION = "5.0"
CONST RPI! = 3.14159265358979323846!
CONST DEG2RAD! = (RPI / 180.0!)
CONST RAD2DEG! = (180.0! / RPI)
CONST LIGHTGRAY~& = &HFFC8C8C8~& ' Light Gray
CONST GRAY~& = &HFF828282~& ' Gray
CONST DARKGRAY~& = &HFF505050~& ' Dark Gray
CONST YELLOW~& = &HFF00F9FD~& ' Yellow
CONST GOLD~& = &HFF00CBFF~& ' Gold
CONST ORANGE~& = &HFF00A1FF~& ' Orange
CONST PINK~& = &HFFC26DFF~& ' Pink
CONST RRED~& = &HFF3729E6~& ' Red
CONST MAROON~& = &HFF3721BE~& ' Maroon
CONST RGREEN~& = &HFF30E400~& ' Green
CONST LIME~& = &HFF2F9E00~& ' Lime
CONST DARKGREEN~& = &HFF2C7500~& ' Dark Green
CONST SKYBLUE~& = &HFFFFBF66~& ' Sky Blue
CONST RBLUE~& = &HFFF17900~& ' Blue
CONST DARKBLUE~& = &HFFAC5200~& ' Dark Blue
CONST PURPLE~& = &HFFFF7AC8~& ' Purple
CONST VIOLET~& = &HFFBE3C87~& ' Violet
CONST DARKPURPLE~& = &HFF7E1F70~& ' Dark Purple
CONST BEIGE~& = &HFF83B0D3~& ' Beige
CONST BROWN~& = &HFF4F6A7F~& ' Brown
CONST DARKBROWN~& = &HFF2F3F4C~& ' Dark Brown
CONST WHITE~& = &HFFFFFFFF~& ' White
CONST BLACK~& = &HFF000000~& ' Black
CONST BLANK~& = &H0~& ' Blank (Transparent)
CONST MAGENTA~& = &HFFFF00FF~& ' Magenta
CONST RAYWHITE~& = &HFFF5F5F5~& ' My own White (raylib logo)
CONST MOUSE_LEFT_BUTTON = MOUSE_BUTTON_LEFT
CONST MOUSE_RIGHT_BUTTON = MOUSE_BUTTON_RIGHT
CONST MOUSE_MIDDLE_BUTTON = MOUSE_BUTTON_MIDDLE
CONST MATERIAL_MAP_DIFFUSE = MATERIAL_MAP_ALBEDO
CONST MATERIAL_MAP_SPECULAR = MATERIAL_MAP_METALNESS
CONST SHADER_LOC_MAP_DIFFUSE = SHADER_LOC_MAP_ALBEDO
CONST SHADER_LOC_MAP_SPECULAR = SHADER_LOC_MAP_METALNESS

' Vector2, 2 components
TYPE Vector2
    x AS SINGLE ' Vector x component
    y AS SINGLE ' Vector y component
END TYPE
CONST SIZE_OF_VECTOR2~& = 8~&

' Vector3, 3 components
TYPE Vector3
    x AS SINGLE ' Vector x component
    y AS SINGLE ' Vector y component
    z AS SINGLE ' Vector z component
END TYPE
CONST SIZE_OF_VECTOR3~& = 12~&

' Vector4, 4 components
TYPE Vector4
    x AS SINGLE ' Vector x component
    y AS SINGLE ' Vector y component
    z AS SINGLE ' Vector z component
    w AS SINGLE ' Vector w component
END TYPE
CONST SIZE_OF_VECTOR4~& = 16~&

' Matrix, 4x4 components, column major, OpenGL style, right-handed
TYPE Matrix
    m0 AS SINGLE ' Matrix first row (4 components)
    m4 AS SINGLE ' Matrix first row (4 components)
    m8 AS SINGLE ' Matrix first row (4 components)
    m12 AS SINGLE ' Matrix first row (4 components)
    m1 AS SINGLE ' Matrix second row (4 components)
    m5 AS SINGLE ' Matrix second row (4 components)
    m9 AS SINGLE ' Matrix second row (4 components)
    m13 AS SINGLE ' Matrix second row (4 components)
    m2 AS SINGLE ' Matrix third row (4 components)
    m6 AS SINGLE ' Matrix third row (4 components)
    m10 AS SINGLE ' Matrix third row (4 components)
    m14 AS SINGLE ' Matrix third row (4 components)
    m3 AS SINGLE ' Matrix fourth row (4 components)
    m7 AS SINGLE ' Matrix fourth row (4 components)
    m11 AS SINGLE ' Matrix fourth row (4 components)
    m15 AS SINGLE ' Matrix fourth row (4 components)
END TYPE
CONST SIZE_OF_MATRIX~& = 64~&

' Color, 4 components, R8G8B8A8 (32bit)
TYPE RColor
    r AS _UNSIGNED _BYTE ' Color red value
    g AS _UNSIGNED _BYTE ' Color green value
    b AS _UNSIGNED _BYTE ' Color blue value
    a AS _UNSIGNED _BYTE ' Color alpha value
END TYPE
CONST SIZE_OF_RCOLOR~& = 4~&

' Rectangle, 4 components
TYPE Rectangle
    x AS SINGLE ' Rectangle top-left corner position x
    y AS SINGLE ' Rectangle top-left corner position y
    Rwidth AS SINGLE ' Rectangle width
    Rheight AS SINGLE ' Rectangle height
END TYPE
CONST SIZE_OF_RECTANGLE~& = 16~&

' Image, pixel data stored in CPU memory (RAM)
TYPE Image
    Rdata AS _UNSIGNED _OFFSET ' Image raw data
    Rwidth AS LONG ' Image base width
    Rheight AS LONG ' Image base height
    mipmaps AS LONG ' Mipmap levels, 1 by default
    format AS LONG ' Data format (PixelFormat type)
END TYPE
CONST SIZE_OF_IMAGE~& = 24~&

' Texture, tex data stored in GPU memory (VRAM)
TYPE Texture
    id AS _UNSIGNED LONG ' OpenGL texture id
    Rwidth AS LONG ' Texture base width
    Rheight AS LONG ' Texture base height
    mipmaps AS LONG ' Mipmap levels, 1 by default
    format AS LONG ' Data format (PixelFormat type)
END TYPE
CONST SIZE_OF_TEXTURE~& = 20~&

' RenderTexture, fbo for texture rendering
TYPE RenderTexture
    id AS _UNSIGNED LONG ' OpenGL framebuffer object id
    texture AS Texture ' Color buffer attachment texture
    depth AS Texture ' Depth buffer attachment texture
END TYPE
CONST SIZE_OF_RENDERTEXTURE~& = 44~&

' NPatchInfo, n-patch layout info
TYPE NPatchInfo
    Rsource AS Rectangle ' Texture source rectangle
    left AS LONG ' Left border offset
    top AS LONG ' Top border offset
    right AS LONG ' Right border offset
    bottom AS LONG ' Bottom border offset
    layout AS LONG ' Layout of the n-patch: 3x3, 1x3 or 3x1
END TYPE
CONST SIZE_OF_NPATCHINFO~& = 36~&

' GlyphInfo, font characters glyphs info
TYPE GlyphInfo
    value AS LONG ' Character value (Unicode)
    offsetX AS LONG ' Character offset X when drawing
    offsetY AS LONG ' Character offset Y when drawing
    advanceX AS LONG ' Character advance position X
    image AS Image ' Character image data
END TYPE
CONST SIZE_OF_GLYPHINFO~& = 40~&

' Font, font texture and GlyphInfo array data
TYPE RFont
    baseSize AS LONG ' Base size (default chars height)
    glyphCount AS LONG ' Number of glyph characters
    glyphPadding AS LONG ' Padding around the glyph characters
    texture AS Texture ' Texture atlas containing the glyphs
    recs AS _UNSIGNED _OFFSET ' Rectangles in texture for the glyphs
    glyphs AS _UNSIGNED _OFFSET ' Glyphs info data
END TYPE
CONST SIZE_OF_RFONT~& = 48~&

' Camera, defines position/orientation in 3d space
TYPE Camera3D
    position AS Vector3 ' Camera position
    target AS Vector3 ' Camera target it looks-at
    up AS Vector3 ' Camera up vector (rotation over its axis)
    fovy AS SINGLE ' Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
    projection AS LONG ' Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
END TYPE
CONST SIZE_OF_CAMERA3D~& = 44~&

' Camera2D, defines position/orientation in 2d space
TYPE Camera2D
    Roffset AS Vector2 ' Camera offset (displacement from target)
    target AS Vector2 ' Camera target (rotation and zoom origin)
    rotation AS SINGLE ' Camera rotation in degrees
    zoom AS SINGLE ' Camera zoom (scaling), should be 1.0f by default
END TYPE
CONST SIZE_OF_CAMERA2D~& = 24~&

' Mesh, vertex data and vao/vbo
TYPE Mesh
    vertexCount AS LONG ' Number of vertices stored in arrays
    triangleCount AS LONG ' Number of triangles stored (indexed or not)
    vertices AS _UNSIGNED _OFFSET ' Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
    texcoords AS _UNSIGNED _OFFSET ' Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
    texcoords2 AS _UNSIGNED _OFFSET ' Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
    normals AS _UNSIGNED _OFFSET ' Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
    tangents AS _UNSIGNED _OFFSET ' Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
    colors AS _UNSIGNED _OFFSET ' Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
    indices AS _UNSIGNED _OFFSET ' Vertex indices (in case vertex data comes indexed)
    animVertices AS _UNSIGNED _OFFSET ' Animated vertex positions (after bones transformations)
    animNormals AS _UNSIGNED _OFFSET ' Animated normals (after bones transformations)
    boneIds AS _UNSIGNED _OFFSET ' Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
    boneWeights AS _UNSIGNED _OFFSET ' Vertex bone weight, up to 4 bones influence by vertex (skinning)
    vaoId AS _UNSIGNED LONG ' OpenGL Vertex Array Object id
    ___padding_S_14 AS STRING * 4 ' Do not remove or change
    vboId AS _UNSIGNED _OFFSET ' OpenGL Vertex Buffer Objects id (default vertex data)
END TYPE
CONST SIZE_OF_MESH~& = 112~&

' Shader
TYPE Shader
    id AS _UNSIGNED LONG ' Shader program id
    ___padding_S_1 AS STRING * 4 ' Do not remove or change
    locs AS _UNSIGNED _OFFSET ' Shader locations array (RL_MAX_SHADER_LOCATIONS)
END TYPE
CONST SIZE_OF_SHADER~& = 16~&

' MaterialMap
TYPE MaterialMap
    texture AS Texture ' Material map texture
    Rcolor AS _UNSIGNED LONG ' Material map color
    value AS SINGLE ' Material map value
END TYPE
CONST SIZE_OF_MATERIALMAP~& = 28~&

' Material, includes shader and maps
TYPE Material
    shader AS Shader ' Material shader
    maps AS _UNSIGNED _OFFSET ' Material maps array (MAX_MATERIAL_MAPS)
    params0 AS SINGLE ' Material generic parameters (if required)
    params1 AS SINGLE ' Material generic parameters (if required)
    params2 AS SINGLE ' Material generic parameters (if required)
    params3 AS SINGLE ' Material generic parameters (if required)
END TYPE
CONST SIZE_OF_MATERIAL~& = 40~&

' Transform, vertex transformation data
TYPE Transform
    translation AS Vector3 ' Translation
    rotation AS Vector4 ' Rotation
    scale AS Vector3 ' Scale
END TYPE
CONST SIZE_OF_TRANSFORM~& = 40~&

' Bone, skeletal animation bone
TYPE BoneInfo
    Rname AS STRING * 32 ' Bone name
    parent AS LONG ' Bone parent
END TYPE
CONST SIZE_OF_BONEINFO~& = 36~&

' Model, meshes, materials and animation data
TYPE Model
    transform AS Matrix ' Local transform matrix
    meshCount AS LONG ' Number of meshes
    materialCount AS LONG ' Number of materials
    meshes AS _UNSIGNED _OFFSET ' Meshes array
    materials AS _UNSIGNED _OFFSET ' Materials array
    meshMaterial AS _UNSIGNED _OFFSET ' Mesh material number
    boneCount AS LONG ' Number of bones
    ___padding_S_7 AS STRING * 4 ' Do not remove or change
    bones AS _UNSIGNED _OFFSET ' Bones information (skeleton)
    bindPose AS _UNSIGNED _OFFSET ' Bones base transformation (pose)
END TYPE
CONST SIZE_OF_MODEL~& = 120~&

' ModelAnimation
TYPE ModelAnimation
    boneCount AS LONG ' Number of bones
    frameCount AS LONG ' Number of animation frames
    bones AS _UNSIGNED _OFFSET ' Bones information (skeleton)
    framePoses AS _UNSIGNED _OFFSET ' Poses array by frame
    Rname AS STRING * 32 ' Animation name
END TYPE
CONST SIZE_OF_MODELANIMATION~& = 56~&

' Ray, ray for raycasting
TYPE Ray
    position AS Vector3 ' Ray position (origin)
    direction AS Vector3 ' Ray direction
END TYPE
CONST SIZE_OF_RAY~& = 24~&

' RayCollision, ray hit information
TYPE RayCollision
    hit AS _BYTE ' Did the ray hit something?
    ___padding_S_1 AS STRING * 3 ' Do not remove or change
    distance AS SINGLE ' Distance to the nearest hit
    Rpoint AS Vector3 ' Point of the nearest hit
    normal AS Vector3 ' Surface normal of hit
END TYPE
CONST SIZE_OF_RAYCOLLISION~& = 32~&

' BoundingBox
TYPE BoundingBox
    min AS Vector3 ' Minimum vertex box-corner
    max AS Vector3 ' Maximum vertex box-corner
END TYPE
CONST SIZE_OF_BOUNDINGBOX~& = 24~&

' Wave, audio wave data
TYPE Wave
    frameCount AS _UNSIGNED LONG ' Total number of frames (considering channels)
    sampleRate AS _UNSIGNED LONG ' Frequency (samples per second)
    sampleSize AS _UNSIGNED LONG ' Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    channels AS _UNSIGNED LONG ' Number of channels (1-mono, 2-stereo, ...)
    Rdata AS _UNSIGNED _OFFSET ' Buffer data pointer
END TYPE
CONST SIZE_OF_WAVE~& = 24~&

' AudioStream, custom audio stream
TYPE AudioStream
    buffer AS _UNSIGNED _OFFSET ' Pointer to internal data used by the audio system
    processor AS _UNSIGNED _OFFSET ' Pointer to internal data processor, useful for audio effects
    sampleRate AS _UNSIGNED LONG ' Frequency (samples per second)
    sampleSize AS _UNSIGNED LONG ' Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    channels AS _UNSIGNED LONG ' Number of channels (1-mono, 2-stereo, ...)
    ___padding_G_4 AS STRING * 4 ' Do not remove or change
END TYPE
CONST SIZE_OF_AUDIOSTREAM~& = 32~&

' Sound
TYPE RSound
    stream AS AudioStream ' Audio stream
    frameCount AS _UNSIGNED LONG ' Total number of frames (considering channels)
    ___padding_G_1 AS STRING * 4 ' Do not remove or change
END TYPE
CONST SIZE_OF_RSOUND~& = 40~&

' Music, audio stream, anything longer than ~10 seconds should be streamed
TYPE Music
    stream AS AudioStream ' Audio stream
    frameCount AS _UNSIGNED LONG ' Total number of frames (considering channels)
    looping AS _BYTE ' Music looping enable
    ___padding_S_3 AS STRING * 3 ' Do not remove or change
    ctxType AS LONG ' Type of music context (audio filetype)
    ___padding_S_4 AS STRING * 4 ' Do not remove or change
    ctxData AS _UNSIGNED _OFFSET ' Audio context data, depends on type
END TYPE
CONST SIZE_OF_MUSIC~& = 56~&

' VrDeviceInfo, Head-Mounted-Display device parameters
TYPE VrDeviceInfo
    hResolution AS LONG ' Horizontal resolution in pixels
    vResolution AS LONG ' Vertical resolution in pixels
    hScreenSize AS SINGLE ' Horizontal size in meters
    vScreenSize AS SINGLE ' Vertical size in meters
    vScreenCenter AS SINGLE ' Screen center in meters
    eyeToScreenDistance AS SINGLE ' Distance between eye and display in meters
    lensSeparationDistance AS SINGLE ' Lens separation distance in meters
    interpupillaryDistance AS SINGLE ' IPD (distance between pupils) in meters
    lensDistortionValues0 AS SINGLE ' Lens distortion constant parameters
    lensDistortionValues1 AS SINGLE ' Lens distortion constant parameters
    lensDistortionValues2 AS SINGLE ' Lens distortion constant parameters
    lensDistortionValues3 AS SINGLE ' Lens distortion constant parameters
    chromaAbCorrection0 AS SINGLE ' Chromatic aberration correction parameters
    chromaAbCorrection1 AS SINGLE ' Chromatic aberration correction parameters
    chromaAbCorrection2 AS SINGLE ' Chromatic aberration correction parameters
    chromaAbCorrection3 AS SINGLE ' Chromatic aberration correction parameters
END TYPE
CONST SIZE_OF_VRDEVICEINFO~& = 64~&

' VrStereoConfig, VR stereo rendering configuration for simulator
TYPE VrStereoConfig
    projection0 AS Matrix ' VR projection matrices (per eye)
    projection1 AS Matrix ' VR projection matrices (per eye)
    viewOffset0 AS Matrix ' VR view offset matrices (per eye)
    viewOffset1 AS Matrix ' VR view offset matrices (per eye)
    leftLensCenter0 AS SINGLE ' VR left lens center
    leftLensCenter1 AS SINGLE ' VR left lens center
    rightLensCenter0 AS SINGLE ' VR right lens center
    rightLensCenter1 AS SINGLE ' VR right lens center
    leftScreenCenter0 AS SINGLE ' VR left screen center
    leftScreenCenter1 AS SINGLE ' VR left screen center
    rightScreenCenter0 AS SINGLE ' VR right screen center
    rightScreenCenter1 AS SINGLE ' VR right screen center
    scale0 AS SINGLE ' VR distortion scale
    scale1 AS SINGLE ' VR distortion scale
    scaleIn0 AS SINGLE ' VR distortion scale in
    scaleIn1 AS SINGLE ' VR distortion scale in
END TYPE
CONST SIZE_OF_VRSTEREOCONFIG~& = 304~&

' File path list
TYPE FilePathList
    capacity AS _UNSIGNED LONG ' Filepaths max entries
    count AS _UNSIGNED LONG ' Filepaths entries count
    paths AS _UNSIGNED _OFFSET ' Filepaths entries
END TYPE
CONST SIZE_OF_FILEPATHLIST~& = 16~&

' Automation event
TYPE AutomationEvent
    frame AS _UNSIGNED LONG ' Event frame
    Rtype AS _UNSIGNED LONG ' Event type (AutomationEventType)
    params0 AS LONG ' Event parameters (if required)
    params1 AS LONG ' Event parameters (if required)
    params2 AS LONG ' Event parameters (if required)
    params3 AS LONG ' Event parameters (if required)
END TYPE
CONST SIZE_OF_AUTOMATIONEVENT~& = 24~&

' Automation event list
TYPE AutomationEventList
    capacity AS _UNSIGNED LONG ' Events max entries (MAX_AUTOMATION_EVENTS)
    count AS _UNSIGNED LONG ' Events entries count
    events AS _UNSIGNED _OFFSET ' Events entries
END TYPE
CONST SIZE_OF_AUTOMATIONEVENTLIST~& = 16~&

' Anything with leading underscores here are internal support routines and should not be called directly
DECLARE STATIC LIBRARY "raylib"
    ' For internal use only
    FUNCTION ___init_raylib64%%
    ' Returns QB style bool
    FUNCTION ToQBBool%% (BYVAL x AS LONG)
    ' Casts a QB64 _OFFSET to an unsigned integer64. Needed because QB64 does not allow converting or using _OFFSET in expressions (fully :()
    FUNCTION CLngPtr~&& ALIAS uintptr_t (BYVAL p AS _UNSIGNED _OFFSET)
    ' Casts a QB64 _OFFSET to a C string. QB64 does the right thing to convert this to a QB64 string
    FUNCTION CStr$ (BYVAL ptr AS _UNSIGNED _OFFSET)
    ' Copies count bytes from src to dst
    SUB CopyMemory ALIAS RCopyMemory (BYVAL dst AS _UNSIGNED _OFFSET, BYVAL src AS _UNSIGNED _OFFSET, BYVAL count AS _UNSIGNED _OFFSET)
    ' Peeks a BYTE (8-bits) value at ptr + ofs
    FUNCTION PeekByte%% (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a BYTE (8-bits) value at ptr + ofs
    SUB PokeByte (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _BYTE)
    ' Peek an INTEGER (16-bits) value at ptr + ofs
    FUNCTION PeekInteger% (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an INTEGER (16-bits) value at ptr + ofs
    SUB PokeInteger (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS INTEGER)
    ' Peek a LONG (32-bits) value at ptr + ofs
    FUNCTION PeekLong& (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a LONG (32-bits) value at ptr + ofs
    SUB PokeLong (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS LONG)
    ' Peek a INTEGER64 (64-bits) value at ptr + ofs
    FUNCTION PeekInteger64&& (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a INTEGER64 (64-bits) value at ptr + ofs
    SUB PokeInteger64 (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _INTEGER64)
    ' Peek a SINGLE (32-bits) value at ptr + ofs
    FUNCTION PeekSingle! (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a SINGLE (32-bits) value at ptr + ofs
    SUB PokeSingle (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS SINGLE)
    ' Peek a DOUBLE (64-bits) value at ptr + ofs
    FUNCTION PeekDouble# (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a DOUBLE (64-bits) value at ptr + ofs
    SUB PokeDouble (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS DOUBLE)
    ' Peek an OFFSET (32/64-bits) value at ptr + ofs
    FUNCTION PeekOffset~%& (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an OFFSET (32/64-bits) value at ptr + ofs
    SUB PokeOffset (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _UNSIGNED _OFFSET)
    ' Gets a UDT value from a pointer position ptr, offset by ofs. Same as typeVar = ptr[ofs]
    SUB PeekType (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL typeVar AS _UNSIGNED _OFFSET, BYVAL typeSize AS _UNSIGNED _OFFSET)
    ' Sets a UDT value to a pointer position ptr, offset by ofs. Same as ptr[ofs] = typeVar
    SUB PokeType (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL typeVar AS _UNSIGNED _OFFSET, BYVAL typeSize AS _UNSIGNED _OFFSET)
    ' Peek a character value (at offset ofs) in a string (s). Zero based, faster and unsafe than ASC
    FUNCTION PeekStringByte%% (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a character value (n at offset ofs) in a string (s). Zero based, faster and unsafe than ASC
    SUB PokeStringByte (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _BYTE)
    ' Peek an integer value in a string (at offset ofs)
    FUNCTION PeekStringInteger% (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an integer value in a string (n at offset ofs)
    SUB PokeStringInteger (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS INTEGER)
    ' Peek a long value in a string (at offset ofs)
    FUNCTION PeekStringLong& (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an long value in a string (n at offset ofs)
    SUB PokeStringLong (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS LONG)
    ' Peek an integer64 value in a string (at offset ofs)
    FUNCTION PeekStringInteger64&& (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an integer64 value in a string (n at offset ofs)
    SUB PokeStringInteger64 (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _INTEGER64)
    ' Peek a single value in a string (at offset ofs)
    FUNCTION PeekStringSingle! (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a single value in a string (n at offset ofs)
    SUB PokeStringSingle (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS SINGLE)
    ' Peek a double value in a string (at offset ofs)
    FUNCTION PeekStringDouble# (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke a double value in a string (n at offset ofs)
    SUB PokeStringDouble (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS DOUBLE)
    ' Peek an Offset value in a string (at offset ofs)
    FUNCTION PeekStringOffset~%& (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET)
    ' Poke an Offset value in a string (n at offset ofs)
    SUB PokeStringOffset (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL n AS _UNSIGNED _OFFSET)
    ' Gets a UDT value (typeVar) from a string (at offset ofs)
    SUB PeekStringType (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL typeVar AS _UNSIGNED _OFFSET, BYVAL typeSize AS _UNSIGNED _OFFSET)
    ' Sets a UDT value (typeVar) to a string (at offset ofs)
    SUB PokeStringType (s AS STRING, BYVAL ofs AS _UNSIGNED _OFFSET, BYVAL typeVar AS _UNSIGNED _OFFSET, BYVAL typeSize AS _UNSIGNED _OFFSET)
    ' Makes an RGBA color from RGBA components (the return value is the same as raylib Color in memory)
    FUNCTION ToRGBA~& (BYVAL r AS _UNSIGNED _BYTE, BYVAL g AS _UNSIGNED _BYTE, BYVAL b AS _UNSIGNED _BYTE, BYVAL a AS _UNSIGNED _BYTE)
    ' Returns the Red component
    FUNCTION GetRed~%% (BYVAL rgba AS _UNSIGNED LONG)
    ' Returns the Green component
    FUNCTION GetGreen~%% (BYVAL rgba AS _UNSIGNED LONG)
    ' Returns the Blue component
    FUNCTION GetBlue~%% (BYVAL rgba AS _UNSIGNED LONG)
    ' Returns the Alpha value
    FUNCTION GetAlpha~%% (BYVAL rgba AS _UNSIGNED LONG)
    ' Gets the RGB value without the alpha
    FUNCTION GetRGB~& (BYVAL rgba AS _UNSIGNED LONG)
    ' Helps convert a BGRA color to an RGBA color and back
    FUNCTION SwapRedBlue~& (BYVAL clr AS _UNSIGNED LONG)
    ' Sets a Vector2 variable
    SUB SetVector2 (v AS Vector2, BYVAL x AS SINGLE, BYVAL y AS SINGLE)
    ' Sets a Vector3 variable
    SUB SetVector3 (v AS Vector3, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL z AS SINGLE)
    ' Sets a Vector4 variable
    SUB SetVector4 (v AS Vector4, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL z AS SINGLE, BYVAL w AS SINGLE)
    ' Sets a Rectangle variable
    SUB SetRectangle (r AS Rectangle, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL Rwidth AS SINGLE, BYVAL Rheight AS SINGLE)
    ' Sets a RColor variable
    SUB SetRColor (c AS RColor, BYVAL r AS _UNSIGNED _BYTE, BYVAL g AS _UNSIGNED _BYTE, BYVAL b AS _UNSIGNED _BYTE, BYVAL a AS _UNSIGNED _BYTE)
    ' Converts a RColor object to a 32-bit RGBA color value
    FUNCTION RColorToRGBA~& (c AS RColor)
    ' Converts a 32-bit RGBA color value to a RColor object
    SUB RGBAToRColor (BYVAL rgba AS _UNSIGNED LONG, retVal AS RColor)
    ' Close window and unload OpenGL context
    SUB CloseWindow
    ' Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
    FUNCTION WindowShouldClose%%
    ' Check if window has been initialized successfully
    FUNCTION IsWindowReady%%
    ' Check if window is currently fullscreen
    FUNCTION IsWindowFullscreen%%
    ' Check if window is currently hidden (only PLATFORM_DESKTOP)
    FUNCTION IsWindowHidden%%
    ' Check if window is currently minimized (only PLATFORM_DESKTOP)
    FUNCTION IsWindowMinimized%%
    ' Check if window is currently maximized (only PLATFORM_DESKTOP)
    FUNCTION IsWindowMaximized%%
    ' Check if window is currently focused (only PLATFORM_DESKTOP)
    FUNCTION IsWindowFocused%%
    ' Check if window has been resized last frame
    FUNCTION IsWindowResized%%
    ' Check if one specific window flag is enabled
    FUNCTION IsWindowState%% (BYVAL flag AS _UNSIGNED LONG)
    ' Set window configuration state using flags (only PLATFORM_DESKTOP)
    SUB SetWindowState (BYVAL flags AS _UNSIGNED LONG)
    ' Clear window configuration state flags
    SUB ClearWindowState (BYVAL flags AS _UNSIGNED LONG)
    ' Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
    SUB ToggleFullscreen
    ' Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
    SUB ToggleBorderlessWindowed
    ' Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
    SUB MaximizeWindow
    ' Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
    SUB MinimizeWindow
    ' Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
    SUB RestoreWindow
    ' Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
    SUB SetWindowIcon (image AS Image)
    ' Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
    SUB SetWindowIcons (images AS Image, BYVAL count AS LONG)
    ' Set window position on screen (only PLATFORM_DESKTOP)
    SUB SetWindowPosition (BYVAL x AS LONG, BYVAL y AS LONG)
    ' Set monitor for the current window
    SUB SetWindowMonitor (BYVAL monitor AS LONG)
    ' Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
    SUB SetWindowMinSize (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG)
    ' Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
    SUB SetWindowMaxSize (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG)
    ' Set window dimensions
    SUB SetWindowSize (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG)
    ' Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
    SUB SetWindowOpacity (BYVAL opacity AS SINGLE)
    ' Set window focused (only PLATFORM_DESKTOP)
    SUB SetWindowFocused
    ' Get native window handle
    FUNCTION GetWindowHandle~%&
    ' Get current screen width
    FUNCTION GetScreenWidth&
    ' Get current screen height
    FUNCTION GetScreenHeight&
    ' Get current render width (it considers HiDPI)
    FUNCTION GetRenderWidth&
    ' Get current render height (it considers HiDPI)
    FUNCTION GetRenderHeight&
    ' Get number of connected monitors
    FUNCTION GetMonitorCount&
    ' Get current connected monitor
    FUNCTION GetCurrentMonitor&
    ' Get specified monitor position
    SUB GetMonitorPosition (BYVAL monitor AS LONG, retVal AS Vector2)
    ' Get specified monitor width (current video mode used by monitor)
    FUNCTION GetMonitorWidth& (BYVAL monitor AS LONG)
    ' Get specified monitor height (current video mode used by monitor)
    FUNCTION GetMonitorHeight& (BYVAL monitor AS LONG)
    ' Get specified monitor physical width in millimetres
    FUNCTION GetMonitorPhysicalWidth& (BYVAL monitor AS LONG)
    ' Get specified monitor physical height in millimetres
    FUNCTION GetMonitorPhysicalHeight& (BYVAL monitor AS LONG)
    ' Get specified monitor refresh rate
    FUNCTION GetMonitorRefreshRate& (BYVAL monitor AS LONG)
    ' Get window position XY on monitor
    SUB GetWindowPosition (retVal AS Vector2)
    ' Get window scale DPI factor
    SUB GetWindowScaleDPI (retVal AS Vector2)
    ' Get the human-readable, UTF-8 encoded name of the specified monitor
    FUNCTION GetMonitorName$ (BYVAL monitor AS LONG)
    ' Get clipboard text content
    FUNCTION GetClipboardText$
    ' Enable waiting for events on EndDrawing(), no automatic event polling
    SUB EnableEventWaiting
    ' Disable waiting for events on EndDrawing(), automatic events polling
    SUB DisableEventWaiting
    ' Shows cursor
    SUB ShowCursor
    ' Hides cursor
    SUB HideCursor
    ' Check if cursor is not visible
    FUNCTION IsCursorHidden%%
    ' Enables cursor (unlock cursor)
    SUB EnableCursor
    ' Disables cursor (lock cursor)
    SUB DisableCursor
    ' Check if cursor is on the screen
    FUNCTION IsCursorOnScreen%%
    ' Set background color (framebuffer clear color)
    SUB ClearBackground (BYVAL Rcolor AS _UNSIGNED LONG)
    ' Setup canvas (framebuffer) to start drawing
    SUB BeginDrawing
    ' End canvas drawing and swap buffers (double buffering)
    SUB EndDrawing
    ' Begin 2D mode with custom camera (2D)
    SUB BeginMode2D (camera AS Camera2D)
    ' Ends 2D mode with custom camera
    SUB EndMode2D
    ' Begin 3D mode with custom camera (3D)
    SUB BeginMode3D (camera AS Camera3D)
    ' Ends 3D mode and returns to default 2D orthographic mode
    SUB EndMode3D
    ' Begin drawing to render texture
    SUB BeginTextureMode (target AS RenderTexture)
    ' Ends drawing to render texture
    SUB EndTextureMode
    ' Begin custom shader drawing
    SUB BeginShaderMode (shader AS Shader)
    ' End custom shader drawing (use default shader)
    SUB EndShaderMode
    ' Begin blending mode (alpha, additive, multiplied, subtract, custom)
    SUB BeginBlendMode (BYVAL mode AS LONG)
    ' End blending mode (reset to default: alpha blending)
    SUB EndBlendMode
    ' Begin scissor mode (define screen area for following drawing)
    SUB BeginScissorMode (BYVAL x AS LONG, BYVAL y AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG)
    ' End scissor mode
    SUB EndScissorMode
    ' Begin stereo rendering (requires VR simulator)
    SUB BeginVrStereoMode (config AS VrStereoConfig)
    ' End stereo rendering (requires VR simulator)
    SUB EndVrStereoMode
    ' Load VR stereo config for VR simulator device parameters
    SUB LoadVrStereoConfig (device AS VrDeviceInfo, retVal AS VrStereoConfig)
    ' Unload VR stereo config
    SUB UnloadVrStereoConfig (config AS VrStereoConfig)
    ' Check if a shader is ready
    FUNCTION IsShaderReady%% (shader AS Shader)
    ' Set shader uniform value
    SUB SetShaderValue (shader AS Shader, BYVAL locIndex AS LONG, BYVAL value AS _UNSIGNED _OFFSET, BYVAL uniformType AS LONG)
    ' Set shader uniform value vector
    SUB SetShaderValueV (shader AS Shader, BYVAL locIndex AS LONG, BYVAL value AS _UNSIGNED _OFFSET, BYVAL uniformType AS LONG, BYVAL count AS LONG)
    ' Set shader uniform value (matrix 4x4)
    SUB SetShaderValueMatrix (shader AS Shader, BYVAL locIndex AS LONG, mat AS Matrix)
    ' Set shader uniform value for texture (sampler2d)
    SUB SetShaderValueTexture (shader AS Shader, BYVAL locIndex AS LONG, texture AS Texture)
    ' Unload shader from GPU memory (VRAM)
    SUB UnloadShader (shader AS Shader)
    ' Get a ray trace from mouse position
    SUB GetMouseRay (mousePosition AS Vector2, camera AS Camera3D, retVal AS Ray)
    ' Get camera transform matrix (view matrix)
    SUB GetCameraMatrix (camera AS Camera3D, retVal AS Matrix)
    ' Get camera 2d transform matrix
    SUB GetCameraMatrix2D (camera AS Camera2D, retVal AS Matrix)
    ' Get the screen space position for a 3d world space position
    SUB GetWorldToScreen (position AS Vector3, camera AS Camera3D, retVal AS Vector2)
    ' Get the world space position for a 2d camera screen space position
    SUB GetScreenToWorld2D (position AS Vector2, camera AS Camera2D, retVal AS Vector2)
    ' Get size position for a 3d world space position
    SUB GetWorldToScreenEx (position AS Vector3, camera AS Camera3D, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, retVal AS Vector2)
    ' Get the screen space position for a 2d camera world space position
    SUB GetWorldToScreen2D (position AS Vector2, camera AS Camera2D, retVal AS Vector2)
    ' Set target FPS (maximum)
    SUB SetTargetFPS (BYVAL fps AS LONG)
    ' Get time in seconds for last frame drawn (delta time)
    FUNCTION GetFrameTime!
    ' Get elapsed time in seconds since InitWindow()
    FUNCTION GetTime#
    ' Get current FPS
    FUNCTION GetFPS&
    ' Swap back buffer with front buffer (screen drawing)
    SUB SwapScreenBuffer
    ' Register all input events
    SUB PollInputEvents
    ' Wait for some time (halt program execution)
    SUB WaitTime (BYVAL seconds AS DOUBLE)
    ' Set the seed for the random number generator
    SUB SetRandomSeed (BYVAL seed AS _UNSIGNED LONG)
    ' Get a random value between min and max (both included)
    FUNCTION GetRandomValue& (BYVAL min AS LONG, BYVAL max AS LONG)
    ' Load random values sequence, no values repeated
    FUNCTION LoadRandomSequence~%& (BYVAL count AS _UNSIGNED LONG, BYVAL min AS LONG, BYVAL max AS LONG)
    ' Unload random values sequence
    SUB UnloadRandomSequence (BYVAL sequence AS _UNSIGNED _OFFSET)
    ' Setup init configuration flags (view FLAGS)
    SUB SetConfigFlags (BYVAL flags AS _UNSIGNED LONG)
    ' Set the current threshold (minimum) log level
    SUB SetTraceLogLevel (BYVAL logLevel AS LONG)
    ' Internal memory allocator
    FUNCTION MemAlloc~%& (BYVAL size AS _UNSIGNED LONG)
    ' Internal memory reallocator
    FUNCTION MemRealloc~%& (BYVAL ptr AS _UNSIGNED _OFFSET, BYVAL size AS _UNSIGNED LONG)
    ' Internal memory free
    SUB RMemFree (BYVAL ptr AS _UNSIGNED _OFFSET)
    ' Set custom trace log
    SUB SetTraceLogCallback (BYVAL callback AS _UNSIGNED _OFFSET)
    ' Set custom file binary data loader
    SUB SetLoadFileDataCallback (BYVAL callback AS _UNSIGNED _OFFSET)
    ' Set custom file binary data saver
    SUB SetSaveFileDataCallback (BYVAL callback AS _UNSIGNED _OFFSET)
    ' Set custom file text data loader
    SUB SetLoadFileTextCallback (BYVAL callback AS _UNSIGNED _OFFSET)
    ' Set custom file text data saver
    SUB SetSaveFileTextCallback (BYVAL callback AS _UNSIGNED _OFFSET)
    ' Unload file data allocated by LoadFileData()
    SUB UnloadFileData (BYVAL Rdata AS _UNSIGNED _OFFSET)
    ' Get current working directory (uses static string)
    FUNCTION GetWorkingDirectory$
    ' Get the directory of the running application (uses static string)
    FUNCTION GetApplicationDirectory$
    ' Unload filepaths
    SUB UnloadDirectoryFiles (Rfiles AS FilePathList)
    ' Check if a file has been dropped into window
    FUNCTION IsFileDropped%%
    ' Load dropped filepaths
    SUB LoadDroppedFiles (retVal AS FilePathList)
    ' Unload dropped filepaths
    SUB UnloadDroppedFiles (Rfiles AS FilePathList)
    ' Unload automation events list from file
    SUB UnloadAutomationEventList (Rlist AS AutomationEventList)
    ' Set automation event list to record to
    SUB SetAutomationEventList (Rlist AS AutomationEventList)
    ' Set automation event internal base frame to start recording
    SUB SetAutomationEventBaseFrame (BYVAL frame AS LONG)
    ' Start recording automation events (AutomationEventList must be set)
    SUB StartAutomationEventRecording
    ' Stop recording automation events
    SUB StopAutomationEventRecording
    ' Play a recorded automation event
    SUB PlayAutomationEvent (event AS AutomationEvent)
    ' Check if a key has been pressed once
    FUNCTION IsKeyPressed%% (BYVAL Rkey AS LONG)
    ' Check if a key has been pressed again (Only PLATFORM_DESKTOP)
    FUNCTION IsKeyPressedRepeat%% (BYVAL Rkey AS LONG)
    ' Check if a key is being pressed
    FUNCTION IsKeyDown%% (BYVAL Rkey AS LONG)
    ' Check if a key has been released once
    FUNCTION IsKeyReleased%% (BYVAL Rkey AS LONG)
    ' Check if a key is NOT being pressed
    FUNCTION IsKeyUp%% (BYVAL Rkey AS LONG)
    ' Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
    FUNCTION GetKeyPressed&
    ' Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
    FUNCTION GetCharPressed&
    ' Set a custom key to exit program (default is ESC)
    SUB SetExitKey (BYVAL Rkey AS LONG)
    ' Check if a gamepad is available
    FUNCTION IsGamepadAvailable%% (BYVAL gamepad AS LONG)
    ' Get gamepad internal name id
    FUNCTION GetGamepadName$ (BYVAL gamepad AS LONG)
    ' Check if a gamepad button has been pressed once
    FUNCTION IsGamepadButtonPressed%% (BYVAL gamepad AS LONG, BYVAL Rbutton AS LONG)
    ' Check if a gamepad button is being pressed
    FUNCTION IsGamepadButtonDown%% (BYVAL gamepad AS LONG, BYVAL Rbutton AS LONG)
    ' Check if a gamepad button has been released once
    FUNCTION IsGamepadButtonReleased%% (BYVAL gamepad AS LONG, BYVAL Rbutton AS LONG)
    ' Check if a gamepad button is NOT being pressed
    FUNCTION IsGamepadButtonUp%% (BYVAL gamepad AS LONG, BYVAL Rbutton AS LONG)
    ' Get the last gamepad button pressed
    FUNCTION GetGamepadButtonPressed&
    ' Get gamepad axis count for a gamepad
    FUNCTION GetGamepadAxisCount& (BYVAL gamepad AS LONG)
    ' Get axis movement value for a gamepad axis
    FUNCTION GetGamepadAxisMovement! (BYVAL gamepad AS LONG, BYVAL Raxis AS LONG)
    ' Check if a mouse button has been pressed once
    FUNCTION IsMouseButtonPressed%% (BYVAL Rbutton AS LONG)
    ' Check if a mouse button is being pressed
    FUNCTION IsMouseButtonDown%% (BYVAL Rbutton AS LONG)
    ' Check if a mouse button has been released once
    FUNCTION IsMouseButtonReleased%% (BYVAL Rbutton AS LONG)
    ' Check if a mouse button is NOT being pressed
    FUNCTION IsMouseButtonUp%% (BYVAL Rbutton AS LONG)
    ' Get mouse position X
    FUNCTION GetMouseX&
    ' Get mouse position Y
    FUNCTION GetMouseY&
    ' Get mouse position XY
    SUB GetMousePosition (retVal AS Vector2)
    ' Get mouse delta between frames
    SUB GetMouseDelta (retVal AS Vector2)
    ' Set mouse position XY
    SUB SetMousePosition (BYVAL x AS LONG, BYVAL y AS LONG)
    ' Set mouse offset
    SUB SetMouseOffset (BYVAL offsetX AS LONG, BYVAL offsetY AS LONG)
    ' Set mouse scaling
    SUB SetMouseScale (BYVAL scaleX AS SINGLE, BYVAL scaleY AS SINGLE)
    ' Get mouse wheel movement for X or Y, whichever is larger
    FUNCTION GetMouseWheelMove!
    ' Get mouse wheel movement for both X and Y
    SUB GetMouseWheelMoveV (retVal AS Vector2)
    ' Set mouse cursor
    SUB SetMouseCursor (BYVAL cursor AS LONG)
    ' Get touch position X for touch point 0 (relative to screen size)
    FUNCTION GetTouchX&
    ' Get touch position Y for touch point 0 (relative to screen size)
    FUNCTION GetTouchY&
    ' Get touch position XY for a touch point index (relative to screen size)
    SUB GetTouchPosition (BYVAL index AS LONG, retVal AS Vector2)
    ' Get touch point identifier for given index
    FUNCTION GetTouchPointId& (BYVAL index AS LONG)
    ' Get number of touch points
    FUNCTION GetTouchPointCount&
    ' Enable a set of gestures using flags
    SUB SetGesturesEnabled (BYVAL flags AS _UNSIGNED LONG)
    ' Check if a gesture have been detected
    FUNCTION IsGestureDetected%% (BYVAL gesture AS _UNSIGNED LONG)
    ' Get latest detected gesture
    FUNCTION GetGestureDetected&
    ' Get gesture hold time in milliseconds
    FUNCTION GetGestureHoldDuration!
    ' Get gesture drag vector
    SUB GetGestureDragVector (retVal AS Vector2)
    ' Get gesture drag angle
    FUNCTION GetGestureDragAngle!
    ' Get gesture pinch delta
    SUB GetGesturePinchVector (retVal AS Vector2)
    ' Get gesture pinch angle
    FUNCTION GetGesturePinchAngle!
    ' Update camera position for selected mode
    SUB UpdateCamera (camera AS Camera3D, BYVAL mode AS LONG)
    ' Update camera movement/rotation
    SUB UpdateCameraPro (camera AS Camera3D, movement AS Vector3, rotation AS Vector3, BYVAL zoom AS SINGLE)
    ' Set texture and rectangle to be used on shapes drawing
    SUB SetShapesTexture (texture AS Texture, Rsource AS Rectangle)
    ' Draw a pixel
    SUB DrawPixel (BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a pixel (Vector version)
    SUB DrawPixelV (position AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a line
    SUB DrawLine (BYVAL startPosX AS LONG, BYVAL startPosY AS LONG, BYVAL endPosX AS LONG, BYVAL endPosY AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a line (using gl lines)
    SUB DrawLineV (startPos AS Vector2, endPos AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a line (using triangles/quads)
    SUB DrawLineEx (startPos AS Vector2, endPos AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw lines sequence (using gl lines)
    SUB DrawLineStrip (points AS Vector2, BYVAL pointCount AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw line segment cubic-bezier in-out interpolation
    SUB DrawLineBezier (startPos AS Vector2, endPos AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled circle
    SUB DrawCircle (BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radius AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a piece of a circle
    SUB DrawCircleSector (center AS Vector2, BYVAL radius AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL endAngle AS SINGLE, BYVAL segments AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw circle sector outline
    SUB DrawCircleSectorLines (center AS Vector2, BYVAL radius AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL endAngle AS SINGLE, BYVAL segments AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a gradient-filled circle
    SUB DrawCircleGradient (BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radius AS SINGLE, BYVAL color1 AS _UNSIGNED LONG, BYVAL color2 AS _UNSIGNED LONG)
    ' Draw a color-filled circle (Vector version)
    SUB DrawCircleV (center AS Vector2, BYVAL radius AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw circle outline
    SUB DrawCircleLines (BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radius AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw circle outline (Vector version)
    SUB DrawCircleLinesV (center AS Vector2, BYVAL radius AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw ellipse
    SUB DrawEllipse (BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radiusH AS SINGLE, BYVAL radiusV AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw ellipse outline
    SUB DrawEllipseLines (BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radiusH AS SINGLE, BYVAL radiusV AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw ring
    SUB DrawRing (center AS Vector2, BYVAL innerRadius AS SINGLE, BYVAL outerRadius AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL endAngle AS SINGLE, BYVAL segments AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw ring outline
    SUB DrawRingLines (center AS Vector2, BYVAL innerRadius AS SINGLE, BYVAL outerRadius AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL endAngle AS SINGLE, BYVAL segments AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled rectangle
    SUB DrawRectangle (BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled rectangle (Vector version)
    SUB DrawRectangleV (position AS Vector2, size AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled rectangle
    SUB DrawRectangleRec (rec AS Rectangle, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled rectangle with pro parameters
    SUB DrawRectanglePro (rec AS Rectangle, origin AS Vector2, BYVAL rotation AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a vertical-gradient-filled rectangle
    SUB DrawRectangleGradientV (BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL color1 AS _UNSIGNED LONG, BYVAL color2 AS _UNSIGNED LONG)
    ' Draw a horizontal-gradient-filled rectangle
    SUB DrawRectangleGradientH (BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL color1 AS _UNSIGNED LONG, BYVAL color2 AS _UNSIGNED LONG)
    ' Draw a gradient-filled rectangle with custom vertex colors
    SUB DrawRectangleGradientEx (rec AS Rectangle, BYVAL col1 AS _UNSIGNED LONG, BYVAL col2 AS _UNSIGNED LONG, BYVAL col3 AS _UNSIGNED LONG, BYVAL col4 AS _UNSIGNED LONG)
    ' Draw rectangle outline
    SUB DrawRectangleLines (BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle outline with extended parameters
    SUB DrawRectangleLinesEx (rec AS Rectangle, BYVAL lineThick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle with rounded edges
    SUB DrawRectangleRounded (rec AS Rectangle, BYVAL roundness AS SINGLE, BYVAL segments AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle with rounded edges outline
    SUB DrawRectangleRoundedLines (rec AS Rectangle, BYVAL roundness AS SINGLE, BYVAL segments AS LONG, BYVAL lineThick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled triangle (vertex in counter-clockwise order!)
    SUB DrawTriangle (v1 AS Vector2, v2 AS Vector2, v3 AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw triangle outline (vertex in counter-clockwise order!)
    SUB DrawTriangleLines (v1 AS Vector2, v2 AS Vector2, v3 AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a triangle fan defined by points (first vertex is the center)
    SUB DrawTriangleFan (points AS Vector2, BYVAL pointCount AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a triangle strip defined by points
    SUB DrawTriangleStrip (points AS Vector2, BYVAL pointCount AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a regular polygon (Vector version)
    SUB DrawPoly (center AS Vector2, BYVAL sides AS LONG, BYVAL radius AS SINGLE, BYVAL rotation AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a polygon outline of n sides
    SUB DrawPolyLines (center AS Vector2, BYVAL sides AS LONG, BYVAL radius AS SINGLE, BYVAL rotation AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a polygon outline of n sides with extended parameters
    SUB DrawPolyLinesEx (center AS Vector2, BYVAL sides AS LONG, BYVAL radius AS SINGLE, BYVAL rotation AS SINGLE, BYVAL lineThick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline: Linear, minimum 2 points
    SUB DrawSplineLinear (points AS Vector2, BYVAL pointCount AS LONG, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline: B-Spline, minimum 4 points
    SUB DrawSplineBasis (points AS Vector2, BYVAL pointCount AS LONG, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline: Catmull-Rom, minimum 4 points
    SUB DrawSplineCatmullRom (points AS Vector2, BYVAL pointCount AS LONG, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
    SUB DrawSplineBezierQuadratic (points AS Vector2, BYVAL pointCount AS LONG, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
    SUB DrawSplineBezierCubic (points AS Vector2, BYVAL pointCount AS LONG, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline segment: Linear, 2 points
    SUB DrawSplineSegmentLinear (p1 AS Vector2, p2 AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline segment: B-Spline, 4 points
    SUB DrawSplineSegmentBasis (p1 AS Vector2, p2 AS Vector2, p3 AS Vector2, p4 AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline segment: Catmull-Rom, 4 points
    SUB DrawSplineSegmentCatmullRom (p1 AS Vector2, p2 AS Vector2, p3 AS Vector2, p4 AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline segment: Quadratic Bezier, 2 points, 1 control point
    SUB DrawSplineSegmentBezierQuadratic (p1 AS Vector2, c2 AS Vector2, p3 AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw spline segment: Cubic Bezier, 2 points, 2 control points
    SUB DrawSplineSegmentBezierCubic (p1 AS Vector2, c2 AS Vector2, c3 AS Vector2, p4 AS Vector2, BYVAL thick AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Get (evaluate) spline point: Linear
    SUB GetSplinePointLinear (startPos AS Vector2, endPos AS Vector2, BYVAL t AS SINGLE, retVal AS Vector2)
    ' Get (evaluate) spline point: B-Spline
    SUB GetSplinePointBasis (p1 AS Vector2, p2 AS Vector2, p3 AS Vector2, p4 AS Vector2, BYVAL t AS SINGLE, retVal AS Vector2)
    ' Get (evaluate) spline point: Catmull-Rom
    SUB GetSplinePointCatmullRom (p1 AS Vector2, p2 AS Vector2, p3 AS Vector2, p4 AS Vector2, BYVAL t AS SINGLE, retVal AS Vector2)
    ' Get (evaluate) spline point: Quadratic Bezier
    SUB GetSplinePointBezierQuad (p1 AS Vector2, c2 AS Vector2, p3 AS Vector2, BYVAL t AS SINGLE, retVal AS Vector2)
    ' Get (evaluate) spline point: Cubic Bezier
    SUB GetSplinePointBezierCubic (p1 AS Vector2, c2 AS Vector2, c3 AS Vector2, p4 AS Vector2, BYVAL t AS SINGLE, retVal AS Vector2)
    ' Check collision between two rectangles
    FUNCTION CheckCollisionRecs%% (rec1 AS Rectangle, rec2 AS Rectangle)
    ' Check collision between two circles
    FUNCTION CheckCollisionCircles%% (center1 AS Vector2, BYVAL radius1 AS SINGLE, center2 AS Vector2, BYVAL radius2 AS SINGLE)
    ' Check collision between circle and rectangle
    FUNCTION CheckCollisionCircleRec%% (center AS Vector2, BYVAL radius AS SINGLE, rec AS Rectangle)
    ' Check if point is inside rectangle
    FUNCTION CheckCollisionPointRec%% (Rpoint AS Vector2, rec AS Rectangle)
    ' Check if point is inside circle
    FUNCTION CheckCollisionPointCircle%% (Rpoint AS Vector2, center AS Vector2, BYVAL radius AS SINGLE)
    ' Check if point is inside a triangle
    FUNCTION CheckCollisionPointTriangle%% (Rpoint AS Vector2, p1 AS Vector2, p2 AS Vector2, p3 AS Vector2)
    ' Check if point is within a polygon described by array of vertices
    FUNCTION CheckCollisionPointPoly%% (Rpoint AS Vector2, points AS Vector2, BYVAL pointCount AS LONG)
    ' Check the collision between two lines defined by two points each, returns collision point by reference
    FUNCTION CheckCollisionLines%% (startPos1 AS Vector2, endPos1 AS Vector2, startPos2 AS Vector2, endPos2 AS Vector2, collisionPoint AS Vector2)
    ' Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
    FUNCTION CheckCollisionPointLine%% (Rpoint AS Vector2, p1 AS Vector2, p2 AS Vector2, BYVAL threshold AS LONG)
    ' Get collision rectangle for two rectangles collision
    SUB GetCollisionRec (rec1 AS Rectangle, rec2 AS Rectangle, retVal AS Rectangle)
    ' Load image from GPU texture data
    SUB LoadImageFromTexture (texture AS Texture, retVal AS Image)
    ' Load image from screen buffer and (screenshot)
    SUB LoadImageFromScreen (retVal AS Image)
    ' Check if an image is ready
    FUNCTION IsImageReady%% (image AS Image)
    ' Unload image from CPU memory (RAM)
    SUB UnloadImage (image AS Image)
    ' Generate image: plain color
    SUB GenImageColor (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL Rcolor AS _UNSIGNED LONG, retVal AS Image)
    ' Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
    SUB GenImageGradientLinear (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL direction AS LONG, BYVAL start AS _UNSIGNED LONG, BYVAL Rend AS _UNSIGNED LONG, retVal AS Image)
    ' Generate image: radial gradient
    SUB GenImageGradientRadial (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL density AS SINGLE, BYVAL inner AS _UNSIGNED LONG, BYVAL outer AS _UNSIGNED LONG, retVal AS Image)
    ' Generate image: square gradient
    SUB GenImageGradientSquare (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL density AS SINGLE, BYVAL inner AS _UNSIGNED LONG, BYVAL outer AS _UNSIGNED LONG, retVal AS Image)
    ' Generate image: checked
    SUB GenImageChecked (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL checksX AS LONG, BYVAL checksY AS LONG, BYVAL col1 AS _UNSIGNED LONG, BYVAL col2 AS _UNSIGNED LONG, retVal AS Image)
    ' Generate image: white noise
    SUB GenImageWhiteNoise (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL factor AS SINGLE, retVal AS Image)
    ' Generate image: perlin noise
    SUB GenImagePerlinNoise (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL offsetX AS LONG, BYVAL offsetY AS LONG, BYVAL scale AS SINGLE, retVal AS Image)
    ' Generate image: cellular algorithm, bigger tileSize means bigger cells
    SUB GenImageCellular (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL tileSize AS LONG, retVal AS Image)
    ' Create an image duplicate (useful for transformations)
    SUB ImageCopy (image AS Image, retVal AS Image)
    ' Create an image from another image piece
    SUB ImageFromImage (image AS Image, rec AS Rectangle, retVal AS Image)
    ' Convert image data to desired format
    SUB ImageFormat (image AS Image, BYVAL newFormat AS LONG)
    ' Convert image to POT (power-of-two)
    SUB ImageToPOT (image AS Image, BYVAL fill AS _UNSIGNED LONG)
    ' Crop an image to a defined rectangle
    SUB ImageCrop (image AS Image, crop AS Rectangle)
    ' Crop image depending on alpha value
    SUB ImageAlphaCrop (image AS Image, BYVAL threshold AS SINGLE)
    ' Clear alpha channel to desired color
    SUB ImageAlphaClear (image AS Image, BYVAL Rcolor AS _UNSIGNED LONG, BYVAL threshold AS SINGLE)
    ' Apply alpha mask to image
    SUB ImageAlphaMask (image AS Image, alphaMask AS Image)
    ' Premultiply alpha channel
    SUB ImageAlphaPremultiply (image AS Image)
    ' Apply Gaussian blur using a box blur approximation
    SUB ImageBlurGaussian (image AS Image, BYVAL blurSize AS LONG)
    ' Resize image (Bicubic scaling algorithm)
    SUB ImageResize (image AS Image, BYVAL newWidth AS LONG, BYVAL newHeight AS LONG)
    ' Resize image (Nearest-Neighbor scaling algorithm)
    SUB ImageResizeNN (image AS Image, BYVAL newWidth AS LONG, BYVAL newHeight AS LONG)
    ' Resize canvas and fill with color
    SUB ImageResizeCanvas (image AS Image, BYVAL newWidth AS LONG, BYVAL newHeight AS LONG, BYVAL offsetX AS LONG, BYVAL offsetY AS LONG, BYVAL fill AS _UNSIGNED LONG)
    ' Compute all mipmap levels for a provided image
    SUB ImageMipmaps (image AS Image)
    ' Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
    SUB ImageDither (image AS Image, BYVAL rBpp AS LONG, BYVAL gBpp AS LONG, BYVAL bBpp AS LONG, BYVAL aBpp AS LONG)
    ' Flip image vertically
    SUB ImageFlipVertical (image AS Image)
    ' Flip image horizontally
    SUB ImageFlipHorizontal (image AS Image)
    ' Rotate image by input angle in degrees (-359 to 359)
    SUB ImageRotate (image AS Image, BYVAL degrees AS LONG)
    ' Rotate image clockwise 90deg
    SUB ImageRotateCW (image AS Image)
    ' Rotate image counter-clockwise 90deg
    SUB ImageRotateCCW (image AS Image)
    ' Modify image color: tint
    SUB ImageColorTint (image AS Image, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Modify image color: invert
    SUB ImageColorInvert (image AS Image)
    ' Modify image color: grayscale
    SUB ImageColorGrayscale (image AS Image)
    ' Modify image color: contrast (-100 to 100)
    SUB ImageColorContrast (image AS Image, BYVAL contrast AS SINGLE)
    ' Modify image color: brightness (-255 to 255)
    SUB ImageColorBrightness (image AS Image, BYVAL brightness AS LONG)
    ' Modify image color: replace color
    SUB ImageColorReplace (image AS Image, BYVAL Rcolor AS _UNSIGNED LONG, BYVAL replace AS _UNSIGNED LONG)
    ' Load color data from image as a Color array (RGBA - 32bit)
    FUNCTION LoadImageColors~%& (image AS Image)
    ' Load colors palette from image as a Color array (RGBA - 32bit)
    FUNCTION LoadImagePalette~%& (image AS Image, BYVAL maxPaletteSize AS LONG, colorCount AS LONG)
    ' Unload color data loaded with LoadImageColors()
    SUB UnloadImageColors (BYVAL colors AS _UNSIGNED _OFFSET)
    ' Unload colors palette loaded with LoadImagePalette()
    SUB UnloadImagePalette (BYVAL colors AS _UNSIGNED _OFFSET)
    ' Get image alpha border rectangle
    SUB GetImageAlphaBorder (image AS Image, BYVAL threshold AS SINGLE, retVal AS Rectangle)
    ' Get image pixel color at (x, y) position
    FUNCTION GetImageColor~& (image AS Image, BYVAL x AS LONG, BYVAL y AS LONG)
    ' Clear image background with given color
    SUB ImageClearBackground (dst AS Image, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw pixel within an image
    SUB ImageDrawPixel (dst AS Image, BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw pixel within an image (Vector version)
    SUB ImageDrawPixelV (dst AS Image, position AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw line within an image
    SUB ImageDrawLine (dst AS Image, BYVAL startPosX AS LONG, BYVAL startPosY AS LONG, BYVAL endPosX AS LONG, BYVAL endPosY AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw line within an image (Vector version)
    SUB ImageDrawLineV (dst AS Image, start AS Vector2, Rend AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a filled circle within an image
    SUB ImageDrawCircle (dst AS Image, BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radius AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a filled circle within an image (Vector version)
    SUB ImageDrawCircleV (dst AS Image, center AS Vector2, BYVAL radius AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw circle outline within an image
    SUB ImageDrawCircleLines (dst AS Image, BYVAL centerX AS LONG, BYVAL centerY AS LONG, BYVAL radius AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw circle outline within an image (Vector version)
    SUB ImageDrawCircleLinesV (dst AS Image, center AS Vector2, BYVAL radius AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle within an image
    SUB ImageDrawRectangle (dst AS Image, BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle within an image (Vector version)
    SUB ImageDrawRectangleV (dst AS Image, position AS Vector2, size AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle within an image
    SUB ImageDrawRectangleRec (dst AS Image, rec AS Rectangle, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw rectangle lines within an image
    SUB ImageDrawRectangleLines (dst AS Image, rec AS Rectangle, BYVAL thick AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a source image within a destination image (tint applied to source)
    SUB ImageDraw (dst AS Image, src AS Image, srcRec AS Rectangle, dstRec AS Rectangle, BYVAL tint AS _UNSIGNED LONG)
    ' Load texture from image data
    SUB LoadTextureFromImage (image AS Image, retVal AS Texture)
    ' Load cubemap from image, multiple image cubemap layouts supported
    SUB LoadTextureCubemap (image AS Image, BYVAL layout AS LONG, retVal AS Texture)
    ' Load texture for rendering (framebuffer)
    SUB LoadRenderTexture (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, retVal AS RenderTexture)
    ' Check if a texture is ready
    FUNCTION IsTextureReady%% (texture AS Texture)
    ' Unload texture from GPU memory (VRAM)
    SUB UnloadTexture (texture AS Texture)
    ' Check if a render texture is ready
    FUNCTION IsRenderTextureReady%% (target AS RenderTexture)
    ' Unload render texture from GPU memory (VRAM)
    SUB UnloadRenderTexture (target AS RenderTexture)
    ' Update GPU texture with new data
    SUB UpdateTexture (texture AS Texture, BYVAL pixels AS _UNSIGNED _OFFSET)
    ' Update GPU texture rectangle with new data
    SUB UpdateTextureRec (texture AS Texture, rec AS Rectangle, BYVAL pixels AS _UNSIGNED _OFFSET)
    ' Generate GPU mipmaps for a texture
    SUB GenTextureMipmaps (texture AS Texture)
    ' Set texture scaling filter mode
    SUB SetTextureFilter (texture AS Texture, BYVAL filter AS LONG)
    ' Set texture wrapping mode
    SUB SetTextureWrap (texture AS Texture, BYVAL wrap AS LONG)
    ' Draw a Texture2D
    SUB DrawTexture (texture AS Texture, BYVAL posX AS LONG, BYVAL posY AS LONG, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a Texture2D with position defined as Vector2
    SUB DrawTextureV (texture AS Texture, position AS Vector2, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a Texture2D with extended parameters
    SUB DrawTextureEx (texture AS Texture, position AS Vector2, BYVAL rotation AS SINGLE, BYVAL scale AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a part of a texture defined by a rectangle
    SUB DrawTextureRec (texture AS Texture, Rsource AS Rectangle, position AS Vector2, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a part of a texture defined by a rectangle with 'pro' parameters
    SUB DrawTexturePro (texture AS Texture, Rsource AS Rectangle, Rdest AS Rectangle, origin AS Vector2, BYVAL rotation AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draws a texture (or part of it) that stretches or shrinks nicely
    SUB DrawTextureNPatch (texture AS Texture, nPatchInfo AS NPatchInfo, Rdest AS Rectangle, origin AS Vector2, BYVAL rotation AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Get color with alpha applied, alpha goes from 0.0f to 1.0f
    FUNCTION Fade~& (BYVAL Rcolor AS _UNSIGNED LONG, BYVAL Ralpha AS SINGLE)
    ' Get hexadecimal value for a Color
    FUNCTION ColorToInt& (BYVAL Rcolor AS _UNSIGNED LONG)
    ' Get Color normalized as float [0..1]
    SUB ColorNormalize (BYVAL Rcolor AS _UNSIGNED LONG, retVal AS Vector4)
    ' Get Color from normalized values [0..1]
    FUNCTION ColorFromNormalized~& (normalized AS Vector4)
    ' Get HSV values for a Color, hue [0..360], saturation/value [0..1]
    SUB ColorToHSV (BYVAL Rcolor AS _UNSIGNED LONG, retVal AS Vector3)
    ' Get a Color from HSV values, hue [0..360], saturation/value [0..1]
    FUNCTION ColorFromHSV~& (BYVAL hue AS SINGLE, BYVAL saturation AS SINGLE, BYVAL value AS SINGLE)
    ' Get color multiplied with another color
    FUNCTION ColorTint~& (BYVAL Rcolor AS _UNSIGNED LONG, BYVAL tint AS _UNSIGNED LONG)
    ' Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
    FUNCTION ColorBrightness~& (BYVAL Rcolor AS _UNSIGNED LONG, BYVAL factor AS SINGLE)
    ' Get color with contrast correction, contrast values between -1.0f and 1.0f
    FUNCTION ColorContrast~& (BYVAL Rcolor AS _UNSIGNED LONG, BYVAL contrast AS SINGLE)
    ' Get color with alpha applied, alpha goes from 0.0f to 1.0f
    FUNCTION ColorAlpha~& (BYVAL Rcolor AS _UNSIGNED LONG, BYVAL Ralpha AS SINGLE)
    ' Get src alpha-blended into dst color with tint
    FUNCTION ColorAlphaBlend~& (BYVAL dst AS _UNSIGNED LONG, BYVAL src AS _UNSIGNED LONG, BYVAL tint AS _UNSIGNED LONG)
    ' Get Color structure from hexadecimal value
    FUNCTION GetColor~& (BYVAL hexValue AS _UNSIGNED LONG)
    ' Get Color from a source pixel pointer of certain format
    FUNCTION GetPixelColor~& (BYVAL srcPtr AS _UNSIGNED _OFFSET, BYVAL format AS LONG)
    ' Set color formatted into destination pixel pointer
    SUB SetPixelColor (BYVAL dstPtr AS _UNSIGNED _OFFSET, BYVAL Rcolor AS _UNSIGNED LONG, BYVAL format AS LONG)
    ' Get pixel data size in bytes for certain format
    FUNCTION GetPixelDataSize& (BYVAL Rwidth AS LONG, BYVAL Rheight AS LONG, BYVAL format AS LONG)
    ' Get the default Font
    SUB GetFontDefault (retVal AS RFont)
    ' Load font from Image (XNA style)
    SUB LoadFontFromImage (image AS Image, BYVAL Rkey AS _UNSIGNED LONG, BYVAL firstChar AS LONG, retVal AS RFont)
    ' Check if a font is ready
    FUNCTION IsFontReady%% (Rfont AS RFont)
    ' Load font data for further use
    FUNCTION LoadFontData~%& (BYVAL fileData AS _UNSIGNED _OFFSET, BYVAL dataSize AS LONG, BYVAL fontSize AS LONG, BYVAL codepoints AS _UNSIGNED _OFFSET, BYVAL codepointCount AS LONG, BYVAL Rtype AS LONG)
    ' Generate image font atlas using chars info
    SUB GenImageFontAtlas (BYVAL glyphs AS _UNSIGNED _OFFSET, glyphRecs AS _UNSIGNED _OFFSET, BYVAL glyphCount AS LONG, BYVAL fontSize AS LONG, BYVAL padding AS LONG, BYVAL packMethod AS LONG, retVal AS Image)
    ' Unload font chars info data (RAM)
    SUB UnloadFontData (BYVAL glyphs AS _UNSIGNED _OFFSET, BYVAL glyphCount AS LONG)
    ' Unload font from GPU memory (VRAM)
    SUB UnloadFont (Rfont AS RFont)
    ' Draw current FPS
    SUB DrawFPS (BYVAL posX AS LONG, BYVAL posY AS LONG)
    ' Draw one character (codepoint)
    SUB DrawTextCodepoint (Rfont AS RFont, BYVAL codepoint AS LONG, position AS Vector2, BYVAL fontSize AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draw multiple character (codepoint)
    SUB DrawTextCodepoints (Rfont AS RFont, codepoints AS LONG, BYVAL codepointCount AS LONG, position AS Vector2, BYVAL fontSize AS SINGLE, BYVAL spacing AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Set vertical line spacing when drawing with line-breaks
    SUB SetTextLineSpacing (BYVAL spacing AS LONG)
    ' Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
    FUNCTION GetGlyphIndex& (Rfont AS RFont, BYVAL codepoint AS LONG)
    ' Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
    SUB GetGlyphInfo (Rfont AS RFont, BYVAL codepoint AS LONG, retVal AS GlyphInfo)
    ' Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
    SUB GetGlyphAtlasRec (Rfont AS RFont, BYVAL codepoint AS LONG, retVal AS Rectangle)
    ' Load UTF-8 text encoded from codepoints array
    FUNCTION LoadUTF8$ (codepoints AS LONG, BYVAL length AS LONG)
    ' Unload codepoints data from memory
    SUB UnloadCodepoints (codepoints AS LONG)
    ' Encode one codepoint into UTF-8 byte array (array length returned as parameter)
    FUNCTION CodepointToUTF8$ (BYVAL codepoint AS LONG, utf8Size AS LONG)
    ' Draw a line in 3D world space
    SUB DrawLine3D (startPos AS Vector3, endPos AS Vector3, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a point in 3D space, actually a small line
    SUB DrawPoint3D (position AS Vector3, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a circle in 3D world space
    SUB DrawCircle3D (center AS Vector3, BYVAL radius AS SINGLE, rotationAxis AS Vector3, BYVAL rotationAngle AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a color-filled triangle (vertex in counter-clockwise order!)
    SUB DrawTriangle3D (v1 AS Vector3, v2 AS Vector3, v3 AS Vector3, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a triangle strip defined by points
    SUB DrawTriangleStrip3D (points AS Vector3, BYVAL pointCount AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw cube
    SUB DrawCube (position AS Vector3, BYVAL Rwidth AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL length AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw cube (Vector version)
    SUB DrawCubeV (position AS Vector3, size AS Vector3, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw cube wires
    SUB DrawCubeWires (position AS Vector3, BYVAL Rwidth AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL length AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw cube wires (Vector version)
    SUB DrawCubeWiresV (position AS Vector3, size AS Vector3, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw sphere
    SUB DrawSphere (centerPos AS Vector3, BYVAL radius AS SINGLE, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw sphere with extended parameters
    SUB DrawSphereEx (centerPos AS Vector3, BYVAL radius AS SINGLE, BYVAL rings AS LONG, BYVAL slices AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw sphere wires
    SUB DrawSphereWires (centerPos AS Vector3, BYVAL radius AS SINGLE, BYVAL rings AS LONG, BYVAL slices AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a cylinder/cone
    SUB DrawCylinder (position AS Vector3, BYVAL radiusTop AS SINGLE, BYVAL radiusBottom AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL slices AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a cylinder with base at startPos and top at endPos
    SUB DrawCylinderEx (startPos AS Vector3, endPos AS Vector3, BYVAL startRadius AS SINGLE, BYVAL endRadius AS SINGLE, BYVAL sides AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a cylinder/cone wires
    SUB DrawCylinderWires (position AS Vector3, BYVAL radiusTop AS SINGLE, BYVAL radiusBottom AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL slices AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a cylinder wires with base at startPos and top at endPos
    SUB DrawCylinderWiresEx (startPos AS Vector3, endPos AS Vector3, BYVAL startRadius AS SINGLE, BYVAL endRadius AS SINGLE, BYVAL sides AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a capsule with the center of its sphere caps at startPos and endPos
    SUB DrawCapsule (startPos AS Vector3, endPos AS Vector3, BYVAL radius AS SINGLE, BYVAL slices AS LONG, BYVAL rings AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw capsule wireframe with the center of its sphere caps at startPos and endPos
    SUB DrawCapsuleWires (startPos AS Vector3, endPos AS Vector3, BYVAL radius AS SINGLE, BYVAL slices AS LONG, BYVAL rings AS LONG, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a plane XZ
    SUB DrawPlane (centerPos AS Vector3, size AS Vector2, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a ray line
    SUB DrawRay (ray AS Ray, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a grid (centered at (0, 0, 0))
    SUB DrawGrid (BYVAL slices AS LONG, BYVAL spacing AS SINGLE)
    ' Load model from generated mesh (default material)
    SUB LoadModelFromMesh (mesh AS Mesh, retVal AS Model)
    ' Check if a model is ready
    FUNCTION IsModelReady%% (model AS Model)
    ' Unload model (including meshes) from memory (RAM and/or VRAM)
    SUB UnloadModel (model AS Model)
    ' Compute model bounding box limits (considers all meshes)
    SUB GetModelBoundingBox (model AS Model, retVal AS BoundingBox)
    ' Draw a model (with texture if set)
    SUB DrawModel (model AS Model, position AS Vector3, BYVAL scale AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a model with extended parameters
    SUB DrawModelEx (model AS Model, position AS Vector3, rotationAxis AS Vector3, BYVAL rotationAngle AS SINGLE, scale AS Vector3, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a model wires (with texture if set)
    SUB DrawModelWires (model AS Model, position AS Vector3, BYVAL scale AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a model wires (with texture if set) with extended parameters
    SUB DrawModelWiresEx (model AS Model, position AS Vector3, rotationAxis AS Vector3, BYVAL rotationAngle AS SINGLE, scale AS Vector3, BYVAL tint AS _UNSIGNED LONG)
    ' Draw bounding box (wires)
    SUB DrawBoundingBox (box AS BoundingBox, BYVAL Rcolor AS _UNSIGNED LONG)
    ' Draw a billboard texture
    SUB DrawBillboard (camera AS Camera3D, texture AS Texture, position AS Vector3, BYVAL size AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a billboard texture defined by source
    SUB DrawBillboardRec (camera AS Camera3D, texture AS Texture, Rsource AS Rectangle, position AS Vector3, size AS Vector2, BYVAL tint AS _UNSIGNED LONG)
    ' Draw a billboard texture defined by source and rotation
    SUB DrawBillboardPro (camera AS Camera3D, texture AS Texture, Rsource AS Rectangle, position AS Vector3, up AS Vector3, size AS Vector2, origin AS Vector2, BYVAL rotation AS SINGLE, BYVAL tint AS _UNSIGNED LONG)
    ' Upload mesh vertex data in GPU and provide VAO/VBO ids
    SUB UploadMesh (mesh AS Mesh, BYVAL Rdynamic AS _BYTE)
    ' Update mesh vertex data in GPU for a specific buffer index
    SUB UpdateMeshBuffer (mesh AS Mesh, BYVAL index AS LONG, BYVAL Rdata AS _UNSIGNED _OFFSET, BYVAL dataSize AS LONG, BYVAL Roffset AS LONG)
    ' Unload mesh data from CPU and GPU
    SUB UnloadMesh (mesh AS Mesh)
    ' Draw a 3d mesh with material and transform
    SUB DrawMesh (mesh AS Mesh, material AS Material, transform AS Matrix)
    ' Draw multiple mesh instances with material and different transforms
    SUB DrawMeshInstanced (mesh AS Mesh, material AS Material, transforms AS Matrix, BYVAL instances AS LONG)
    ' Compute mesh bounding box limits
    SUB GetMeshBoundingBox (mesh AS Mesh, retVal AS BoundingBox)
    ' Compute mesh tangents
    SUB GenMeshTangents (mesh AS Mesh)
    ' Generate polygonal mesh
    SUB GenMeshPoly (BYVAL sides AS LONG, BYVAL radius AS SINGLE, retVal AS Mesh)
    ' Generate plane mesh (with subdivisions)
    SUB GenMeshPlane (BYVAL Rwidth AS SINGLE, BYVAL length AS SINGLE, BYVAL resX AS LONG, BYVAL resZ AS LONG, retVal AS Mesh)
    ' Generate cuboid mesh
    SUB GenMeshCube (BYVAL Rwidth AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL length AS SINGLE, retVal AS Mesh)
    ' Generate sphere mesh (standard sphere)
    SUB GenMeshSphere (BYVAL radius AS SINGLE, BYVAL rings AS LONG, BYVAL slices AS LONG, retVal AS Mesh)
    ' Generate half-sphere mesh (no bottom cap)
    SUB GenMeshHemiSphere (BYVAL radius AS SINGLE, BYVAL rings AS LONG, BYVAL slices AS LONG, retVal AS Mesh)
    ' Generate cylinder mesh
    SUB GenMeshCylinder (BYVAL radius AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL slices AS LONG, retVal AS Mesh)
    ' Generate cone/pyramid mesh
    SUB GenMeshCone (BYVAL radius AS SINGLE, BYVAL Rheight AS SINGLE, BYVAL slices AS LONG, retVal AS Mesh)
    ' Generate torus mesh
    SUB GenMeshTorus (BYVAL radius AS SINGLE, BYVAL size AS SINGLE, BYVAL radSeg AS LONG, BYVAL sides AS LONG, retVal AS Mesh)
    ' Generate trefoil knot mesh
    SUB GenMeshKnot (BYVAL radius AS SINGLE, BYVAL size AS SINGLE, BYVAL radSeg AS LONG, BYVAL sides AS LONG, retVal AS Mesh)
    ' Generate heightmap mesh from image data
    SUB GenMeshHeightmap (heightmap AS Image, size AS Vector3, retVal AS Mesh)
    ' Generate cubes-based map mesh from image data
    SUB GenMeshCubicmap (cubicmap AS Image, cubeSize AS Vector3, retVal AS Mesh)
    ' Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
    SUB LoadMaterialDefault (retVal AS Material)
    ' Check if a material is ready
    FUNCTION IsMaterialReady%% (material AS Material)
    ' Unload material from GPU memory (VRAM)
    SUB UnloadMaterial (material AS Material)
    ' Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
    SUB SetMaterialTexture (material AS Material, BYVAL mapType AS LONG, texture AS Texture)
    ' Set material for a mesh
    SUB SetModelMeshMaterial (model AS Model, BYVAL meshId AS LONG, BYVAL materialId AS LONG)
    ' Update model animation pose
    SUB UpdateModelAnimation (model AS Model, anim AS ModelAnimation, BYVAL frame AS LONG)
    ' Unload animation data
    SUB UnloadModelAnimation (anim AS ModelAnimation)
    ' Unload animation array data
    SUB UnloadModelAnimations (animations AS ModelAnimation, BYVAL animCount AS LONG)
    ' Check model animation skeleton match
    FUNCTION IsModelAnimationValid%% (model AS Model, anim AS ModelAnimation)
    ' Check collision between two spheres
    FUNCTION CheckCollisionSpheres%% (center1 AS Vector3, BYVAL radius1 AS SINGLE, center2 AS Vector3, BYVAL radius2 AS SINGLE)
    ' Check collision between two bounding boxes
    FUNCTION CheckCollisionBoxes%% (box1 AS BoundingBox, box2 AS BoundingBox)
    ' Check collision between box and sphere
    FUNCTION CheckCollisionBoxSphere%% (box AS BoundingBox, center AS Vector3, BYVAL radius AS SINGLE)
    ' Get collision info between ray and sphere
    SUB GetRayCollisionSphere (ray AS Ray, center AS Vector3, BYVAL radius AS SINGLE, retVal AS RayCollision)
    ' Get collision info between ray and box
    SUB GetRayCollisionBox (ray AS Ray, box AS BoundingBox, retVal AS RayCollision)
    ' Get collision info between ray and mesh
    SUB GetRayCollisionMesh (ray AS Ray, mesh AS Mesh, transform AS Matrix, retVal AS RayCollision)
    ' Get collision info between ray and triangle
    SUB GetRayCollisionTriangle (ray AS Ray, p1 AS Vector3, p2 AS Vector3, p3 AS Vector3, retVal AS RayCollision)
    ' Get collision info between ray and quad
    SUB GetRayCollisionQuad (ray AS Ray, p1 AS Vector3, p2 AS Vector3, p3 AS Vector3, p4 AS Vector3, retVal AS RayCollision)
    ' Initialize audio device and context
    SUB InitAudioDevice
    ' Close the audio device and context
    SUB CloseAudioDevice
    ' Check if audio device has been initialized successfully
    FUNCTION IsAudioDeviceReady%%
    ' Set master volume (listener)
    SUB SetMasterVolume (BYVAL volume AS SINGLE)
    ' Get master volume (listener)
    FUNCTION GetMasterVolume!
    ' Checks if wave data is ready
    FUNCTION IsWaveReady%% (wave AS Wave)
    ' Load sound from wave data
    SUB LoadSoundFromWave (wave AS Wave, retVal AS RSound)
    ' Create a new sound that shares the same sample data as the source sound, does not own the sound data
    SUB LoadSoundAlias (Rsource AS RSound, retVal AS RSound)
    ' Checks if a sound is ready
    FUNCTION IsSoundReady%% (Rsound AS RSound)
    ' Update sound buffer with new data
    SUB UpdateSound (Rsound AS RSound, BYVAL Rdata AS _UNSIGNED _OFFSET, BYVAL sampleCount AS LONG)
    ' Unload wave data
    SUB UnloadWave (wave AS Wave)
    ' Unload sound
    SUB UnloadSound (Rsound AS RSound)
    ' Unload a sound alias (does not deallocate sample data)
    SUB UnloadSoundAlias (Ralias AS RSound)
    ' Play a sound
    SUB PlaySound (Rsound AS RSound)
    ' Stop playing a sound
    SUB StopSound (Rsound AS RSound)
    ' Pause a sound
    SUB PauseSound (Rsound AS RSound)
    ' Resume a paused sound
    SUB ResumeSound (Rsound AS RSound)
    ' Check if a sound is currently playing
    FUNCTION IsSoundPlaying%% (Rsound AS RSound)
    ' Set volume for a sound (1.0 is max level)
    SUB SetSoundVolume (Rsound AS RSound, BYVAL volume AS SINGLE)
    ' Set pitch for a sound (1.0 is base level)
    SUB SetSoundPitch (Rsound AS RSound, BYVAL pitch AS SINGLE)
    ' Set pan for a sound (0.5 is center)
    SUB SetSoundPan (Rsound AS RSound, BYVAL pan AS SINGLE)
    ' Copy a wave to a new wave
    SUB WaveCopy (wave AS Wave, retVal AS Wave)
    ' Crop a wave to defined samples range
    SUB WaveCrop (wave AS Wave, BYVAL initSample AS LONG, BYVAL finalSample AS LONG)
    ' Convert wave data to desired format
    SUB WaveFormat (wave AS Wave, BYVAL sampleRate AS LONG, BYVAL sampleSize AS LONG, BYVAL channels AS LONG)
    ' Load samples data from wave as a 32bit float data array
    FUNCTION LoadWaveSamples~%& (wave AS Wave)
    ' Unload samples data loaded with LoadWaveSamples()
    SUB UnloadWaveSamples (BYVAL samples AS _UNSIGNED _OFFSET)
    ' Checks if a music stream is ready
    FUNCTION IsMusicReady%% (music AS Music)
    ' Unload music stream
    SUB UnloadMusicStream (music AS Music)
    ' Start music playing
    SUB PlayMusicStream (music AS Music)
    ' Check if music is playing
    FUNCTION IsMusicStreamPlaying%% (music AS Music)
    ' Updates buffers for music streaming
    SUB UpdateMusicStream (music AS Music)
    ' Stop music playing
    SUB StopMusicStream (music AS Music)
    ' Pause music playing
    SUB PauseMusicStream (music AS Music)
    ' Resume playing paused music
    SUB ResumeMusicStream (music AS Music)
    ' Seek music to a position (in seconds)
    SUB SeekMusicStream (music AS Music, BYVAL position AS SINGLE)
    ' Set volume for music (1.0 is max level)
    SUB SetMusicVolume (music AS Music, BYVAL volume AS SINGLE)
    ' Set pitch for a music (1.0 is base level)
    SUB SetMusicPitch (music AS Music, BYVAL pitch AS SINGLE)
    ' Set pan for a music (0.5 is center)
    SUB SetMusicPan (music AS Music, BYVAL pan AS SINGLE)
    ' Get music time length (in seconds)
    FUNCTION GetMusicTimeLength! (music AS Music)
    ' Get current music time played (in seconds)
    FUNCTION GetMusicTimePlayed! (music AS Music)
    ' Load audio stream (to stream raw audio pcm data)
    SUB LoadAudioStream (BYVAL sampleRate AS _UNSIGNED LONG, BYVAL sampleSize AS _UNSIGNED LONG, BYVAL channels AS _UNSIGNED LONG, retVal AS AudioStream)
    ' Checks if an audio stream is ready
    FUNCTION IsAudioStreamReady%% (stream AS AudioStream)
    ' Unload audio stream and free memory
    SUB UnloadAudioStream (stream AS AudioStream)
    ' Update audio stream buffers with data
    SUB UpdateAudioStream (stream AS AudioStream, BYVAL Rdata AS _UNSIGNED _OFFSET, BYVAL frameCount AS LONG)
    ' Check if any audio stream buffers requires refill
    FUNCTION IsAudioStreamProcessed%% (stream AS AudioStream)
    ' Play audio stream
    SUB PlayAudioStream (stream AS AudioStream)
    ' Pause audio stream
    SUB PauseAudioStream (stream AS AudioStream)
    ' Resume audio stream
    SUB ResumeAudioStream (stream AS AudioStream)
    ' Check if audio stream is playing
    FUNCTION IsAudioStreamPlaying%% (stream AS AudioStream)
    ' Stop audio stream
    SUB StopAudioStream (stream AS AudioStream)
    ' Set volume for audio stream (1.0 is max level)
    SUB SetAudioStreamVolume (stream AS AudioStream, BYVAL volume AS SINGLE)
    ' Set pitch for audio stream (1.0 is base level)
    SUB SetAudioStreamPitch (stream AS AudioStream, BYVAL pitch AS SINGLE)
    ' Set pan for audio stream (0.5 is centered)
    SUB SetAudioStreamPan (stream AS AudioStream, BYVAL pan AS SINGLE)
    ' Default size for new audio streams
    SUB SetAudioStreamBufferSizeDefault (BYVAL size AS LONG)
    ' Audio thread callback to request new data
    SUB SetAudioStreamCallback (stream AS AudioStream, BYVAL callback AS _UNSIGNED _OFFSET)
    ' Attach audio stream processor to stream, receives the samples as <float>s
    SUB AttachAudioStreamProcessor (stream AS AudioStream, BYVAL processor AS _UNSIGNED _OFFSET)
    ' Detach audio stream processor from stream
    SUB DetachAudioStreamProcessor (stream AS AudioStream, BYVAL processor AS _UNSIGNED _OFFSET)
    ' Attach audio stream processor to the entire audio pipeline, receives the samples as <float>s
    SUB AttachAudioMixedProcessor (BYVAL processor AS _UNSIGNED _OFFSET)
    ' Detach audio stream processor from the entire audio pipeline
    SUB DetachAudioMixedProcessor (BYVAL processor AS _UNSIGNED _OFFSET)
END DECLARE
'
IF NOT ___init_raylib64 THEN
    _MESSAGEBOX "raylib-64 Error", "raylib-64 initialization failed! Application execution will be terminated. Please ensure raylib shared library or dynamic link library is in the path.", "error"
    SYSTEM LOG_FATAL
END IF
