//-----------------------------------------------------------------------------------------------------------------------
// raylib-64: raylib bindings for QB64-PE
// Copyright (c) 2024 Samuel Gomes
//
// This file was autogenerated by QB64-PE raylib bindings generator (bindgen.bas)
//-----------------------------------------------------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include <cstring>
#include "external/dylib.hpp"

// Quick and dirty logging macros
#define RAYLIB_DEBUG_PRINT(_fmt_, _args_...) fprintf(stderr, "\e[1;37mDEBUG: %s:%d:%s(): \e[1;33m" _fmt_ "\e[1;37m\n", __FILE__, __LINE__, __func__, ##_args_)
#define RAYLIB_DEBUG_CHECK(_exp_) \
    if (!(_exp_))                 \
    RAYLIB_DEBUG_PRINT("\e[0;31mCondition (%s) failed", #_exp_)

// Use _BYTE (8-bits) for bool
typedef int8_t qb_bool;
// QB64 FALSE is 0 and TRUE is -1 (sad, but true XD)
#ifndef QB_TRUE
#define QB_TRUE -1
#endif
#ifndef QB_FALSE
#define QB_FALSE 0
#endif
// This one is just for safety just in case someone is doing _exp_ == 1 inside raylib
#define TO_C_BOOL(_exp_) ((_exp_) != false)
// We have to do this for the QB64 side
#define TO_QB_BOOL(_exp_) ((qb_bool)(-TO_C_BOOL(_exp_)))

// Opaque structs declaration
// NOTE: Actual structs are defined internally in raudio module
typedef struct rAudioBuffer rAudioBuffer;
typedef struct rAudioProcessor rAudioProcessor;

#if !defined(RL_VECTOR2_TYPE)
// Vector2, 2 components
struct Vector2
{
    float x; // Vector x component
    float y; // Vector y component
};
#define RL_VECTOR2_TYPE 1
#endif

#if !defined(RL_VECTOR3_TYPE)
// Vector3, 3 components
struct Vector3
{
    float x; // Vector x component
    float y; // Vector y component
    float z; // Vector z component
};
#define RL_VECTOR3_TYPE 1
#endif

#if !defined(RL_VECTOR4_TYPE)
// Vector4, 4 components
struct Vector4
{
    float x; // Vector x component
    float y; // Vector y component
    float z; // Vector z component
    float w; // Vector w component
};
#define RL_VECTOR4_TYPE 1
#endif

#if !defined(RL_MATRIX_TYPE)
// Matrix, 4x4 components, column major, OpenGL style, right-handed
struct Matrix
{
    float m0;  // Matrix first row (4 components)
    float m4;  // Matrix first row (4 components)
    float m8;  // Matrix first row (4 components)
    float m12; // Matrix first row (4 components)
    float m1;  // Matrix second row (4 components)
    float m5;  // Matrix second row (4 components)
    float m9;  // Matrix second row (4 components)
    float m13; // Matrix second row (4 components)
    float m2;  // Matrix third row (4 components)
    float m6;  // Matrix third row (4 components)
    float m10; // Matrix third row (4 components)
    float m14; // Matrix third row (4 components)
    float m3;  // Matrix fourth row (4 components)
    float m7;  // Matrix fourth row (4 components)
    float m11; // Matrix fourth row (4 components)
    float m15; // Matrix fourth row (4 components)
};
#define RL_MATRIX_TYPE 1
#endif

// Color, 4 components, R8G8B8A8 (32bit)
// Changed to uint32_t
struct RColor
{
    uint8_t r; // Color red value
    uint8_t g; // Color green value
    uint8_t b; // Color blue value
    uint8_t a; // Color alpha value
};

// Rectangle, 4 components
struct RRectangle
{
    float x;      // Rectangle top-left corner position x
    float y;      // Rectangle top-left corner position y
    float width;  // Rectangle width
    float height; // Rectangle height
};

// Image, pixel data stored in CPU memory (RAM)
struct Image
{
    void *data;  // Image raw data
    int width;   // Image base width
    int height;  // Image base height
    int mipmaps; // Mipmap levels, 1 by default
    int format;  // Data format (PixelFormat type)
};

// Texture, tex data stored in GPU memory (VRAM)
struct Texture
{
    unsigned int id; // OpenGL texture id
    int width;       // Texture base width
    int height;      // Texture base height
    int mipmaps;     // Mipmap levels, 1 by default
    int format;      // Data format (PixelFormat type)
};

// RenderTexture, fbo for texture rendering
struct RenderTexture
{
    unsigned int id; // OpenGL framebuffer object id
    Texture texture; // Color buffer attachment texture
    Texture depth;   // Depth buffer attachment texture
};

// NPatchInfo, n-patch layout info
struct NPatchInfo
{
    RRectangle source; // Texture source rectangle
    int left;          // Left border offset
    int top;           // Top border offset
    int right;         // Right border offset
    int bottom;        // Bottom border offset
    int layout;        // Layout of the n-patch: 3x3, 1x3 or 3x1
};

// GlyphInfo, font characters glyphs info
struct GlyphInfo
{
    int value;    // Character value (Unicode)
    int offsetX;  // Character offset X when drawing
    int offsetY;  // Character offset Y when drawing
    int advanceX; // Character advance position X
    Image image;  // Character image data
};

// Font, font texture and GlyphInfo array data
struct RFont
{
    int baseSize;      // Base size (default chars height)
    int glyphCount;    // Number of glyph characters
    int glyphPadding;  // Padding around the glyph characters
    Texture texture;   // Texture atlas containing the glyphs
    RRectangle *recs;  // Rectangles in texture for the glyphs
    GlyphInfo *glyphs; // Glyphs info data
};

// Camera, defines position/orientation in 3d space
struct Camera3D
{
    Vector3 position; // Camera position
    Vector3 target;   // Camera target it looks-at
    Vector3 up;       // Camera up vector (rotation over its axis)
    float fovy;       // Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
    int projection;   // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
};

// Camera2D, defines position/orientation in 2d space
struct Camera2D
{
    Vector2 offset; // Camera offset (displacement from target)
    Vector2 target; // Camera target (rotation and zoom origin)
    float rotation; // Camera rotation in degrees
    float zoom;     // Camera zoom (scaling), should be 1.0f by default
};

// Mesh, vertex data and vao/vbo
struct Mesh
{
    int vertexCount;         // Number of vertices stored in arrays
    int triangleCount;       // Number of triangles stored (indexed or not)
    float *vertices;         // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
    float *texcoords;        // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
    float *texcoords2;       // Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
    float *normals;          // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
    float *tangents;         // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
    unsigned char *colors;   // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
    unsigned short *indices; // Vertex indices (in case vertex data comes indexed)
    float *animVertices;     // Animated vertex positions (after bones transformations)
    float *animNormals;      // Animated normals (after bones transformations)
    unsigned char *boneIds;  // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
    float *boneWeights;      // Vertex bone weight, up to 4 bones influence by vertex (skinning)
    unsigned int vaoId;      // OpenGL Vertex Array Object id
    unsigned int *vboId;     // OpenGL Vertex Buffer Objects id (default vertex data)
};

// Shader
struct Shader
{
    unsigned int id; // Shader program id
    int *locs;       // Shader locations array (RL_MAX_SHADER_LOCATIONS)
};

// MaterialMap
struct MaterialMap
{
    Texture texture; // Material map texture
    uint32_t color;  // Material map color
    float value;     // Material map value
};

// Material, includes shader and maps
struct Material
{
    Shader shader;     // Material shader
    MaterialMap *maps; // Material maps array (MAX_MATERIAL_MAPS)
    float params[4];   // Material generic parameters (if required)
};

// Transform, vertex transformation data
struct Transform
{
    Vector3 translation; // Translation
    Vector4 rotation;    // Rotation
    Vector3 scale;       // Scale
};

// Bone, skeletal animation bone
struct BoneInfo
{
    char name[32]; // Bone name
    int parent;    // Bone parent
};

// Model, meshes, materials and animation data
struct Model
{
    Matrix transform;    // Local transform matrix
    int meshCount;       // Number of meshes
    int materialCount;   // Number of materials
    Mesh *meshes;        // Meshes array
    Material *materials; // Materials array
    int *meshMaterial;   // Mesh material number
    int boneCount;       // Number of bones
    BoneInfo *bones;     // Bones information (skeleton)
    Transform *bindPose; // Bones base transformation (pose)
};

// ModelAnimation
struct ModelAnimation
{
    int boneCount;          // Number of bones
    int frameCount;         // Number of animation frames
    BoneInfo *bones;        // Bones information (skeleton)
    Transform **framePoses; // Poses array by frame
    char name[32];          // Animation name
};

// Ray, ray for raycasting
struct Ray
{
    Vector3 position;  // Ray position (origin)
    Vector3 direction; // Ray direction
};

// RayCollision, ray hit information
struct RayCollision
{
    bool hit;       // Did the ray hit something?
    float distance; // Distance to the nearest hit
    Vector3 point;  // Point of the nearest hit
    Vector3 normal; // Surface normal of hit
};

// BoundingBox
struct BoundingBox
{
    Vector3 min; // Minimum vertex box-corner
    Vector3 max; // Maximum vertex box-corner
};

// Wave, audio wave data
struct Wave
{
    unsigned int frameCount; // Total number of frames (considering channels)
    unsigned int sampleRate; // Frequency (samples per second)
    unsigned int sampleSize; // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    unsigned int channels;   // Number of channels (1-mono, 2-stereo, ...)
    void *data;              // Buffer data pointer
};

// AudioStream, custom audio stream
struct AudioStream
{
    rAudioBuffer *buffer;       // Pointer to internal data used by the audio system
    rAudioProcessor *processor; // Pointer to internal data processor, useful for audio effects
    unsigned int sampleRate;    // Frequency (samples per second)
    unsigned int sampleSize;    // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    unsigned int channels;      // Number of channels (1-mono, 2-stereo, ...)
};

// Sound
struct RSound
{
    AudioStream stream;      // Audio stream
    unsigned int frameCount; // Total number of frames (considering channels)
};

// Music, audio stream, anything longer than ~10 seconds should be streamed
struct Music
{
    AudioStream stream;      // Audio stream
    unsigned int frameCount; // Total number of frames (considering channels)
    bool looping;            // Music looping enable
    int ctxType;             // Type of music context (audio filetype)
    void *ctxData;           // Audio context data, depends on type
};

// VrDeviceInfo, Head-Mounted-Display device parameters
struct VrDeviceInfo
{
    int hResolution;               // Horizontal resolution in pixels
    int vResolution;               // Vertical resolution in pixels
    float hScreenSize;             // Horizontal size in meters
    float vScreenSize;             // Vertical size in meters
    float vScreenCenter;           // Screen center in meters
    float eyeToScreenDistance;     // Distance between eye and display in meters
    float lensSeparationDistance;  // Lens separation distance in meters
    float interpupillaryDistance;  // IPD (distance between pupils) in meters
    float lensDistortionValues[4]; // Lens distortion constant parameters
    float chromaAbCorrection[4];   // Chromatic aberration correction parameters
};

// VrStereoConfig, VR stereo rendering configuration for simulator
struct VrStereoConfig
{
    Matrix projection[2];       // VR projection matrices (per eye)
    Matrix viewOffset[2];       // VR view offset matrices (per eye)
    float leftLensCenter[2];    // VR left lens center
    float rightLensCenter[2];   // VR right lens center
    float leftScreenCenter[2];  // VR left screen center
    float rightScreenCenter[2]; // VR right screen center
    float scale[2];             // VR distortion scale
    float scaleIn[2];           // VR distortion scale in
};

// File path list
struct FilePathList
{
    unsigned int capacity; // Filepaths max entries
    unsigned int count;    // Filepaths entries count
    char **paths;          // Filepaths entries
};

// Automation event
struct AutomationEvent
{
    unsigned int frame; // Event frame
    unsigned int type;  // Event type (AutomationEventType)
    int params[4];      // Event parameters (if required)
};

// Automation event list
struct AutomationEventList
{
    unsigned int capacity;   // Events max entries (MAX_AUTOMATION_EVENTS)
    unsigned int count;      // Events entries count
    AutomationEvent *events; // Events entries
};

// Callbacks to hook some internal functions
typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);       // Logging: Redirect trace log messages
typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);  // FileIO: Load binary data
typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize); // FileIO: Save binary data
typedef char *(*LoadFileTextCallback)(const char *fileName);                          // FileIO: Load text data
typedef bool (*SaveFileTextCallback)(const char *fileName, char *text);               // FileIO: Save text data
typedef void (*AudioCallback)(void *bufferData, unsigned int frames);

static dylib *_raylib64 = nullptr; //  This is our raylib shared library object

//  Global raylib function pointers
static void (*_InitWindow)(int width, int height, char *title) = nullptr;
static void (*_CloseWindow)() = nullptr;
static bool (*_WindowShouldClose)() = nullptr;
static bool (*_IsWindowReady)() = nullptr;
static bool (*_IsWindowFullscreen)() = nullptr;
static bool (*_IsWindowHidden)() = nullptr;
static bool (*_IsWindowMinimized)() = nullptr;
static bool (*_IsWindowMaximized)() = nullptr;
static bool (*_IsWindowFocused)() = nullptr;
static bool (*_IsWindowResized)() = nullptr;
static bool (*_IsWindowState)(unsigned int flag) = nullptr;
static void (*_SetWindowState)(unsigned int flags) = nullptr;
static void (*_ClearWindowState)(unsigned int flags) = nullptr;
static void (*_ToggleFullscreen)() = nullptr;
static void (*_ToggleBorderlessWindowed)() = nullptr;
static void (*_MaximizeWindow)() = nullptr;
static void (*_MinimizeWindow)() = nullptr;
static void (*_RestoreWindow)() = nullptr;
static void (*_SetWindowIcon)(Image image) = nullptr;
static void (*_SetWindowIcons)(Image *images, int count) = nullptr;
static void (*_SetWindowTitle)(char *title) = nullptr;
static void (*_SetWindowPosition)(int x, int y) = nullptr;
static void (*_SetWindowMonitor)(int monitor) = nullptr;
static void (*_SetWindowMinSize)(int width, int height) = nullptr;
static void (*_SetWindowMaxSize)(int width, int height) = nullptr;
static void (*_SetWindowSize)(int width, int height) = nullptr;
static void (*_SetWindowOpacity)(float opacity) = nullptr;
static void (*_SetWindowFocused)() = nullptr;
static void *(*_GetWindowHandle)() = nullptr;
static int (*_GetScreenWidth)() = nullptr;
static int (*_GetScreenHeight)() = nullptr;
static int (*_GetRenderWidth)() = nullptr;
static int (*_GetRenderHeight)() = nullptr;
static int (*_GetMonitorCount)() = nullptr;
static int (*_GetCurrentMonitor)() = nullptr;
static Vector2 (*_GetMonitorPosition)(int monitor) = nullptr;
static int (*_GetMonitorWidth)(int monitor) = nullptr;
static int (*_GetMonitorHeight)(int monitor) = nullptr;
static int (*_GetMonitorPhysicalWidth)(int monitor) = nullptr;
static int (*_GetMonitorPhysicalHeight)(int monitor) = nullptr;
static int (*_GetMonitorRefreshRate)(int monitor) = nullptr;
static Vector2 (*_GetWindowPosition)() = nullptr;
static Vector2 (*_GetWindowScaleDPI)() = nullptr;
static char *(*_GetMonitorName)(int monitor) = nullptr;
static void (*_SetClipboardText)(char *text) = nullptr;
static char *(*_GetClipboardText)() = nullptr;
static void (*_EnableEventWaiting)() = nullptr;
static void (*_DisableEventWaiting)() = nullptr;
static void (*_ShowCursor)() = nullptr;
static void (*_HideCursor)() = nullptr;
static bool (*_IsCursorHidden)() = nullptr;
static void (*_EnableCursor)() = nullptr;
static void (*_DisableCursor)() = nullptr;
static bool (*_IsCursorOnScreen)() = nullptr;
static void (*_ClearBackground)(uint32_t color) = nullptr;
static void (*_BeginDrawing)() = nullptr;
static void (*_EndDrawing)() = nullptr;
static void (*_BeginMode2D)(Camera2D camera) = nullptr;
static void (*_EndMode2D)() = nullptr;
static void (*_BeginMode3D)(Camera3D camera) = nullptr;
static void (*_EndMode3D)() = nullptr;
static void (*_BeginTextureMode)(RenderTexture target) = nullptr;
static void (*_EndTextureMode)() = nullptr;
static void (*_BeginShaderMode)(Shader shader) = nullptr;
static void (*_EndShaderMode)() = nullptr;
static void (*_BeginBlendMode)(int mode) = nullptr;
static void (*_EndBlendMode)() = nullptr;
static void (*_BeginScissorMode)(int x, int y, int width, int height) = nullptr;
static void (*_EndScissorMode)() = nullptr;
static void (*_BeginVrStereoMode)(VrStereoConfig config) = nullptr;
static void (*_EndVrStereoMode)() = nullptr;
static VrStereoConfig (*_LoadVrStereoConfig)(VrDeviceInfo device) = nullptr;
static void (*_UnloadVrStereoConfig)(VrStereoConfig config) = nullptr;
static Shader (*_LoadShader)(char *vsFileName, char *fsFileName) = nullptr;
static Shader (*_LoadShaderFromMemory)(char *vsCode, char *fsCode) = nullptr;
static bool (*_IsShaderReady)(Shader shader) = nullptr;
static int (*_GetShaderLocation)(Shader shader, char *uniformName) = nullptr;
static int (*_GetShaderLocationAttrib)(Shader shader, char *attribName) = nullptr;
static void (*_SetShaderValue)(Shader shader, int locIndex, void *value, int uniformType) = nullptr;
static void (*_SetShaderValueV)(Shader shader, int locIndex, void *value, int uniformType, int count) = nullptr;
static void (*_SetShaderValueMatrix)(Shader shader, int locIndex, Matrix mat) = nullptr;
static void (*_SetShaderValueTexture)(Shader shader, int locIndex, Texture texture) = nullptr;
static void (*_UnloadShader)(Shader shader) = nullptr;
static Ray (*_GetMouseRay)(Vector2 mousePosition, Camera3D camera) = nullptr;
static Matrix (*_GetCameraMatrix)(Camera3D camera) = nullptr;
static Matrix (*_GetCameraMatrix2D)(Camera2D camera) = nullptr;
static Vector2 (*_GetWorldToScreen)(Vector3 position, Camera3D camera) = nullptr;
static Vector2 (*_GetScreenToWorld2D)(Vector2 position, Camera2D camera) = nullptr;
static Vector2 (*_GetWorldToScreenEx)(Vector3 position, Camera3D camera, int width, int height) = nullptr;
static Vector2 (*_GetWorldToScreen2D)(Vector2 position, Camera2D camera) = nullptr;
static void (*_SetTargetFPS)(int fps) = nullptr;
static float (*_GetFrameTime)() = nullptr;
static double (*_GetTime)() = nullptr;
static int (*_GetFPS)() = nullptr;
static void (*_SwapScreenBuffer)() = nullptr;
static void (*_PollInputEvents)() = nullptr;
static void (*_WaitTime)(double seconds) = nullptr;
static void (*_SetRandomSeed)(unsigned int seed) = nullptr;
static int (*_GetRandomValue)(int min, int max) = nullptr;
static int *(*_LoadRandomSequence)(unsigned int count, int min, int max) = nullptr;
static void (*_UnloadRandomSequence)(int *sequence) = nullptr;
static void (*_TakeScreenshot)(char *fileName) = nullptr;
static void (*_SetConfigFlags)(unsigned int flags) = nullptr;
static void (*_OpenURL)(char *url) = nullptr;
static void (*_TraceLog)(int logLevel, char *text, ...) = nullptr;
static void (*_SetTraceLogLevel)(int logLevel) = nullptr;
static void *(*_MemAlloc)(unsigned int size) = nullptr;
static void *(*_MemRealloc)(void *ptr, unsigned int size) = nullptr;
static void (*_MemFree)(void *ptr) = nullptr;
static void (*_SetTraceLogCallback)(TraceLogCallback callback) = nullptr;
static void (*_SetLoadFileDataCallback)(LoadFileDataCallback callback) = nullptr;
static void (*_SetSaveFileDataCallback)(SaveFileDataCallback callback) = nullptr;
static void (*_SetLoadFileTextCallback)(LoadFileTextCallback callback) = nullptr;
static void (*_SetSaveFileTextCallback)(SaveFileTextCallback callback) = nullptr;
static unsigned char *(*_LoadFileData)(char *fileName, int *dataSize) = nullptr;
static void (*_UnloadFileData)(unsigned char *data) = nullptr;
static bool (*_SaveFileData)(char *fileName, void *data, int dataSize) = nullptr;
static bool (*_ExportDataAsCode)(unsigned char *data, int dataSize, char *fileName) = nullptr;
static char *(*_LoadFileText)(char *fileName) = nullptr;
static void (*_UnloadFileText)(char *text) = nullptr;
static bool (*_SaveFileText)(char *fileName, char *text) = nullptr;
static bool (*_FileExists)(char *fileName) = nullptr;
static bool (*_DirectoryExists)(char *dirPath) = nullptr;
static bool (*_IsFileExtension)(char *fileName, char *ext) = nullptr;
static int (*_GetFileLength)(char *fileName) = nullptr;
static char *(*_GetFileExtension)(char *fileName) = nullptr;
static char *(*_GetFileName)(char *filePath) = nullptr;
static char *(*_GetFileNameWithoutExt)(char *filePath) = nullptr;
static char *(*_GetDirectoryPath)(char *filePath) = nullptr;
static char *(*_GetPrevDirectoryPath)(char *dirPath) = nullptr;
static char *(*_GetWorkingDirectory)() = nullptr;
static char *(*_GetApplicationDirectory)() = nullptr;
static bool (*_ChangeDirectory)(char *dir) = nullptr;
static bool (*_IsPathFile)(char *path) = nullptr;
static FilePathList (*_LoadDirectoryFiles)(char *dirPath) = nullptr;
static FilePathList (*_LoadDirectoryFilesEx)(char *basePath, char *filter, bool scanSubdirs) = nullptr;
static void (*_UnloadDirectoryFiles)(FilePathList files) = nullptr;
static bool (*_IsFileDropped)() = nullptr;
static FilePathList (*_LoadDroppedFiles)() = nullptr;
static void (*_UnloadDroppedFiles)(FilePathList files) = nullptr;
static long (*_GetFileModTime)(char *fileName) = nullptr;
static unsigned char *(*_CompressData)(unsigned char *data, int dataSize, int *compDataSize) = nullptr;
static unsigned char *(*_DecompressData)(unsigned char *compData, int compDataSize, int *dataSize) = nullptr;
static char *(*_EncodeDataBase64)(unsigned char *data, int dataSize, int *outputSize) = nullptr;
static unsigned char *(*_DecodeDataBase64)(unsigned char *data, int *outputSize) = nullptr;
static AutomationEventList (*_LoadAutomationEventList)(char *fileName) = nullptr;
static void (*_UnloadAutomationEventList)(AutomationEventList *list) = nullptr;
static bool (*_ExportAutomationEventList)(AutomationEventList list, char *fileName) = nullptr;
static void (*_SetAutomationEventList)(AutomationEventList *list) = nullptr;
static void (*_SetAutomationEventBaseFrame)(int frame) = nullptr;
static void (*_StartAutomationEventRecording)() = nullptr;
static void (*_StopAutomationEventRecording)() = nullptr;
static void (*_PlayAutomationEvent)(AutomationEvent event) = nullptr;
static bool (*_IsKeyPressed)(int key) = nullptr;
static bool (*_IsKeyPressedRepeat)(int key) = nullptr;
static bool (*_IsKeyDown)(int key) = nullptr;
static bool (*_IsKeyReleased)(int key) = nullptr;
static bool (*_IsKeyUp)(int key) = nullptr;
static int (*_GetKeyPressed)() = nullptr;
static int (*_GetCharPressed)() = nullptr;
static void (*_SetExitKey)(int key) = nullptr;
static bool (*_IsGamepadAvailable)(int gamepad) = nullptr;
static char *(*_GetGamepadName)(int gamepad) = nullptr;
static bool (*_IsGamepadButtonPressed)(int gamepad, int button) = nullptr;
static bool (*_IsGamepadButtonDown)(int gamepad, int button) = nullptr;
static bool (*_IsGamepadButtonReleased)(int gamepad, int button) = nullptr;
static bool (*_IsGamepadButtonUp)(int gamepad, int button) = nullptr;
static int (*_GetGamepadButtonPressed)() = nullptr;
static int (*_GetGamepadAxisCount)(int gamepad) = nullptr;
static float (*_GetGamepadAxisMovement)(int gamepad, int axis) = nullptr;
static int (*_SetGamepadMappings)(char *mappings) = nullptr;
static bool (*_IsMouseButtonPressed)(int button) = nullptr;
static bool (*_IsMouseButtonDown)(int button) = nullptr;
static bool (*_IsMouseButtonReleased)(int button) = nullptr;
static bool (*_IsMouseButtonUp)(int button) = nullptr;
static int (*_GetMouseX)() = nullptr;
static int (*_GetMouseY)() = nullptr;
static Vector2 (*_GetMousePosition)() = nullptr;
static Vector2 (*_GetMouseDelta)() = nullptr;
static void (*_SetMousePosition)(int x, int y) = nullptr;
static void (*_SetMouseOffset)(int offsetX, int offsetY) = nullptr;
static void (*_SetMouseScale)(float scaleX, float scaleY) = nullptr;
static float (*_GetMouseWheelMove)() = nullptr;
static Vector2 (*_GetMouseWheelMoveV)() = nullptr;
static void (*_SetMouseCursor)(int cursor) = nullptr;
static int (*_GetTouchX)() = nullptr;
static int (*_GetTouchY)() = nullptr;
static Vector2 (*_GetTouchPosition)(int index) = nullptr;
static int (*_GetTouchPointId)(int index) = nullptr;
static int (*_GetTouchPointCount)() = nullptr;
static void (*_SetGesturesEnabled)(unsigned int flags) = nullptr;
static bool (*_IsGestureDetected)(unsigned int gesture) = nullptr;
static int (*_GetGestureDetected)() = nullptr;
static float (*_GetGestureHoldDuration)() = nullptr;
static Vector2 (*_GetGestureDragVector)() = nullptr;
static float (*_GetGestureDragAngle)() = nullptr;
static Vector2 (*_GetGesturePinchVector)() = nullptr;
static float (*_GetGesturePinchAngle)() = nullptr;
static void (*_UpdateCamera)(Camera3D *camera, int mode) = nullptr;
static void (*_UpdateCameraPro)(Camera3D *camera, Vector3 movement, Vector3 rotation, float zoom) = nullptr;
static void (*_SetShapesTexture)(Texture texture, RRectangle source) = nullptr;
static void (*_DrawPixel)(int posX, int posY, uint32_t color) = nullptr;
static void (*_DrawPixelV)(Vector2 position, uint32_t color) = nullptr;
static void (*_DrawLine)(int startPosX, int startPosY, int endPosX, int endPosY, uint32_t color) = nullptr;
static void (*_DrawLineV)(Vector2 startPos, Vector2 endPos, uint32_t color) = nullptr;
static void (*_DrawLineEx)(Vector2 startPos, Vector2 endPos, float thick, uint32_t color) = nullptr;
static void (*_DrawLineStrip)(Vector2 *points, int pointCount, uint32_t color) = nullptr;
static void (*_DrawLineBezier)(Vector2 startPos, Vector2 endPos, float thick, uint32_t color) = nullptr;
static void (*_DrawCircle)(int centerX, int centerY, float radius, uint32_t color) = nullptr;
static void (*_DrawCircleSector)(Vector2 center, float radius, float startAngle, float endAngle, int segments, uint32_t color) = nullptr;
static void (*_DrawCircleSectorLines)(Vector2 center, float radius, float startAngle, float endAngle, int segments, uint32_t color) = nullptr;
static void (*_DrawCircleGradient)(int centerX, int centerY, float radius, uint32_t color1, uint32_t color2) = nullptr;
static void (*_DrawCircleV)(Vector2 center, float radius, uint32_t color) = nullptr;
static void (*_DrawCircleLines)(int centerX, int centerY, float radius, uint32_t color) = nullptr;
static void (*_DrawCircleLinesV)(Vector2 center, float radius, uint32_t color) = nullptr;
static void (*_DrawEllipse)(int centerX, int centerY, float radiusH, float radiusV, uint32_t color) = nullptr;
static void (*_DrawEllipseLines)(int centerX, int centerY, float radiusH, float radiusV, uint32_t color) = nullptr;
static void (*_DrawRing)(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, uint32_t color) = nullptr;
static void (*_DrawRingLines)(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, uint32_t color) = nullptr;
static void (*_DrawRectangle)(int posX, int posY, int width, int height, uint32_t color) = nullptr;
static void (*_DrawRectangleV)(Vector2 position, Vector2 size, uint32_t color) = nullptr;
static void (*_DrawRectangleRec)(RRectangle rec, uint32_t color) = nullptr;
static void (*_DrawRectanglePro)(RRectangle rec, Vector2 origin, float rotation, uint32_t color) = nullptr;
static void (*_DrawRectangleGradientV)(int posX, int posY, int width, int height, uint32_t color1, uint32_t color2) = nullptr;
static void (*_DrawRectangleGradientH)(int posX, int posY, int width, int height, uint32_t color1, uint32_t color2) = nullptr;
static void (*_DrawRectangleGradientEx)(RRectangle rec, uint32_t col1, uint32_t col2, uint32_t col3, uint32_t col4) = nullptr;
static void (*_DrawRectangleLines)(int posX, int posY, int width, int height, uint32_t color) = nullptr;
static void (*_DrawRectangleLinesEx)(RRectangle rec, float lineThick, uint32_t color) = nullptr;
static void (*_DrawRectangleRounded)(RRectangle rec, float roundness, int segments, uint32_t color) = nullptr;
static void (*_DrawRectangleRoundedLines)(RRectangle rec, float roundness, int segments, float lineThick, uint32_t color) = nullptr;
static void (*_DrawTriangle)(Vector2 v1, Vector2 v2, Vector2 v3, uint32_t color) = nullptr;
static void (*_DrawTriangleLines)(Vector2 v1, Vector2 v2, Vector2 v3, uint32_t color) = nullptr;
static void (*_DrawTriangleFan)(Vector2 *points, int pointCount, uint32_t color) = nullptr;
static void (*_DrawTriangleStrip)(Vector2 *points, int pointCount, uint32_t color) = nullptr;
static void (*_DrawPoly)(Vector2 center, int sides, float radius, float rotation, uint32_t color) = nullptr;
static void (*_DrawPolyLines)(Vector2 center, int sides, float radius, float rotation, uint32_t color) = nullptr;
static void (*_DrawPolyLinesEx)(Vector2 center, int sides, float radius, float rotation, float lineThick, uint32_t color) = nullptr;
static void (*_DrawSplineLinear)(Vector2 *points, int pointCount, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineBasis)(Vector2 *points, int pointCount, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineCatmullRom)(Vector2 *points, int pointCount, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineBezierQuadratic)(Vector2 *points, int pointCount, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineBezierCubic)(Vector2 *points, int pointCount, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineSegmentLinear)(Vector2 p1, Vector2 p2, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineSegmentBasis)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineSegmentCatmullRom)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineSegmentBezierQuadratic)(Vector2 p1, Vector2 c2, Vector2 p3, float thick, uint32_t color) = nullptr;
static void (*_DrawSplineSegmentBezierCubic)(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, uint32_t color) = nullptr;
static Vector2 (*_GetSplinePointLinear)(Vector2 startPos, Vector2 endPos, float t) = nullptr;
static Vector2 (*_GetSplinePointBasis)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t) = nullptr;
static Vector2 (*_GetSplinePointCatmullRom)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t) = nullptr;
static Vector2 (*_GetSplinePointBezierQuad)(Vector2 p1, Vector2 c2, Vector2 p3, float t) = nullptr;
static Vector2 (*_GetSplinePointBezierCubic)(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t) = nullptr;
static bool (*_CheckCollisionRecs)(RRectangle rec1, RRectangle rec2) = nullptr;
static bool (*_CheckCollisionCircles)(Vector2 center1, float radius1, Vector2 center2, float radius2) = nullptr;
static bool (*_CheckCollisionCircleRec)(Vector2 center, float radius, RRectangle rec) = nullptr;
static bool (*_CheckCollisionPointRec)(Vector2 point, RRectangle rec) = nullptr;
static bool (*_CheckCollisionPointCircle)(Vector2 point, Vector2 center, float radius) = nullptr;
static bool (*_CheckCollisionPointTriangle)(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3) = nullptr;
static bool (*_CheckCollisionPointPoly)(Vector2 point, Vector2 *points, int pointCount) = nullptr;
static bool (*_CheckCollisionLines)(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint) = nullptr;
static bool (*_CheckCollisionPointLine)(Vector2 point, Vector2 p1, Vector2 p2, int threshold) = nullptr;
static RRectangle (*_GetCollisionRec)(RRectangle rec1, RRectangle rec2) = nullptr;
static Image (*_LoadImage)(char *fileName) = nullptr;
static Image (*_LoadImageRaw)(char *fileName, int width, int height, int format, int headerSize) = nullptr;
static Image (*_LoadImageSvg)(char *fileNameOrString, int width, int height) = nullptr;
static Image (*_LoadImageAnim)(char *fileName, int *frames) = nullptr;
static Image (*_LoadImageFromMemory)(char *fileType, unsigned char *fileData, int dataSize) = nullptr;
static Image (*_LoadImageFromTexture)(Texture texture) = nullptr;
static Image (*_LoadImageFromScreen)() = nullptr;
static bool (*_IsImageReady)(Image image) = nullptr;
static void (*_UnloadImage)(Image image) = nullptr;
static bool (*_ExportImage)(Image image, char *fileName) = nullptr;
static unsigned char *(*_ExportImageToMemory)(Image image, char *fileType, int *fileSize) = nullptr;
static bool (*_ExportImageAsCode)(Image image, char *fileName) = nullptr;
static Image (*_GenImageColor)(int width, int height, uint32_t color) = nullptr;
static Image (*_GenImageGradientLinear)(int width, int height, int direction, uint32_t start, uint32_t end) = nullptr;
static Image (*_GenImageGradientRadial)(int width, int height, float density, uint32_t inner, uint32_t outer) = nullptr;
static Image (*_GenImageGradientSquare)(int width, int height, float density, uint32_t inner, uint32_t outer) = nullptr;
static Image (*_GenImageChecked)(int width, int height, int checksX, int checksY, uint32_t col1, uint32_t col2) = nullptr;
static Image (*_GenImageWhiteNoise)(int width, int height, float factor) = nullptr;
static Image (*_GenImagePerlinNoise)(int width, int height, int offsetX, int offsetY, float scale) = nullptr;
static Image (*_GenImageCellular)(int width, int height, int tileSize) = nullptr;
static Image (*_GenImageText)(int width, int height, char *text) = nullptr;
static Image (*_ImageCopy)(Image image) = nullptr;
static Image (*_ImageFromImage)(Image image, RRectangle rec) = nullptr;
static Image (*_ImageText)(char *text, int fontSize, uint32_t color) = nullptr;
static Image (*_ImageTextEx)(RFont font, char *text, float fontSize, float spacing, uint32_t tint) = nullptr;
static void (*_ImageFormat)(Image *image, int newFormat) = nullptr;
static void (*_ImageToPOT)(Image *image, uint32_t fill) = nullptr;
static void (*_ImageCrop)(Image *image, RRectangle crop) = nullptr;
static void (*_ImageAlphaCrop)(Image *image, float threshold) = nullptr;
static void (*_ImageAlphaClear)(Image *image, uint32_t color, float threshold) = nullptr;
static void (*_ImageAlphaMask)(Image *image, Image alphaMask) = nullptr;
static void (*_ImageAlphaPremultiply)(Image *image) = nullptr;
static void (*_ImageBlurGaussian)(Image *image, int blurSize) = nullptr;
static void (*_ImageResize)(Image *image, int newWidth, int newHeight) = nullptr;
static void (*_ImageResizeNN)(Image *image, int newWidth, int newHeight) = nullptr;
static void (*_ImageResizeCanvas)(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, uint32_t fill) = nullptr;
static void (*_ImageMipmaps)(Image *image) = nullptr;
static void (*_ImageDither)(Image *image, int rBpp, int gBpp, int bBpp, int aBpp) = nullptr;
static void (*_ImageFlipVertical)(Image *image) = nullptr;
static void (*_ImageFlipHorizontal)(Image *image) = nullptr;
static void (*_ImageRotate)(Image *image, int degrees) = nullptr;
static void (*_ImageRotateCW)(Image *image) = nullptr;
static void (*_ImageRotateCCW)(Image *image) = nullptr;
static void (*_ImageColorTint)(Image *image, uint32_t color) = nullptr;
static void (*_ImageColorInvert)(Image *image) = nullptr;
static void (*_ImageColorGrayscale)(Image *image) = nullptr;
static void (*_ImageColorContrast)(Image *image, float contrast) = nullptr;
static void (*_ImageColorBrightness)(Image *image, int brightness) = nullptr;
static void (*_ImageColorReplace)(Image *image, uint32_t color, uint32_t replace) = nullptr;
static uint32_t *(*_LoadImageColors)(Image image) = nullptr;
static uint32_t *(*_LoadImagePalette)(Image image, int maxPaletteSize, int *colorCount) = nullptr;
static void (*_UnloadImageColors)(uint32_t *colors) = nullptr;
static void (*_UnloadImagePalette)(uint32_t *colors) = nullptr;
static RRectangle (*_GetImageAlphaBorder)(Image image, float threshold) = nullptr;
static uint32_t (*_GetImageColor)(Image image, int x, int y) = nullptr;
static void (*_ImageClearBackground)(Image *dst, uint32_t color) = nullptr;
static void (*_ImageDrawPixel)(Image *dst, int posX, int posY, uint32_t color) = nullptr;
static void (*_ImageDrawPixelV)(Image *dst, Vector2 position, uint32_t color) = nullptr;
static void (*_ImageDrawLine)(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, uint32_t color) = nullptr;
static void (*_ImageDrawLineV)(Image *dst, Vector2 start, Vector2 end, uint32_t color) = nullptr;
static void (*_ImageDrawCircle)(Image *dst, int centerX, int centerY, int radius, uint32_t color) = nullptr;
static void (*_ImageDrawCircleV)(Image *dst, Vector2 center, int radius, uint32_t color) = nullptr;
static void (*_ImageDrawCircleLines)(Image *dst, int centerX, int centerY, int radius, uint32_t color) = nullptr;
static void (*_ImageDrawCircleLinesV)(Image *dst, Vector2 center, int radius, uint32_t color) = nullptr;
static void (*_ImageDrawRectangle)(Image *dst, int posX, int posY, int width, int height, uint32_t color) = nullptr;
static void (*_ImageDrawRectangleV)(Image *dst, Vector2 position, Vector2 size, uint32_t color) = nullptr;
static void (*_ImageDrawRectangleRec)(Image *dst, RRectangle rec, uint32_t color) = nullptr;
static void (*_ImageDrawRectangleLines)(Image *dst, RRectangle rec, int thick, uint32_t color) = nullptr;
static void (*_ImageDraw)(Image *dst, Image src, RRectangle srcRec, RRectangle dstRec, uint32_t tint) = nullptr;
static void (*_ImageDrawText)(Image *dst, char *text, int posX, int posY, int fontSize, uint32_t color) = nullptr;
static void (*_ImageDrawTextEx)(Image *dst, RFont font, char *text, Vector2 position, float fontSize, float spacing, uint32_t tint) = nullptr;
static Texture (*_LoadTexture)(char *fileName) = nullptr;
static Texture (*_LoadTextureFromImage)(Image image) = nullptr;
static Texture (*_LoadTextureCubemap)(Image image, int layout) = nullptr;
static RenderTexture (*_LoadRenderTexture)(int width, int height) = nullptr;
static bool (*_IsTextureReady)(Texture texture) = nullptr;
static void (*_UnloadTexture)(Texture texture) = nullptr;
static bool (*_IsRenderTextureReady)(RenderTexture target) = nullptr;
static void (*_UnloadRenderTexture)(RenderTexture target) = nullptr;
static void (*_UpdateTexture)(Texture texture, void *pixels) = nullptr;
static void (*_UpdateTextureRec)(Texture texture, RRectangle rec, void *pixels) = nullptr;
static void (*_GenTextureMipmaps)(Texture *texture) = nullptr;
static void (*_SetTextureFilter)(Texture texture, int filter) = nullptr;
static void (*_SetTextureWrap)(Texture texture, int wrap) = nullptr;
static void (*_DrawTexture)(Texture texture, int posX, int posY, uint32_t tint) = nullptr;
static void (*_DrawTextureV)(Texture texture, Vector2 position, uint32_t tint) = nullptr;
static void (*_DrawTextureEx)(Texture texture, Vector2 position, float rotation, float scale, uint32_t tint) = nullptr;
static void (*_DrawTextureRec)(Texture texture, RRectangle source, Vector2 position, uint32_t tint) = nullptr;
static void (*_DrawTexturePro)(Texture texture, RRectangle source, RRectangle dest, Vector2 origin, float rotation, uint32_t tint) = nullptr;
static void (*_DrawTextureNPatch)(Texture texture, NPatchInfo nPatchInfo, RRectangle dest, Vector2 origin, float rotation, uint32_t tint) = nullptr;
static uint32_t (*_Fade)(uint32_t color, float alpha) = nullptr;
static int (*_ColorToInt)(uint32_t color) = nullptr;
static Vector4 (*_ColorNormalize)(uint32_t color) = nullptr;
static uint32_t (*_ColorFromNormalized)(Vector4 normalized) = nullptr;
static Vector3 (*_ColorToHSV)(uint32_t color) = nullptr;
static uint32_t (*_ColorFromHSV)(float hue, float saturation, float value) = nullptr;
static uint32_t (*_ColorTint)(uint32_t color, uint32_t tint) = nullptr;
static uint32_t (*_ColorBrightness)(uint32_t color, float factor) = nullptr;
static uint32_t (*_ColorContrast)(uint32_t color, float contrast) = nullptr;
static uint32_t (*_ColorAlpha)(uint32_t color, float alpha) = nullptr;
static uint32_t (*_ColorAlphaBlend)(uint32_t dst, uint32_t src, uint32_t tint) = nullptr;
static uint32_t (*_GetColor)(unsigned int hexValue) = nullptr;
static uint32_t (*_GetPixelColor)(void *srcPtr, int format) = nullptr;
static void (*_SetPixelColor)(void *dstPtr, uint32_t color, int format) = nullptr;
static int (*_GetPixelDataSize)(int width, int height, int format) = nullptr;
static RFont (*_GetFontDefault)() = nullptr;
static RFont (*_LoadFont)(char *fileName) = nullptr;
static RFont (*_LoadFontEx)(char *fileName, int fontSize, int *codepoints, int codepointCount) = nullptr;
static RFont (*_LoadFontFromImage)(Image image, uint32_t key, int firstChar) = nullptr;
static RFont (*_LoadFontFromMemory)(char *fileType, unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount) = nullptr;
static bool (*_IsFontReady)(RFont font) = nullptr;
static GlyphInfo *(*_LoadFontData)(unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount, int type) = nullptr;
static Image (*_GenImageFontAtlas)(GlyphInfo *glyphs, RRectangle **glyphRecs, int glyphCount, int fontSize, int padding, int packMethod) = nullptr;
static void (*_UnloadFontData)(GlyphInfo *glyphs, int glyphCount) = nullptr;
static void (*_UnloadFont)(RFont font) = nullptr;
static bool (*_ExportFontAsCode)(RFont font, char *fileName) = nullptr;
static void (*_DrawFPS)(int posX, int posY) = nullptr;
static void (*_DrawText)(char *text, int posX, int posY, int fontSize, uint32_t color) = nullptr;
static void (*_DrawTextEx)(RFont font, char *text, Vector2 position, float fontSize, float spacing, uint32_t tint) = nullptr;
static void (*_DrawTextPro)(RFont font, char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, uint32_t tint) = nullptr;
static void (*_DrawTextCodepoint)(RFont font, int codepoint, Vector2 position, float fontSize, uint32_t tint) = nullptr;
static void (*_DrawTextCodepoints)(RFont font, int *codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, uint32_t tint) = nullptr;
static void (*_SetTextLineSpacing)(int spacing) = nullptr;
static int (*_MeasureText)(char *text, int fontSize) = nullptr;
static Vector2 (*_MeasureTextEx)(RFont font, char *text, float fontSize, float spacing) = nullptr;
static int (*_GetGlyphIndex)(RFont font, int codepoint) = nullptr;
static GlyphInfo (*_GetGlyphInfo)(RFont font, int codepoint) = nullptr;
static RRectangle (*_GetGlyphAtlasRec)(RFont font, int codepoint) = nullptr;
static char *(*_LoadUTF8)(int *codepoints, int length) = nullptr;
static void (*_UnloadUTF8)(char *text) = nullptr;
static int *(*_LoadCodepoints)(char *text, int *count) = nullptr;
static void (*_UnloadCodepoints)(int *codepoints) = nullptr;
static int (*_GetCodepointCount)(char *text) = nullptr;
static int (*_GetCodepoint)(char *text, int *codepointSize) = nullptr;
static int (*_GetCodepointNext)(char *text, int *codepointSize) = nullptr;
static int (*_GetCodepointPrevious)(char *text, int *codepointSize) = nullptr;
static char *(*_CodepointToUTF8)(int codepoint, int *utf8Size) = nullptr;
static int (*_TextCopy)(char *dst, char *src) = nullptr;
static bool (*_TextIsEqual)(char *text1, char *text2) = nullptr;
static unsigned int (*_TextLength)(char *text) = nullptr;
static char *(*_TextFormat)(char *text, ...) = nullptr;
static char *(*_TextSubtext)(char *text, int position, int length) = nullptr;
static char *(*_TextReplace)(char *text, char *replace, char *by) = nullptr;
static char *(*_TextInsert)(char *text, char *insert, int position) = nullptr;
static char *(*_TextJoin)(char **textList, int count, char *delimiter) = nullptr;
static char **(*_TextSplit)(char *text, char delimiter, int *count) = nullptr;
static void (*_TextAppend)(char *text, char *append, int *position) = nullptr;
static int (*_TextFindIndex)(char *text, char *find) = nullptr;
static char *(*_TextToUpper)(char *text) = nullptr;
static char *(*_TextToLower)(char *text) = nullptr;
static char *(*_TextToPascal)(char *text) = nullptr;
static int (*_TextToInteger)(char *text) = nullptr;
static void (*_DrawLine3D)(Vector3 startPos, Vector3 endPos, uint32_t color) = nullptr;
static void (*_DrawPoint3D)(Vector3 position, uint32_t color) = nullptr;
static void (*_DrawCircle3D)(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, uint32_t color) = nullptr;
static void (*_DrawTriangle3D)(Vector3 v1, Vector3 v2, Vector3 v3, uint32_t color) = nullptr;
static void (*_DrawTriangleStrip3D)(Vector3 *points, int pointCount, uint32_t color) = nullptr;
static void (*_DrawCube)(Vector3 position, float width, float height, float length, uint32_t color) = nullptr;
static void (*_DrawCubeV)(Vector3 position, Vector3 size, uint32_t color) = nullptr;
static void (*_DrawCubeWires)(Vector3 position, float width, float height, float length, uint32_t color) = nullptr;
static void (*_DrawCubeWiresV)(Vector3 position, Vector3 size, uint32_t color) = nullptr;
static void (*_DrawSphere)(Vector3 centerPos, float radius, uint32_t color) = nullptr;
static void (*_DrawSphereEx)(Vector3 centerPos, float radius, int rings, int slices, uint32_t color) = nullptr;
static void (*_DrawSphereWires)(Vector3 centerPos, float radius, int rings, int slices, uint32_t color) = nullptr;
static void (*_DrawCylinder)(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, uint32_t color) = nullptr;
static void (*_DrawCylinderEx)(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, uint32_t color) = nullptr;
static void (*_DrawCylinderWires)(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, uint32_t color) = nullptr;
static void (*_DrawCylinderWiresEx)(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, uint32_t color) = nullptr;
static void (*_DrawCapsule)(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, uint32_t color) = nullptr;
static void (*_DrawCapsuleWires)(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, uint32_t color) = nullptr;
static void (*_DrawPlane)(Vector3 centerPos, Vector2 size, uint32_t color) = nullptr;
static void (*_DrawRay)(Ray ray, uint32_t color) = nullptr;
static void (*_DrawGrid)(int slices, float spacing) = nullptr;
static Model (*_LoadModel)(char *fileName) = nullptr;
static Model (*_LoadModelFromMesh)(Mesh mesh) = nullptr;
static bool (*_IsModelReady)(Model model) = nullptr;
static void (*_UnloadModel)(Model model) = nullptr;
static BoundingBox (*_GetModelBoundingBox)(Model model) = nullptr;
static void (*_DrawModel)(Model model, Vector3 position, float scale, uint32_t tint) = nullptr;
static void (*_DrawModelEx)(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, uint32_t tint) = nullptr;
static void (*_DrawModelWires)(Model model, Vector3 position, float scale, uint32_t tint) = nullptr;
static void (*_DrawModelWiresEx)(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, uint32_t tint) = nullptr;
static void (*_DrawBoundingBox)(BoundingBox box, uint32_t color) = nullptr;
static void (*_DrawBillboard)(Camera3D camera, Texture texture, Vector3 position, float size, uint32_t tint) = nullptr;
static void (*_DrawBillboardRec)(Camera3D camera, Texture texture, RRectangle source, Vector3 position, Vector2 size, uint32_t tint) = nullptr;
static void (*_DrawBillboardPro)(Camera3D camera, Texture texture, RRectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, uint32_t tint) = nullptr;
static void (*_UploadMesh)(Mesh *mesh, bool dynamic) = nullptr;
static void (*_UpdateMeshBuffer)(Mesh mesh, int index, void *data, int dataSize, int offset) = nullptr;
static void (*_UnloadMesh)(Mesh mesh) = nullptr;
static void (*_DrawMesh)(Mesh mesh, Material material, Matrix transform) = nullptr;
static void (*_DrawMeshInstanced)(Mesh mesh, Material material, Matrix *transforms, int instances) = nullptr;
static bool (*_ExportMesh)(Mesh mesh, char *fileName) = nullptr;
static BoundingBox (*_GetMeshBoundingBox)(Mesh mesh) = nullptr;
static void (*_GenMeshTangents)(Mesh *mesh) = nullptr;
static Mesh (*_GenMeshPoly)(int sides, float radius) = nullptr;
static Mesh (*_GenMeshPlane)(float width, float length, int resX, int resZ) = nullptr;
static Mesh (*_GenMeshCube)(float width, float height, float length) = nullptr;
static Mesh (*_GenMeshSphere)(float radius, int rings, int slices) = nullptr;
static Mesh (*_GenMeshHemiSphere)(float radius, int rings, int slices) = nullptr;
static Mesh (*_GenMeshCylinder)(float radius, float height, int slices) = nullptr;
static Mesh (*_GenMeshCone)(float radius, float height, int slices) = nullptr;
static Mesh (*_GenMeshTorus)(float radius, float size, int radSeg, int sides) = nullptr;
static Mesh (*_GenMeshKnot)(float radius, float size, int radSeg, int sides) = nullptr;
static Mesh (*_GenMeshHeightmap)(Image heightmap, Vector3 size) = nullptr;
static Mesh (*_GenMeshCubicmap)(Image cubicmap, Vector3 cubeSize) = nullptr;
static Material *(*_LoadMaterials)(char *fileName, int *materialCount) = nullptr;
static Material (*_LoadMaterialDefault)() = nullptr;
static bool (*_IsMaterialReady)(Material material) = nullptr;
static void (*_UnloadMaterial)(Material material) = nullptr;
static void (*_SetMaterialTexture)(Material *material, int mapType, Texture texture) = nullptr;
static void (*_SetModelMeshMaterial)(Model *model, int meshId, int materialId) = nullptr;
static ModelAnimation *(*_LoadModelAnimations)(char *fileName, int *animCount) = nullptr;
static void (*_UpdateModelAnimation)(Model model, ModelAnimation anim, int frame) = nullptr;
static void (*_UnloadModelAnimation)(ModelAnimation anim) = nullptr;
static void (*_UnloadModelAnimations)(ModelAnimation *animations, int animCount) = nullptr;
static bool (*_IsModelAnimationValid)(Model model, ModelAnimation anim) = nullptr;
static bool (*_CheckCollisionSpheres)(Vector3 center1, float radius1, Vector3 center2, float radius2) = nullptr;
static bool (*_CheckCollisionBoxes)(BoundingBox box1, BoundingBox box2) = nullptr;
static bool (*_CheckCollisionBoxSphere)(BoundingBox box, Vector3 center, float radius) = nullptr;
static RayCollision (*_GetRayCollisionSphere)(Ray ray, Vector3 center, float radius) = nullptr;
static RayCollision (*_GetRayCollisionBox)(Ray ray, BoundingBox box) = nullptr;
static RayCollision (*_GetRayCollisionMesh)(Ray ray, Mesh mesh, Matrix transform) = nullptr;
static RayCollision (*_GetRayCollisionTriangle)(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3) = nullptr;
static RayCollision (*_GetRayCollisionQuad)(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4) = nullptr;
static void (*_InitAudioDevice)() = nullptr;
static void (*_CloseAudioDevice)() = nullptr;
static bool (*_IsAudioDeviceReady)() = nullptr;
static void (*_SetMasterVolume)(float volume) = nullptr;
static float (*_GetMasterVolume)() = nullptr;
static Wave (*_LoadWave)(char *fileName) = nullptr;
static Wave (*_LoadWaveFromMemory)(char *fileType, unsigned char *fileData, int dataSize) = nullptr;
static bool (*_IsWaveReady)(Wave wave) = nullptr;
static RSound (*_LoadSound)(char *fileName) = nullptr;
static RSound (*_LoadSoundFromWave)(Wave wave) = nullptr;
static RSound (*_LoadSoundAlias)(RSound source) = nullptr;
static bool (*_IsSoundReady)(RSound sound) = nullptr;
static void (*_UpdateSound)(RSound sound, void *data, int sampleCount) = nullptr;
static void (*_UnloadWave)(Wave wave) = nullptr;
static void (*_UnloadSound)(RSound sound) = nullptr;
static void (*_UnloadSoundAlias)(RSound alias) = nullptr;
static bool (*_ExportWave)(Wave wave, char *fileName) = nullptr;
static bool (*_ExportWaveAsCode)(Wave wave, char *fileName) = nullptr;
static void (*_PlaySound)(RSound sound) = nullptr;
static void (*_StopSound)(RSound sound) = nullptr;
static void (*_PauseSound)(RSound sound) = nullptr;
static void (*_ResumeSound)(RSound sound) = nullptr;
static bool (*_IsSoundPlaying)(RSound sound) = nullptr;
static void (*_SetSoundVolume)(RSound sound, float volume) = nullptr;
static void (*_SetSoundPitch)(RSound sound, float pitch) = nullptr;
static void (*_SetSoundPan)(RSound sound, float pan) = nullptr;
static Wave (*_WaveCopy)(Wave wave) = nullptr;
static void (*_WaveCrop)(Wave *wave, int initSample, int finalSample) = nullptr;
static void (*_WaveFormat)(Wave *wave, int sampleRate, int sampleSize, int channels) = nullptr;
static float *(*_LoadWaveSamples)(Wave wave) = nullptr;
static void (*_UnloadWaveSamples)(float *samples) = nullptr;
static Music (*_LoadMusicStream)(char *fileName) = nullptr;
static Music (*_LoadMusicStreamFromMemory)(char *fileType, unsigned char *data, int dataSize) = nullptr;
static bool (*_IsMusicReady)(Music music) = nullptr;
static void (*_UnloadMusicStream)(Music music) = nullptr;
static void (*_PlayMusicStream)(Music music) = nullptr;
static bool (*_IsMusicStreamPlaying)(Music music) = nullptr;
static void (*_UpdateMusicStream)(Music music) = nullptr;
static void (*_StopMusicStream)(Music music) = nullptr;
static void (*_PauseMusicStream)(Music music) = nullptr;
static void (*_ResumeMusicStream)(Music music) = nullptr;
static void (*_SeekMusicStream)(Music music, float position) = nullptr;
static void (*_SetMusicVolume)(Music music, float volume) = nullptr;
static void (*_SetMusicPitch)(Music music, float pitch) = nullptr;
static void (*_SetMusicPan)(Music music, float pan) = nullptr;
static float (*_GetMusicTimeLength)(Music music) = nullptr;
static float (*_GetMusicTimePlayed)(Music music) = nullptr;
static AudioStream (*_LoadAudioStream)(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels) = nullptr;
static bool (*_IsAudioStreamReady)(AudioStream stream) = nullptr;
static void (*_UnloadAudioStream)(AudioStream stream) = nullptr;
static void (*_UpdateAudioStream)(AudioStream stream, void *data, int frameCount) = nullptr;
static bool (*_IsAudioStreamProcessed)(AudioStream stream) = nullptr;
static void (*_PlayAudioStream)(AudioStream stream) = nullptr;
static void (*_PauseAudioStream)(AudioStream stream) = nullptr;
static void (*_ResumeAudioStream)(AudioStream stream) = nullptr;
static bool (*_IsAudioStreamPlaying)(AudioStream stream) = nullptr;
static void (*_StopAudioStream)(AudioStream stream) = nullptr;
static void (*_SetAudioStreamVolume)(AudioStream stream, float volume) = nullptr;
static void (*_SetAudioStreamPitch)(AudioStream stream, float pitch) = nullptr;
static void (*_SetAudioStreamPan)(AudioStream stream, float pan) = nullptr;
static void (*_SetAudioStreamBufferSizeDefault)(int size) = nullptr;
static void (*_SetAudioStreamCallback)(AudioStream stream, AudioCallback callback) = nullptr;
static void (*_AttachAudioStreamProcessor)(AudioStream stream, AudioCallback processor) = nullptr;
static void (*_DetachAudioStreamProcessor)(AudioStream stream, AudioCallback processor) = nullptr;
static void (*_AttachAudioMixedProcessor)(AudioCallback processor) = nullptr;
static void (*_DetachAudioMixedProcessor)(AudioCallback processor) = nullptr;

// This cleans up everything and closes the shared library object
static void ___done_raylib64()
{
    _InitWindow = nullptr;
    _CloseWindow = nullptr;
    _WindowShouldClose = nullptr;
    _IsWindowReady = nullptr;
    _IsWindowFullscreen = nullptr;
    _IsWindowHidden = nullptr;
    _IsWindowMinimized = nullptr;
    _IsWindowMaximized = nullptr;
    _IsWindowFocused = nullptr;
    _IsWindowResized = nullptr;
    _IsWindowState = nullptr;
    _SetWindowState = nullptr;
    _ClearWindowState = nullptr;
    _ToggleFullscreen = nullptr;
    _ToggleBorderlessWindowed = nullptr;
    _MaximizeWindow = nullptr;
    _MinimizeWindow = nullptr;
    _RestoreWindow = nullptr;
    _SetWindowIcon = nullptr;
    _SetWindowIcons = nullptr;
    _SetWindowTitle = nullptr;
    _SetWindowPosition = nullptr;
    _SetWindowMonitor = nullptr;
    _SetWindowMinSize = nullptr;
    _SetWindowMaxSize = nullptr;
    _SetWindowSize = nullptr;
    _SetWindowOpacity = nullptr;
    _SetWindowFocused = nullptr;
    _GetWindowHandle = nullptr;
    _GetScreenWidth = nullptr;
    _GetScreenHeight = nullptr;
    _GetRenderWidth = nullptr;
    _GetRenderHeight = nullptr;
    _GetMonitorCount = nullptr;
    _GetCurrentMonitor = nullptr;
    _GetMonitorPosition = nullptr;
    _GetMonitorWidth = nullptr;
    _GetMonitorHeight = nullptr;
    _GetMonitorPhysicalWidth = nullptr;
    _GetMonitorPhysicalHeight = nullptr;
    _GetMonitorRefreshRate = nullptr;
    _GetWindowPosition = nullptr;
    _GetWindowScaleDPI = nullptr;
    _GetMonitorName = nullptr;
    _SetClipboardText = nullptr;
    _GetClipboardText = nullptr;
    _EnableEventWaiting = nullptr;
    _DisableEventWaiting = nullptr;
    _ShowCursor = nullptr;
    _HideCursor = nullptr;
    _IsCursorHidden = nullptr;
    _EnableCursor = nullptr;
    _DisableCursor = nullptr;
    _IsCursorOnScreen = nullptr;
    _ClearBackground = nullptr;
    _BeginDrawing = nullptr;
    _EndDrawing = nullptr;
    _BeginMode2D = nullptr;
    _EndMode2D = nullptr;
    _BeginMode3D = nullptr;
    _EndMode3D = nullptr;
    _BeginTextureMode = nullptr;
    _EndTextureMode = nullptr;
    _BeginShaderMode = nullptr;
    _EndShaderMode = nullptr;
    _BeginBlendMode = nullptr;
    _EndBlendMode = nullptr;
    _BeginScissorMode = nullptr;
    _EndScissorMode = nullptr;
    _BeginVrStereoMode = nullptr;
    _EndVrStereoMode = nullptr;
    _LoadVrStereoConfig = nullptr;
    _UnloadVrStereoConfig = nullptr;
    _LoadShader = nullptr;
    _LoadShaderFromMemory = nullptr;
    _IsShaderReady = nullptr;
    _GetShaderLocation = nullptr;
    _GetShaderLocationAttrib = nullptr;
    _SetShaderValue = nullptr;
    _SetShaderValueV = nullptr;
    _SetShaderValueMatrix = nullptr;
    _SetShaderValueTexture = nullptr;
    _UnloadShader = nullptr;
    _GetMouseRay = nullptr;
    _GetCameraMatrix = nullptr;
    _GetCameraMatrix2D = nullptr;
    _GetWorldToScreen = nullptr;
    _GetScreenToWorld2D = nullptr;
    _GetWorldToScreenEx = nullptr;
    _GetWorldToScreen2D = nullptr;
    _SetTargetFPS = nullptr;
    _GetFrameTime = nullptr;
    _GetTime = nullptr;
    _GetFPS = nullptr;
    _SwapScreenBuffer = nullptr;
    _PollInputEvents = nullptr;
    _WaitTime = nullptr;
    _SetRandomSeed = nullptr;
    _GetRandomValue = nullptr;
    _LoadRandomSequence = nullptr;
    _UnloadRandomSequence = nullptr;
    _TakeScreenshot = nullptr;
    _SetConfigFlags = nullptr;
    _OpenURL = nullptr;
    _TraceLog = nullptr;
    _SetTraceLogLevel = nullptr;
    _MemAlloc = nullptr;
    _MemRealloc = nullptr;
    _MemFree = nullptr;
    _SetTraceLogCallback = nullptr;
    _SetLoadFileDataCallback = nullptr;
    _SetSaveFileDataCallback = nullptr;
    _SetLoadFileTextCallback = nullptr;
    _SetSaveFileTextCallback = nullptr;
    _LoadFileData = nullptr;
    _UnloadFileData = nullptr;
    _SaveFileData = nullptr;
    _ExportDataAsCode = nullptr;
    _LoadFileText = nullptr;
    _UnloadFileText = nullptr;
    _SaveFileText = nullptr;
    _FileExists = nullptr;
    _DirectoryExists = nullptr;
    _IsFileExtension = nullptr;
    _GetFileLength = nullptr;
    _GetFileExtension = nullptr;
    _GetFileName = nullptr;
    _GetFileNameWithoutExt = nullptr;
    _GetDirectoryPath = nullptr;
    _GetPrevDirectoryPath = nullptr;
    _GetWorkingDirectory = nullptr;
    _GetApplicationDirectory = nullptr;
    _ChangeDirectory = nullptr;
    _IsPathFile = nullptr;
    _LoadDirectoryFiles = nullptr;
    _LoadDirectoryFilesEx = nullptr;
    _UnloadDirectoryFiles = nullptr;
    _IsFileDropped = nullptr;
    _LoadDroppedFiles = nullptr;
    _UnloadDroppedFiles = nullptr;
    _GetFileModTime = nullptr;
    _CompressData = nullptr;
    _DecompressData = nullptr;
    _EncodeDataBase64 = nullptr;
    _DecodeDataBase64 = nullptr;
    _LoadAutomationEventList = nullptr;
    _UnloadAutomationEventList = nullptr;
    _ExportAutomationEventList = nullptr;
    _SetAutomationEventList = nullptr;
    _SetAutomationEventBaseFrame = nullptr;
    _StartAutomationEventRecording = nullptr;
    _StopAutomationEventRecording = nullptr;
    _PlayAutomationEvent = nullptr;
    _IsKeyPressed = nullptr;
    _IsKeyPressedRepeat = nullptr;
    _IsKeyDown = nullptr;
    _IsKeyReleased = nullptr;
    _IsKeyUp = nullptr;
    _GetKeyPressed = nullptr;
    _GetCharPressed = nullptr;
    _SetExitKey = nullptr;
    _IsGamepadAvailable = nullptr;
    _GetGamepadName = nullptr;
    _IsGamepadButtonPressed = nullptr;
    _IsGamepadButtonDown = nullptr;
    _IsGamepadButtonReleased = nullptr;
    _IsGamepadButtonUp = nullptr;
    _GetGamepadButtonPressed = nullptr;
    _GetGamepadAxisCount = nullptr;
    _GetGamepadAxisMovement = nullptr;
    _SetGamepadMappings = nullptr;
    _IsMouseButtonPressed = nullptr;
    _IsMouseButtonDown = nullptr;
    _IsMouseButtonReleased = nullptr;
    _IsMouseButtonUp = nullptr;
    _GetMouseX = nullptr;
    _GetMouseY = nullptr;
    _GetMousePosition = nullptr;
    _GetMouseDelta = nullptr;
    _SetMousePosition = nullptr;
    _SetMouseOffset = nullptr;
    _SetMouseScale = nullptr;
    _GetMouseWheelMove = nullptr;
    _GetMouseWheelMoveV = nullptr;
    _SetMouseCursor = nullptr;
    _GetTouchX = nullptr;
    _GetTouchY = nullptr;
    _GetTouchPosition = nullptr;
    _GetTouchPointId = nullptr;
    _GetTouchPointCount = nullptr;
    _SetGesturesEnabled = nullptr;
    _IsGestureDetected = nullptr;
    _GetGestureDetected = nullptr;
    _GetGestureHoldDuration = nullptr;
    _GetGestureDragVector = nullptr;
    _GetGestureDragAngle = nullptr;
    _GetGesturePinchVector = nullptr;
    _GetGesturePinchAngle = nullptr;
    _UpdateCamera = nullptr;
    _UpdateCameraPro = nullptr;
    _SetShapesTexture = nullptr;
    _DrawPixel = nullptr;
    _DrawPixelV = nullptr;
    _DrawLine = nullptr;
    _DrawLineV = nullptr;
    _DrawLineEx = nullptr;
    _DrawLineStrip = nullptr;
    _DrawLineBezier = nullptr;
    _DrawCircle = nullptr;
    _DrawCircleSector = nullptr;
    _DrawCircleSectorLines = nullptr;
    _DrawCircleGradient = nullptr;
    _DrawCircleV = nullptr;
    _DrawCircleLines = nullptr;
    _DrawCircleLinesV = nullptr;
    _DrawEllipse = nullptr;
    _DrawEllipseLines = nullptr;
    _DrawRing = nullptr;
    _DrawRingLines = nullptr;
    _DrawRectangle = nullptr;
    _DrawRectangleV = nullptr;
    _DrawRectangleRec = nullptr;
    _DrawRectanglePro = nullptr;
    _DrawRectangleGradientV = nullptr;
    _DrawRectangleGradientH = nullptr;
    _DrawRectangleGradientEx = nullptr;
    _DrawRectangleLines = nullptr;
    _DrawRectangleLinesEx = nullptr;
    _DrawRectangleRounded = nullptr;
    _DrawRectangleRoundedLines = nullptr;
    _DrawTriangle = nullptr;
    _DrawTriangleLines = nullptr;
    _DrawTriangleFan = nullptr;
    _DrawTriangleStrip = nullptr;
    _DrawPoly = nullptr;
    _DrawPolyLines = nullptr;
    _DrawPolyLinesEx = nullptr;
    _DrawSplineLinear = nullptr;
    _DrawSplineBasis = nullptr;
    _DrawSplineCatmullRom = nullptr;
    _DrawSplineBezierQuadratic = nullptr;
    _DrawSplineBezierCubic = nullptr;
    _DrawSplineSegmentLinear = nullptr;
    _DrawSplineSegmentBasis = nullptr;
    _DrawSplineSegmentCatmullRom = nullptr;
    _DrawSplineSegmentBezierQuadratic = nullptr;
    _DrawSplineSegmentBezierCubic = nullptr;
    _GetSplinePointLinear = nullptr;
    _GetSplinePointBasis = nullptr;
    _GetSplinePointCatmullRom = nullptr;
    _GetSplinePointBezierQuad = nullptr;
    _GetSplinePointBezierCubic = nullptr;
    _CheckCollisionRecs = nullptr;
    _CheckCollisionCircles = nullptr;
    _CheckCollisionCircleRec = nullptr;
    _CheckCollisionPointRec = nullptr;
    _CheckCollisionPointCircle = nullptr;
    _CheckCollisionPointTriangle = nullptr;
    _CheckCollisionPointPoly = nullptr;
    _CheckCollisionLines = nullptr;
    _CheckCollisionPointLine = nullptr;
    _GetCollisionRec = nullptr;
    _LoadImage = nullptr;
    _LoadImageRaw = nullptr;
    _LoadImageSvg = nullptr;
    _LoadImageAnim = nullptr;
    _LoadImageFromMemory = nullptr;
    _LoadImageFromTexture = nullptr;
    _LoadImageFromScreen = nullptr;
    _IsImageReady = nullptr;
    _UnloadImage = nullptr;
    _ExportImage = nullptr;
    _ExportImageToMemory = nullptr;
    _ExportImageAsCode = nullptr;
    _GenImageColor = nullptr;
    _GenImageGradientLinear = nullptr;
    _GenImageGradientRadial = nullptr;
    _GenImageGradientSquare = nullptr;
    _GenImageChecked = nullptr;
    _GenImageWhiteNoise = nullptr;
    _GenImagePerlinNoise = nullptr;
    _GenImageCellular = nullptr;
    _GenImageText = nullptr;
    _ImageCopy = nullptr;
    _ImageFromImage = nullptr;
    _ImageText = nullptr;
    _ImageTextEx = nullptr;
    _ImageFormat = nullptr;
    _ImageToPOT = nullptr;
    _ImageCrop = nullptr;
    _ImageAlphaCrop = nullptr;
    _ImageAlphaClear = nullptr;
    _ImageAlphaMask = nullptr;
    _ImageAlphaPremultiply = nullptr;
    _ImageBlurGaussian = nullptr;
    _ImageResize = nullptr;
    _ImageResizeNN = nullptr;
    _ImageResizeCanvas = nullptr;
    _ImageMipmaps = nullptr;
    _ImageDither = nullptr;
    _ImageFlipVertical = nullptr;
    _ImageFlipHorizontal = nullptr;
    _ImageRotate = nullptr;
    _ImageRotateCW = nullptr;
    _ImageRotateCCW = nullptr;
    _ImageColorTint = nullptr;
    _ImageColorInvert = nullptr;
    _ImageColorGrayscale = nullptr;
    _ImageColorContrast = nullptr;
    _ImageColorBrightness = nullptr;
    _ImageColorReplace = nullptr;
    _LoadImageColors = nullptr;
    _LoadImagePalette = nullptr;
    _UnloadImageColors = nullptr;
    _UnloadImagePalette = nullptr;
    _GetImageAlphaBorder = nullptr;
    _GetImageColor = nullptr;
    _ImageClearBackground = nullptr;
    _ImageDrawPixel = nullptr;
    _ImageDrawPixelV = nullptr;
    _ImageDrawLine = nullptr;
    _ImageDrawLineV = nullptr;
    _ImageDrawCircle = nullptr;
    _ImageDrawCircleV = nullptr;
    _ImageDrawCircleLines = nullptr;
    _ImageDrawCircleLinesV = nullptr;
    _ImageDrawRectangle = nullptr;
    _ImageDrawRectangleV = nullptr;
    _ImageDrawRectangleRec = nullptr;
    _ImageDrawRectangleLines = nullptr;
    _ImageDraw = nullptr;
    _ImageDrawText = nullptr;
    _ImageDrawTextEx = nullptr;
    _LoadTexture = nullptr;
    _LoadTextureFromImage = nullptr;
    _LoadTextureCubemap = nullptr;
    _LoadRenderTexture = nullptr;
    _IsTextureReady = nullptr;
    _UnloadTexture = nullptr;
    _IsRenderTextureReady = nullptr;
    _UnloadRenderTexture = nullptr;
    _UpdateTexture = nullptr;
    _UpdateTextureRec = nullptr;
    _GenTextureMipmaps = nullptr;
    _SetTextureFilter = nullptr;
    _SetTextureWrap = nullptr;
    _DrawTexture = nullptr;
    _DrawTextureV = nullptr;
    _DrawTextureEx = nullptr;
    _DrawTextureRec = nullptr;
    _DrawTexturePro = nullptr;
    _DrawTextureNPatch = nullptr;
    _Fade = nullptr;
    _ColorToInt = nullptr;
    _ColorNormalize = nullptr;
    _ColorFromNormalized = nullptr;
    _ColorToHSV = nullptr;
    _ColorFromHSV = nullptr;
    _ColorTint = nullptr;
    _ColorBrightness = nullptr;
    _ColorContrast = nullptr;
    _ColorAlpha = nullptr;
    _ColorAlphaBlend = nullptr;
    _GetColor = nullptr;
    _GetPixelColor = nullptr;
    _SetPixelColor = nullptr;
    _GetPixelDataSize = nullptr;
    _GetFontDefault = nullptr;
    _LoadFont = nullptr;
    _LoadFontEx = nullptr;
    _LoadFontFromImage = nullptr;
    _LoadFontFromMemory = nullptr;
    _IsFontReady = nullptr;
    _LoadFontData = nullptr;
    _GenImageFontAtlas = nullptr;
    _UnloadFontData = nullptr;
    _UnloadFont = nullptr;
    _ExportFontAsCode = nullptr;
    _DrawFPS = nullptr;
    _DrawText = nullptr;
    _DrawTextEx = nullptr;
    _DrawTextPro = nullptr;
    _DrawTextCodepoint = nullptr;
    _DrawTextCodepoints = nullptr;
    _SetTextLineSpacing = nullptr;
    _MeasureText = nullptr;
    _MeasureTextEx = nullptr;
    _GetGlyphIndex = nullptr;
    _GetGlyphInfo = nullptr;
    _GetGlyphAtlasRec = nullptr;
    _LoadUTF8 = nullptr;
    _UnloadUTF8 = nullptr;
    _LoadCodepoints = nullptr;
    _UnloadCodepoints = nullptr;
    _GetCodepointCount = nullptr;
    _GetCodepoint = nullptr;
    _GetCodepointNext = nullptr;
    _GetCodepointPrevious = nullptr;
    _CodepointToUTF8 = nullptr;
    _TextCopy = nullptr;
    _TextIsEqual = nullptr;
    _TextLength = nullptr;
    _TextFormat = nullptr;
    _TextSubtext = nullptr;
    _TextReplace = nullptr;
    _TextInsert = nullptr;
    _TextJoin = nullptr;
    _TextSplit = nullptr;
    _TextAppend = nullptr;
    _TextFindIndex = nullptr;
    _TextToUpper = nullptr;
    _TextToLower = nullptr;
    _TextToPascal = nullptr;
    _TextToInteger = nullptr;
    _DrawLine3D = nullptr;
    _DrawPoint3D = nullptr;
    _DrawCircle3D = nullptr;
    _DrawTriangle3D = nullptr;
    _DrawTriangleStrip3D = nullptr;
    _DrawCube = nullptr;
    _DrawCubeV = nullptr;
    _DrawCubeWires = nullptr;
    _DrawCubeWiresV = nullptr;
    _DrawSphere = nullptr;
    _DrawSphereEx = nullptr;
    _DrawSphereWires = nullptr;
    _DrawCylinder = nullptr;
    _DrawCylinderEx = nullptr;
    _DrawCylinderWires = nullptr;
    _DrawCylinderWiresEx = nullptr;
    _DrawCapsule = nullptr;
    _DrawCapsuleWires = nullptr;
    _DrawPlane = nullptr;
    _DrawRay = nullptr;
    _DrawGrid = nullptr;
    _LoadModel = nullptr;
    _LoadModelFromMesh = nullptr;
    _IsModelReady = nullptr;
    _UnloadModel = nullptr;
    _GetModelBoundingBox = nullptr;
    _DrawModel = nullptr;
    _DrawModelEx = nullptr;
    _DrawModelWires = nullptr;
    _DrawModelWiresEx = nullptr;
    _DrawBoundingBox = nullptr;
    _DrawBillboard = nullptr;
    _DrawBillboardRec = nullptr;
    _DrawBillboardPro = nullptr;
    _UploadMesh = nullptr;
    _UpdateMeshBuffer = nullptr;
    _UnloadMesh = nullptr;
    _DrawMesh = nullptr;
    _DrawMeshInstanced = nullptr;
    _ExportMesh = nullptr;
    _GetMeshBoundingBox = nullptr;
    _GenMeshTangents = nullptr;
    _GenMeshPoly = nullptr;
    _GenMeshPlane = nullptr;
    _GenMeshCube = nullptr;
    _GenMeshSphere = nullptr;
    _GenMeshHemiSphere = nullptr;
    _GenMeshCylinder = nullptr;
    _GenMeshCone = nullptr;
    _GenMeshTorus = nullptr;
    _GenMeshKnot = nullptr;
    _GenMeshHeightmap = nullptr;
    _GenMeshCubicmap = nullptr;
    _LoadMaterials = nullptr;
    _LoadMaterialDefault = nullptr;
    _IsMaterialReady = nullptr;
    _UnloadMaterial = nullptr;
    _SetMaterialTexture = nullptr;
    _SetModelMeshMaterial = nullptr;
    _LoadModelAnimations = nullptr;
    _UpdateModelAnimation = nullptr;
    _UnloadModelAnimation = nullptr;
    _UnloadModelAnimations = nullptr;
    _IsModelAnimationValid = nullptr;
    _CheckCollisionSpheres = nullptr;
    _CheckCollisionBoxes = nullptr;
    _CheckCollisionBoxSphere = nullptr;
    _GetRayCollisionSphere = nullptr;
    _GetRayCollisionBox = nullptr;
    _GetRayCollisionMesh = nullptr;
    _GetRayCollisionTriangle = nullptr;
    _GetRayCollisionQuad = nullptr;
    _InitAudioDevice = nullptr;
    _CloseAudioDevice = nullptr;
    _IsAudioDeviceReady = nullptr;
    _SetMasterVolume = nullptr;
    _GetMasterVolume = nullptr;
    _LoadWave = nullptr;
    _LoadWaveFromMemory = nullptr;
    _IsWaveReady = nullptr;
    _LoadSound = nullptr;
    _LoadSoundFromWave = nullptr;
    _LoadSoundAlias = nullptr;
    _IsSoundReady = nullptr;
    _UpdateSound = nullptr;
    _UnloadWave = nullptr;
    _UnloadSound = nullptr;
    _UnloadSoundAlias = nullptr;
    _ExportWave = nullptr;
    _ExportWaveAsCode = nullptr;
    _PlaySound = nullptr;
    _StopSound = nullptr;
    _PauseSound = nullptr;
    _ResumeSound = nullptr;
    _IsSoundPlaying = nullptr;
    _SetSoundVolume = nullptr;
    _SetSoundPitch = nullptr;
    _SetSoundPan = nullptr;
    _WaveCopy = nullptr;
    _WaveCrop = nullptr;
    _WaveFormat = nullptr;
    _LoadWaveSamples = nullptr;
    _UnloadWaveSamples = nullptr;
    _LoadMusicStream = nullptr;
    _LoadMusicStreamFromMemory = nullptr;
    _IsMusicReady = nullptr;
    _UnloadMusicStream = nullptr;
    _PlayMusicStream = nullptr;
    _IsMusicStreamPlaying = nullptr;
    _UpdateMusicStream = nullptr;
    _StopMusicStream = nullptr;
    _PauseMusicStream = nullptr;
    _ResumeMusicStream = nullptr;
    _SeekMusicStream = nullptr;
    _SetMusicVolume = nullptr;
    _SetMusicPitch = nullptr;
    _SetMusicPan = nullptr;
    _GetMusicTimeLength = nullptr;
    _GetMusicTimePlayed = nullptr;
    _LoadAudioStream = nullptr;
    _IsAudioStreamReady = nullptr;
    _UnloadAudioStream = nullptr;
    _UpdateAudioStream = nullptr;
    _IsAudioStreamProcessed = nullptr;
    _PlayAudioStream = nullptr;
    _PauseAudioStream = nullptr;
    _ResumeAudioStream = nullptr;
    _IsAudioStreamPlaying = nullptr;
    _StopAudioStream = nullptr;
    _SetAudioStreamVolume = nullptr;
    _SetAudioStreamPitch = nullptr;
    _SetAudioStreamPan = nullptr;
    _SetAudioStreamBufferSizeDefault = nullptr;
    _SetAudioStreamCallback = nullptr;
    _AttachAudioStreamProcessor = nullptr;
    _DetachAudioStreamProcessor = nullptr;
    _AttachAudioMixedProcessor = nullptr;
    _DetachAudioMixedProcessor = nullptr;

    delete _raylib64;
    _raylib64 = nullptr;

    RAYLIB_DEBUG_PRINT("Shared library closed");
}

// This is used to load the raylib shared library object and initialize all function pointers
qb_bool ___init_raylib64()
{
    if (_raylib64)
        return QB_TRUE;

    try
    {
        _raylib64 = new dylib("./", "raylib");
    }
    catch (dylib::load_error e)
    {
        RAYLIB_DEBUG_PRINT("Error: %s", e.what());
        try
        {
            _raylib64 = new dylib("raylib");
        }
        catch (dylib::load_error e)
        {
            RAYLIB_DEBUG_PRINT("Error: %s", e.what());
            if (!_raylib64)
                return QB_FALSE;
        }
    }

    try
    {
        _InitWindow = _raylib64->get_function<void(int, int, char *)>("InitWindow");
        _CloseWindow = _raylib64->get_function<void()>("CloseWindow");
        _WindowShouldClose = _raylib64->get_function<bool()>("WindowShouldClose");
        _IsWindowReady = _raylib64->get_function<bool()>("IsWindowReady");
        _IsWindowFullscreen = _raylib64->get_function<bool()>("IsWindowFullscreen");
        _IsWindowHidden = _raylib64->get_function<bool()>("IsWindowHidden");
        _IsWindowMinimized = _raylib64->get_function<bool()>("IsWindowMinimized");
        _IsWindowMaximized = _raylib64->get_function<bool()>("IsWindowMaximized");
        _IsWindowFocused = _raylib64->get_function<bool()>("IsWindowFocused");
        _IsWindowResized = _raylib64->get_function<bool()>("IsWindowResized");
        _IsWindowState = _raylib64->get_function<bool(unsigned int)>("IsWindowState");
        _SetWindowState = _raylib64->get_function<void(unsigned int)>("SetWindowState");
        _ClearWindowState = _raylib64->get_function<void(unsigned int)>("ClearWindowState");
        _ToggleFullscreen = _raylib64->get_function<void()>("ToggleFullscreen");
        _ToggleBorderlessWindowed = _raylib64->get_function<void()>("ToggleBorderlessWindowed");
        _MaximizeWindow = _raylib64->get_function<void()>("MaximizeWindow");
        _MinimizeWindow = _raylib64->get_function<void()>("MinimizeWindow");
        _RestoreWindow = _raylib64->get_function<void()>("RestoreWindow");
        _SetWindowIcon = _raylib64->get_function<void(Image)>("SetWindowIcon");
        _SetWindowIcons = _raylib64->get_function<void(Image *, int)>("SetWindowIcons");
        _SetWindowTitle = _raylib64->get_function<void(char *)>("SetWindowTitle");
        _SetWindowPosition = _raylib64->get_function<void(int, int)>("SetWindowPosition");
        _SetWindowMonitor = _raylib64->get_function<void(int)>("SetWindowMonitor");
        _SetWindowMinSize = _raylib64->get_function<void(int, int)>("SetWindowMinSize");
        _SetWindowMaxSize = _raylib64->get_function<void(int, int)>("SetWindowMaxSize");
        _SetWindowSize = _raylib64->get_function<void(int, int)>("SetWindowSize");
        _SetWindowOpacity = _raylib64->get_function<void(float)>("SetWindowOpacity");
        _SetWindowFocused = _raylib64->get_function<void()>("SetWindowFocused");
        _GetWindowHandle = _raylib64->get_function<void *()>("GetWindowHandle");
        _GetScreenWidth = _raylib64->get_function<int()>("GetScreenWidth");
        _GetScreenHeight = _raylib64->get_function<int()>("GetScreenHeight");
        _GetRenderWidth = _raylib64->get_function<int()>("GetRenderWidth");
        _GetRenderHeight = _raylib64->get_function<int()>("GetRenderHeight");
        _GetMonitorCount = _raylib64->get_function<int()>("GetMonitorCount");
        _GetCurrentMonitor = _raylib64->get_function<int()>("GetCurrentMonitor");
        _GetMonitorPosition = _raylib64->get_function<Vector2(int)>("GetMonitorPosition");
        _GetMonitorWidth = _raylib64->get_function<int(int)>("GetMonitorWidth");
        _GetMonitorHeight = _raylib64->get_function<int(int)>("GetMonitorHeight");
        _GetMonitorPhysicalWidth = _raylib64->get_function<int(int)>("GetMonitorPhysicalWidth");
        _GetMonitorPhysicalHeight = _raylib64->get_function<int(int)>("GetMonitorPhysicalHeight");
        _GetMonitorRefreshRate = _raylib64->get_function<int(int)>("GetMonitorRefreshRate");
        _GetWindowPosition = _raylib64->get_function<Vector2()>("GetWindowPosition");
        _GetWindowScaleDPI = _raylib64->get_function<Vector2()>("GetWindowScaleDPI");
        _GetMonitorName = _raylib64->get_function<char *(int)>("GetMonitorName");
        _SetClipboardText = _raylib64->get_function<void(char *)>("SetClipboardText");
        _GetClipboardText = _raylib64->get_function<char *()>("GetClipboardText");
        _EnableEventWaiting = _raylib64->get_function<void()>("EnableEventWaiting");
        _DisableEventWaiting = _raylib64->get_function<void()>("DisableEventWaiting");
        _ShowCursor = _raylib64->get_function<void()>("ShowCursor");
        _HideCursor = _raylib64->get_function<void()>("HideCursor");
        _IsCursorHidden = _raylib64->get_function<bool()>("IsCursorHidden");
        _EnableCursor = _raylib64->get_function<void()>("EnableCursor");
        _DisableCursor = _raylib64->get_function<void()>("DisableCursor");
        _IsCursorOnScreen = _raylib64->get_function<bool()>("IsCursorOnScreen");
        _ClearBackground = _raylib64->get_function<void(uint32_t)>("ClearBackground");
        _BeginDrawing = _raylib64->get_function<void()>("BeginDrawing");
        _EndDrawing = _raylib64->get_function<void()>("EndDrawing");
        _BeginMode2D = _raylib64->get_function<void(Camera2D)>("BeginMode2D");
        _EndMode2D = _raylib64->get_function<void()>("EndMode2D");
        _BeginMode3D = _raylib64->get_function<void(Camera3D)>("BeginMode3D");
        _EndMode3D = _raylib64->get_function<void()>("EndMode3D");
        _BeginTextureMode = _raylib64->get_function<void(RenderTexture)>("BeginTextureMode");
        _EndTextureMode = _raylib64->get_function<void()>("EndTextureMode");
        _BeginShaderMode = _raylib64->get_function<void(Shader)>("BeginShaderMode");
        _EndShaderMode = _raylib64->get_function<void()>("EndShaderMode");
        _BeginBlendMode = _raylib64->get_function<void(int)>("BeginBlendMode");
        _EndBlendMode = _raylib64->get_function<void()>("EndBlendMode");
        _BeginScissorMode = _raylib64->get_function<void(int, int, int, int)>("BeginScissorMode");
        _EndScissorMode = _raylib64->get_function<void()>("EndScissorMode");
        _BeginVrStereoMode = _raylib64->get_function<void(VrStereoConfig)>("BeginVrStereoMode");
        _EndVrStereoMode = _raylib64->get_function<void()>("EndVrStereoMode");
        _LoadVrStereoConfig = _raylib64->get_function<VrStereoConfig(VrDeviceInfo)>("LoadVrStereoConfig");
        _UnloadVrStereoConfig = _raylib64->get_function<void(VrStereoConfig)>("UnloadVrStereoConfig");
        _LoadShader = _raylib64->get_function<Shader(char *, char *)>("LoadShader");
        _LoadShaderFromMemory = _raylib64->get_function<Shader(char *, char *)>("LoadShaderFromMemory");
        _IsShaderReady = _raylib64->get_function<bool(Shader)>("IsShaderReady");
        _GetShaderLocation = _raylib64->get_function<int(Shader, char *)>("GetShaderLocation");
        _GetShaderLocationAttrib = _raylib64->get_function<int(Shader, char *)>("GetShaderLocationAttrib");
        _SetShaderValue = _raylib64->get_function<void(Shader, int, void *, int)>("SetShaderValue");
        _SetShaderValueV = _raylib64->get_function<void(Shader, int, void *, int, int)>("SetShaderValueV");
        _SetShaderValueMatrix = _raylib64->get_function<void(Shader, int, Matrix)>("SetShaderValueMatrix");
        _SetShaderValueTexture = _raylib64->get_function<void(Shader, int, Texture)>("SetShaderValueTexture");
        _UnloadShader = _raylib64->get_function<void(Shader)>("UnloadShader");
        _GetMouseRay = _raylib64->get_function<Ray(Vector2, Camera3D)>("GetMouseRay");
        _GetCameraMatrix = _raylib64->get_function<Matrix(Camera3D)>("GetCameraMatrix");
        _GetCameraMatrix2D = _raylib64->get_function<Matrix(Camera2D)>("GetCameraMatrix2D");
        _GetWorldToScreen = _raylib64->get_function<Vector2(Vector3, Camera3D)>("GetWorldToScreen");
        _GetScreenToWorld2D = _raylib64->get_function<Vector2(Vector2, Camera2D)>("GetScreenToWorld2D");
        _GetWorldToScreenEx = _raylib64->get_function<Vector2(Vector3, Camera3D, int, int)>("GetWorldToScreenEx");
        _GetWorldToScreen2D = _raylib64->get_function<Vector2(Vector2, Camera2D)>("GetWorldToScreen2D");
        _SetTargetFPS = _raylib64->get_function<void(int)>("SetTargetFPS");
        _GetFrameTime = _raylib64->get_function<float()>("GetFrameTime");
        _GetTime = _raylib64->get_function<double()>("GetTime");
        _GetFPS = _raylib64->get_function<int()>("GetFPS");
        _SwapScreenBuffer = _raylib64->get_function<void()>("SwapScreenBuffer");
        _PollInputEvents = _raylib64->get_function<void()>("PollInputEvents");
        _WaitTime = _raylib64->get_function<void(double)>("WaitTime");
        _SetRandomSeed = _raylib64->get_function<void(unsigned int)>("SetRandomSeed");
        _GetRandomValue = _raylib64->get_function<int(int, int)>("GetRandomValue");
        _LoadRandomSequence = _raylib64->get_function<int *(unsigned int, int, int)>("LoadRandomSequence");
        _UnloadRandomSequence = _raylib64->get_function<void(int *)>("UnloadRandomSequence");
        _TakeScreenshot = _raylib64->get_function<void(char *)>("TakeScreenshot");
        _SetConfigFlags = _raylib64->get_function<void(unsigned int)>("SetConfigFlags");
        _OpenURL = _raylib64->get_function<void(char *)>("OpenURL");
        _TraceLog = _raylib64->get_function<void(int, char *, ...)>("TraceLog");
        _SetTraceLogLevel = _raylib64->get_function<void(int)>("SetTraceLogLevel");
        _MemAlloc = _raylib64->get_function<void *(unsigned int)>("MemAlloc");
        _MemRealloc = _raylib64->get_function<void *(void *, unsigned int)>("MemRealloc");
        _MemFree = _raylib64->get_function<void(void *)>("MemFree");
        _SetTraceLogCallback = _raylib64->get_function<void(TraceLogCallback)>("SetTraceLogCallback");
        _SetLoadFileDataCallback = _raylib64->get_function<void(LoadFileDataCallback)>("SetLoadFileDataCallback");
        _SetSaveFileDataCallback = _raylib64->get_function<void(SaveFileDataCallback)>("SetSaveFileDataCallback");
        _SetLoadFileTextCallback = _raylib64->get_function<void(LoadFileTextCallback)>("SetLoadFileTextCallback");
        _SetSaveFileTextCallback = _raylib64->get_function<void(SaveFileTextCallback)>("SetSaveFileTextCallback");
        _LoadFileData = _raylib64->get_function<unsigned char *(char *, int *)>("LoadFileData");
        _UnloadFileData = _raylib64->get_function<void(unsigned char *)>("UnloadFileData");
        _SaveFileData = _raylib64->get_function<bool(char *, void *, int)>("SaveFileData");
        _ExportDataAsCode = _raylib64->get_function<bool(unsigned char *, int, char *)>("ExportDataAsCode");
        _LoadFileText = _raylib64->get_function<char *(char *)>("LoadFileText");
        _UnloadFileText = _raylib64->get_function<void(char *)>("UnloadFileText");
        _SaveFileText = _raylib64->get_function<bool(char *, char *)>("SaveFileText");
        _FileExists = _raylib64->get_function<bool(char *)>("FileExists");
        _DirectoryExists = _raylib64->get_function<bool(char *)>("DirectoryExists");
        _IsFileExtension = _raylib64->get_function<bool(char *, char *)>("IsFileExtension");
        _GetFileLength = _raylib64->get_function<int(char *)>("GetFileLength");
        _GetFileExtension = _raylib64->get_function<char *(char *)>("GetFileExtension");
        _GetFileName = _raylib64->get_function<char *(char *)>("GetFileName");
        _GetFileNameWithoutExt = _raylib64->get_function<char *(char *)>("GetFileNameWithoutExt");
        _GetDirectoryPath = _raylib64->get_function<char *(char *)>("GetDirectoryPath");
        _GetPrevDirectoryPath = _raylib64->get_function<char *(char *)>("GetPrevDirectoryPath");
        _GetWorkingDirectory = _raylib64->get_function<char *()>("GetWorkingDirectory");
        _GetApplicationDirectory = _raylib64->get_function<char *()>("GetApplicationDirectory");
        _ChangeDirectory = _raylib64->get_function<bool(char *)>("ChangeDirectory");
        _IsPathFile = _raylib64->get_function<bool(char *)>("IsPathFile");
        _LoadDirectoryFiles = _raylib64->get_function<FilePathList(char *)>("LoadDirectoryFiles");
        _LoadDirectoryFilesEx = _raylib64->get_function<FilePathList(char *, char *, bool)>("LoadDirectoryFilesEx");
        _UnloadDirectoryFiles = _raylib64->get_function<void(FilePathList)>("UnloadDirectoryFiles");
        _IsFileDropped = _raylib64->get_function<bool()>("IsFileDropped");
        _LoadDroppedFiles = _raylib64->get_function<FilePathList()>("LoadDroppedFiles");
        _UnloadDroppedFiles = _raylib64->get_function<void(FilePathList)>("UnloadDroppedFiles");
        _GetFileModTime = _raylib64->get_function<long(char *)>("GetFileModTime");
        _CompressData = _raylib64->get_function<unsigned char *(unsigned char *, int, int *)>("CompressData");
        _DecompressData = _raylib64->get_function<unsigned char *(unsigned char *, int, int *)>("DecompressData");
        _EncodeDataBase64 = _raylib64->get_function<char *(unsigned char *, int, int *)>("EncodeDataBase64");
        _DecodeDataBase64 = _raylib64->get_function<unsigned char *(unsigned char *, int *)>("DecodeDataBase64");
        _LoadAutomationEventList = _raylib64->get_function<AutomationEventList(char *)>("LoadAutomationEventList");
        _UnloadAutomationEventList = _raylib64->get_function<void(AutomationEventList *)>("UnloadAutomationEventList");
        _ExportAutomationEventList = _raylib64->get_function<bool(AutomationEventList, char *)>("ExportAutomationEventList");
        _SetAutomationEventList = _raylib64->get_function<void(AutomationEventList *)>("SetAutomationEventList");
        _SetAutomationEventBaseFrame = _raylib64->get_function<void(int)>("SetAutomationEventBaseFrame");
        _StartAutomationEventRecording = _raylib64->get_function<void()>("StartAutomationEventRecording");
        _StopAutomationEventRecording = _raylib64->get_function<void()>("StopAutomationEventRecording");
        _PlayAutomationEvent = _raylib64->get_function<void(AutomationEvent)>("PlayAutomationEvent");
        _IsKeyPressed = _raylib64->get_function<bool(int)>("IsKeyPressed");
        _IsKeyPressedRepeat = _raylib64->get_function<bool(int)>("IsKeyPressedRepeat");
        _IsKeyDown = _raylib64->get_function<bool(int)>("IsKeyDown");
        _IsKeyReleased = _raylib64->get_function<bool(int)>("IsKeyReleased");
        _IsKeyUp = _raylib64->get_function<bool(int)>("IsKeyUp");
        _GetKeyPressed = _raylib64->get_function<int()>("GetKeyPressed");
        _GetCharPressed = _raylib64->get_function<int()>("GetCharPressed");
        _SetExitKey = _raylib64->get_function<void(int)>("SetExitKey");
        _IsGamepadAvailable = _raylib64->get_function<bool(int)>("IsGamepadAvailable");
        _GetGamepadName = _raylib64->get_function<char *(int)>("GetGamepadName");
        _IsGamepadButtonPressed = _raylib64->get_function<bool(int, int)>("IsGamepadButtonPressed");
        _IsGamepadButtonDown = _raylib64->get_function<bool(int, int)>("IsGamepadButtonDown");
        _IsGamepadButtonReleased = _raylib64->get_function<bool(int, int)>("IsGamepadButtonReleased");
        _IsGamepadButtonUp = _raylib64->get_function<bool(int, int)>("IsGamepadButtonUp");
        _GetGamepadButtonPressed = _raylib64->get_function<int()>("GetGamepadButtonPressed");
        _GetGamepadAxisCount = _raylib64->get_function<int(int)>("GetGamepadAxisCount");
        _GetGamepadAxisMovement = _raylib64->get_function<float(int, int)>("GetGamepadAxisMovement");
        _SetGamepadMappings = _raylib64->get_function<int(char *)>("SetGamepadMappings");
        _IsMouseButtonPressed = _raylib64->get_function<bool(int)>("IsMouseButtonPressed");
        _IsMouseButtonDown = _raylib64->get_function<bool(int)>("IsMouseButtonDown");
        _IsMouseButtonReleased = _raylib64->get_function<bool(int)>("IsMouseButtonReleased");
        _IsMouseButtonUp = _raylib64->get_function<bool(int)>("IsMouseButtonUp");
        _GetMouseX = _raylib64->get_function<int()>("GetMouseX");
        _GetMouseY = _raylib64->get_function<int()>("GetMouseY");
        _GetMousePosition = _raylib64->get_function<Vector2()>("GetMousePosition");
        _GetMouseDelta = _raylib64->get_function<Vector2()>("GetMouseDelta");
        _SetMousePosition = _raylib64->get_function<void(int, int)>("SetMousePosition");
        _SetMouseOffset = _raylib64->get_function<void(int, int)>("SetMouseOffset");
        _SetMouseScale = _raylib64->get_function<void(float, float)>("SetMouseScale");
        _GetMouseWheelMove = _raylib64->get_function<float()>("GetMouseWheelMove");
        _GetMouseWheelMoveV = _raylib64->get_function<Vector2()>("GetMouseWheelMoveV");
        _SetMouseCursor = _raylib64->get_function<void(int)>("SetMouseCursor");
        _GetTouchX = _raylib64->get_function<int()>("GetTouchX");
        _GetTouchY = _raylib64->get_function<int()>("GetTouchY");
        _GetTouchPosition = _raylib64->get_function<Vector2(int)>("GetTouchPosition");
        _GetTouchPointId = _raylib64->get_function<int(int)>("GetTouchPointId");
        _GetTouchPointCount = _raylib64->get_function<int()>("GetTouchPointCount");
        _SetGesturesEnabled = _raylib64->get_function<void(unsigned int)>("SetGesturesEnabled");
        _IsGestureDetected = _raylib64->get_function<bool(unsigned int)>("IsGestureDetected");
        _GetGestureDetected = _raylib64->get_function<int()>("GetGestureDetected");
        _GetGestureHoldDuration = _raylib64->get_function<float()>("GetGestureHoldDuration");
        _GetGestureDragVector = _raylib64->get_function<Vector2()>("GetGestureDragVector");
        _GetGestureDragAngle = _raylib64->get_function<float()>("GetGestureDragAngle");
        _GetGesturePinchVector = _raylib64->get_function<Vector2()>("GetGesturePinchVector");
        _GetGesturePinchAngle = _raylib64->get_function<float()>("GetGesturePinchAngle");
        _UpdateCamera = _raylib64->get_function<void(Camera3D *, int)>("UpdateCamera");
        _UpdateCameraPro = _raylib64->get_function<void(Camera3D *, Vector3, Vector3, float)>("UpdateCameraPro");
        _SetShapesTexture = _raylib64->get_function<void(Texture, RRectangle)>("SetShapesTexture");
        _DrawPixel = _raylib64->get_function<void(int, int, uint32_t)>("DrawPixel");
        _DrawPixelV = _raylib64->get_function<void(Vector2, uint32_t)>("DrawPixelV");
        _DrawLine = _raylib64->get_function<void(int, int, int, int, uint32_t)>("DrawLine");
        _DrawLineV = _raylib64->get_function<void(Vector2, Vector2, uint32_t)>("DrawLineV");
        _DrawLineEx = _raylib64->get_function<void(Vector2, Vector2, float, uint32_t)>("DrawLineEx");
        _DrawLineStrip = _raylib64->get_function<void(Vector2 *, int, uint32_t)>("DrawLineStrip");
        _DrawLineBezier = _raylib64->get_function<void(Vector2, Vector2, float, uint32_t)>("DrawLineBezier");
        _DrawCircle = _raylib64->get_function<void(int, int, float, uint32_t)>("DrawCircle");
        _DrawCircleSector = _raylib64->get_function<void(Vector2, float, float, float, int, uint32_t)>("DrawCircleSector");
        _DrawCircleSectorLines = _raylib64->get_function<void(Vector2, float, float, float, int, uint32_t)>("DrawCircleSectorLines");
        _DrawCircleGradient = _raylib64->get_function<void(int, int, float, uint32_t, uint32_t)>("DrawCircleGradient");
        _DrawCircleV = _raylib64->get_function<void(Vector2, float, uint32_t)>("DrawCircleV");
        _DrawCircleLines = _raylib64->get_function<void(int, int, float, uint32_t)>("DrawCircleLines");
        _DrawCircleLinesV = _raylib64->get_function<void(Vector2, float, uint32_t)>("DrawCircleLinesV");
        _DrawEllipse = _raylib64->get_function<void(int, int, float, float, uint32_t)>("DrawEllipse");
        _DrawEllipseLines = _raylib64->get_function<void(int, int, float, float, uint32_t)>("DrawEllipseLines");
        _DrawRing = _raylib64->get_function<void(Vector2, float, float, float, float, int, uint32_t)>("DrawRing");
        _DrawRingLines = _raylib64->get_function<void(Vector2, float, float, float, float, int, uint32_t)>("DrawRingLines");
        _DrawRectangle = _raylib64->get_function<void(int, int, int, int, uint32_t)>("DrawRectangle");
        _DrawRectangleV = _raylib64->get_function<void(Vector2, Vector2, uint32_t)>("DrawRectangleV");
        _DrawRectangleRec = _raylib64->get_function<void(RRectangle, uint32_t)>("DrawRectangleRec");
        _DrawRectanglePro = _raylib64->get_function<void(RRectangle, Vector2, float, uint32_t)>("DrawRectanglePro");
        _DrawRectangleGradientV = _raylib64->get_function<void(int, int, int, int, uint32_t, uint32_t)>("DrawRectangleGradientV");
        _DrawRectangleGradientH = _raylib64->get_function<void(int, int, int, int, uint32_t, uint32_t)>("DrawRectangleGradientH");
        _DrawRectangleGradientEx = _raylib64->get_function<void(RRectangle, uint32_t, uint32_t, uint32_t, uint32_t)>("DrawRectangleGradientEx");
        _DrawRectangleLines = _raylib64->get_function<void(int, int, int, int, uint32_t)>("DrawRectangleLines");
        _DrawRectangleLinesEx = _raylib64->get_function<void(RRectangle, float, uint32_t)>("DrawRectangleLinesEx");
        _DrawRectangleRounded = _raylib64->get_function<void(RRectangle, float, int, uint32_t)>("DrawRectangleRounded");
        _DrawRectangleRoundedLines = _raylib64->get_function<void(RRectangle, float, int, float, uint32_t)>("DrawRectangleRoundedLines");
        _DrawTriangle = _raylib64->get_function<void(Vector2, Vector2, Vector2, uint32_t)>("DrawTriangle");
        _DrawTriangleLines = _raylib64->get_function<void(Vector2, Vector2, Vector2, uint32_t)>("DrawTriangleLines");
        _DrawTriangleFan = _raylib64->get_function<void(Vector2 *, int, uint32_t)>("DrawTriangleFan");
        _DrawTriangleStrip = _raylib64->get_function<void(Vector2 *, int, uint32_t)>("DrawTriangleStrip");
        _DrawPoly = _raylib64->get_function<void(Vector2, int, float, float, uint32_t)>("DrawPoly");
        _DrawPolyLines = _raylib64->get_function<void(Vector2, int, float, float, uint32_t)>("DrawPolyLines");
        _DrawPolyLinesEx = _raylib64->get_function<void(Vector2, int, float, float, float, uint32_t)>("DrawPolyLinesEx");
        _DrawSplineLinear = _raylib64->get_function<void(Vector2 *, int, float, uint32_t)>("DrawSplineLinear");
        _DrawSplineBasis = _raylib64->get_function<void(Vector2 *, int, float, uint32_t)>("DrawSplineBasis");
        _DrawSplineCatmullRom = _raylib64->get_function<void(Vector2 *, int, float, uint32_t)>("DrawSplineCatmullRom");
        _DrawSplineBezierQuadratic = _raylib64->get_function<void(Vector2 *, int, float, uint32_t)>("DrawSplineBezierQuadratic");
        _DrawSplineBezierCubic = _raylib64->get_function<void(Vector2 *, int, float, uint32_t)>("DrawSplineBezierCubic");
        _DrawSplineSegmentLinear = _raylib64->get_function<void(Vector2, Vector2, float, uint32_t)>("DrawSplineSegmentLinear");
        _DrawSplineSegmentBasis = _raylib64->get_function<void(Vector2, Vector2, Vector2, Vector2, float, uint32_t)>("DrawSplineSegmentBasis");
        _DrawSplineSegmentCatmullRom = _raylib64->get_function<void(Vector2, Vector2, Vector2, Vector2, float, uint32_t)>("DrawSplineSegmentCatmullRom");
        _DrawSplineSegmentBezierQuadratic = _raylib64->get_function<void(Vector2, Vector2, Vector2, float, uint32_t)>("DrawSplineSegmentBezierQuadratic");
        _DrawSplineSegmentBezierCubic = _raylib64->get_function<void(Vector2, Vector2, Vector2, Vector2, float, uint32_t)>("DrawSplineSegmentBezierCubic");
        _GetSplinePointLinear = _raylib64->get_function<Vector2(Vector2, Vector2, float)>("GetSplinePointLinear");
        _GetSplinePointBasis = _raylib64->get_function<Vector2(Vector2, Vector2, Vector2, Vector2, float)>("GetSplinePointBasis");
        _GetSplinePointCatmullRom = _raylib64->get_function<Vector2(Vector2, Vector2, Vector2, Vector2, float)>("GetSplinePointCatmullRom");
        _GetSplinePointBezierQuad = _raylib64->get_function<Vector2(Vector2, Vector2, Vector2, float)>("GetSplinePointBezierQuad");
        _GetSplinePointBezierCubic = _raylib64->get_function<Vector2(Vector2, Vector2, Vector2, Vector2, float)>("GetSplinePointBezierCubic");
        _CheckCollisionRecs = _raylib64->get_function<bool(RRectangle, RRectangle)>("CheckCollisionRecs");
        _CheckCollisionCircles = _raylib64->get_function<bool(Vector2, float, Vector2, float)>("CheckCollisionCircles");
        _CheckCollisionCircleRec = _raylib64->get_function<bool(Vector2, float, RRectangle)>("CheckCollisionCircleRec");
        _CheckCollisionPointRec = _raylib64->get_function<bool(Vector2, RRectangle)>("CheckCollisionPointRec");
        _CheckCollisionPointCircle = _raylib64->get_function<bool(Vector2, Vector2, float)>("CheckCollisionPointCircle");
        _CheckCollisionPointTriangle = _raylib64->get_function<bool(Vector2, Vector2, Vector2, Vector2)>("CheckCollisionPointTriangle");
        _CheckCollisionPointPoly = _raylib64->get_function<bool(Vector2, Vector2 *, int)>("CheckCollisionPointPoly");
        _CheckCollisionLines = _raylib64->get_function<bool(Vector2, Vector2, Vector2, Vector2, Vector2 *)>("CheckCollisionLines");
        _CheckCollisionPointLine = _raylib64->get_function<bool(Vector2, Vector2, Vector2, int)>("CheckCollisionPointLine");
        _GetCollisionRec = _raylib64->get_function<RRectangle(RRectangle, RRectangle)>("GetCollisionRec");
        _LoadImage = _raylib64->get_function<Image(char *)>("LoadImage");
        _LoadImageRaw = _raylib64->get_function<Image(char *, int, int, int, int)>("LoadImageRaw");
        _LoadImageSvg = _raylib64->get_function<Image(char *, int, int)>("LoadImageSvg");
        _LoadImageAnim = _raylib64->get_function<Image(char *, int *)>("LoadImageAnim");
        _LoadImageFromMemory = _raylib64->get_function<Image(char *, unsigned char *, int)>("LoadImageFromMemory");
        _LoadImageFromTexture = _raylib64->get_function<Image(Texture)>("LoadImageFromTexture");
        _LoadImageFromScreen = _raylib64->get_function<Image()>("LoadImageFromScreen");
        _IsImageReady = _raylib64->get_function<bool(Image)>("IsImageReady");
        _UnloadImage = _raylib64->get_function<void(Image)>("UnloadImage");
        _ExportImage = _raylib64->get_function<bool(Image, char *)>("ExportImage");
        _ExportImageToMemory = _raylib64->get_function<unsigned char *(Image, char *, int *)>("ExportImageToMemory");
        _ExportImageAsCode = _raylib64->get_function<bool(Image, char *)>("ExportImageAsCode");
        _GenImageColor = _raylib64->get_function<Image(int, int, uint32_t)>("GenImageColor");
        _GenImageGradientLinear = _raylib64->get_function<Image(int, int, int, uint32_t, uint32_t)>("GenImageGradientLinear");
        _GenImageGradientRadial = _raylib64->get_function<Image(int, int, float, uint32_t, uint32_t)>("GenImageGradientRadial");
        _GenImageGradientSquare = _raylib64->get_function<Image(int, int, float, uint32_t, uint32_t)>("GenImageGradientSquare");
        _GenImageChecked = _raylib64->get_function<Image(int, int, int, int, uint32_t, uint32_t)>("GenImageChecked");
        _GenImageWhiteNoise = _raylib64->get_function<Image(int, int, float)>("GenImageWhiteNoise");
        _GenImagePerlinNoise = _raylib64->get_function<Image(int, int, int, int, float)>("GenImagePerlinNoise");
        _GenImageCellular = _raylib64->get_function<Image(int, int, int)>("GenImageCellular");
        _GenImageText = _raylib64->get_function<Image(int, int, char *)>("GenImageText");
        _ImageCopy = _raylib64->get_function<Image(Image)>("ImageCopy");
        _ImageFromImage = _raylib64->get_function<Image(Image, RRectangle)>("ImageFromImage");
        _ImageText = _raylib64->get_function<Image(char *, int, uint32_t)>("ImageText");
        _ImageTextEx = _raylib64->get_function<Image(RFont, char *, float, float, uint32_t)>("ImageTextEx");
        _ImageFormat = _raylib64->get_function<void(Image *, int)>("ImageFormat");
        _ImageToPOT = _raylib64->get_function<void(Image *, uint32_t)>("ImageToPOT");
        _ImageCrop = _raylib64->get_function<void(Image *, RRectangle)>("ImageCrop");
        _ImageAlphaCrop = _raylib64->get_function<void(Image *, float)>("ImageAlphaCrop");
        _ImageAlphaClear = _raylib64->get_function<void(Image *, uint32_t, float)>("ImageAlphaClear");
        _ImageAlphaMask = _raylib64->get_function<void(Image *, Image)>("ImageAlphaMask");
        _ImageAlphaPremultiply = _raylib64->get_function<void(Image *)>("ImageAlphaPremultiply");
        _ImageBlurGaussian = _raylib64->get_function<void(Image *, int)>("ImageBlurGaussian");
        _ImageResize = _raylib64->get_function<void(Image *, int, int)>("ImageResize");
        _ImageResizeNN = _raylib64->get_function<void(Image *, int, int)>("ImageResizeNN");
        _ImageResizeCanvas = _raylib64->get_function<void(Image *, int, int, int, int, uint32_t)>("ImageResizeCanvas");
        _ImageMipmaps = _raylib64->get_function<void(Image *)>("ImageMipmaps");
        _ImageDither = _raylib64->get_function<void(Image *, int, int, int, int)>("ImageDither");
        _ImageFlipVertical = _raylib64->get_function<void(Image *)>("ImageFlipVertical");
        _ImageFlipHorizontal = _raylib64->get_function<void(Image *)>("ImageFlipHorizontal");
        _ImageRotate = _raylib64->get_function<void(Image *, int)>("ImageRotate");
        _ImageRotateCW = _raylib64->get_function<void(Image *)>("ImageRotateCW");
        _ImageRotateCCW = _raylib64->get_function<void(Image *)>("ImageRotateCCW");
        _ImageColorTint = _raylib64->get_function<void(Image *, uint32_t)>("ImageColorTint");
        _ImageColorInvert = _raylib64->get_function<void(Image *)>("ImageColorInvert");
        _ImageColorGrayscale = _raylib64->get_function<void(Image *)>("ImageColorGrayscale");
        _ImageColorContrast = _raylib64->get_function<void(Image *, float)>("ImageColorContrast");
        _ImageColorBrightness = _raylib64->get_function<void(Image *, int)>("ImageColorBrightness");
        _ImageColorReplace = _raylib64->get_function<void(Image *, uint32_t, uint32_t)>("ImageColorReplace");
        _LoadImageColors = _raylib64->get_function<uint32_t *(Image)>("LoadImageColors");
        _LoadImagePalette = _raylib64->get_function<uint32_t *(Image, int, int *)>("LoadImagePalette");
        _UnloadImageColors = _raylib64->get_function<void(uint32_t *)>("UnloadImageColors");
        _UnloadImagePalette = _raylib64->get_function<void(uint32_t *)>("UnloadImagePalette");
        _GetImageAlphaBorder = _raylib64->get_function<RRectangle(Image, float)>("GetImageAlphaBorder");
        _GetImageColor = _raylib64->get_function<uint32_t(Image, int, int)>("GetImageColor");
        _ImageClearBackground = _raylib64->get_function<void(Image *, uint32_t)>("ImageClearBackground");
        _ImageDrawPixel = _raylib64->get_function<void(Image *, int, int, uint32_t)>("ImageDrawPixel");
        _ImageDrawPixelV = _raylib64->get_function<void(Image *, Vector2, uint32_t)>("ImageDrawPixelV");
        _ImageDrawLine = _raylib64->get_function<void(Image *, int, int, int, int, uint32_t)>("ImageDrawLine");
        _ImageDrawLineV = _raylib64->get_function<void(Image *, Vector2, Vector2, uint32_t)>("ImageDrawLineV");
        _ImageDrawCircle = _raylib64->get_function<void(Image *, int, int, int, uint32_t)>("ImageDrawCircle");
        _ImageDrawCircleV = _raylib64->get_function<void(Image *, Vector2, int, uint32_t)>("ImageDrawCircleV");
        _ImageDrawCircleLines = _raylib64->get_function<void(Image *, int, int, int, uint32_t)>("ImageDrawCircleLines");
        _ImageDrawCircleLinesV = _raylib64->get_function<void(Image *, Vector2, int, uint32_t)>("ImageDrawCircleLinesV");
        _ImageDrawRectangle = _raylib64->get_function<void(Image *, int, int, int, int, uint32_t)>("ImageDrawRectangle");
        _ImageDrawRectangleV = _raylib64->get_function<void(Image *, Vector2, Vector2, uint32_t)>("ImageDrawRectangleV");
        _ImageDrawRectangleRec = _raylib64->get_function<void(Image *, RRectangle, uint32_t)>("ImageDrawRectangleRec");
        _ImageDrawRectangleLines = _raylib64->get_function<void(Image *, RRectangle, int, uint32_t)>("ImageDrawRectangleLines");
        _ImageDraw = _raylib64->get_function<void(Image *, Image, RRectangle, RRectangle, uint32_t)>("ImageDraw");
        _ImageDrawText = _raylib64->get_function<void(Image *, char *, int, int, int, uint32_t)>("ImageDrawText");
        _ImageDrawTextEx = _raylib64->get_function<void(Image *, RFont, char *, Vector2, float, float, uint32_t)>("ImageDrawTextEx");
        _LoadTexture = _raylib64->get_function<Texture(char *)>("LoadTexture");
        _LoadTextureFromImage = _raylib64->get_function<Texture(Image)>("LoadTextureFromImage");
        _LoadTextureCubemap = _raylib64->get_function<Texture(Image, int)>("LoadTextureCubemap");
        _LoadRenderTexture = _raylib64->get_function<RenderTexture(int, int)>("LoadRenderTexture");
        _IsTextureReady = _raylib64->get_function<bool(Texture)>("IsTextureReady");
        _UnloadTexture = _raylib64->get_function<void(Texture)>("UnloadTexture");
        _IsRenderTextureReady = _raylib64->get_function<bool(RenderTexture)>("IsRenderTextureReady");
        _UnloadRenderTexture = _raylib64->get_function<void(RenderTexture)>("UnloadRenderTexture");
        _UpdateTexture = _raylib64->get_function<void(Texture, void *)>("UpdateTexture");
        _UpdateTextureRec = _raylib64->get_function<void(Texture, RRectangle, void *)>("UpdateTextureRec");
        _GenTextureMipmaps = _raylib64->get_function<void(Texture *)>("GenTextureMipmaps");
        _SetTextureFilter = _raylib64->get_function<void(Texture, int)>("SetTextureFilter");
        _SetTextureWrap = _raylib64->get_function<void(Texture, int)>("SetTextureWrap");
        _DrawTexture = _raylib64->get_function<void(Texture, int, int, uint32_t)>("DrawTexture");
        _DrawTextureV = _raylib64->get_function<void(Texture, Vector2, uint32_t)>("DrawTextureV");
        _DrawTextureEx = _raylib64->get_function<void(Texture, Vector2, float, float, uint32_t)>("DrawTextureEx");
        _DrawTextureRec = _raylib64->get_function<void(Texture, RRectangle, Vector2, uint32_t)>("DrawTextureRec");
        _DrawTexturePro = _raylib64->get_function<void(Texture, RRectangle, RRectangle, Vector2, float, uint32_t)>("DrawTexturePro");
        _DrawTextureNPatch = _raylib64->get_function<void(Texture, NPatchInfo, RRectangle, Vector2, float, uint32_t)>("DrawTextureNPatch");
        _Fade = _raylib64->get_function<uint32_t(uint32_t, float)>("Fade");
        _ColorToInt = _raylib64->get_function<int(uint32_t)>("ColorToInt");
        _ColorNormalize = _raylib64->get_function<Vector4(uint32_t)>("ColorNormalize");
        _ColorFromNormalized = _raylib64->get_function<uint32_t(Vector4)>("ColorFromNormalized");
        _ColorToHSV = _raylib64->get_function<Vector3(uint32_t)>("ColorToHSV");
        _ColorFromHSV = _raylib64->get_function<uint32_t(float, float, float)>("ColorFromHSV");
        _ColorTint = _raylib64->get_function<uint32_t(uint32_t, uint32_t)>("ColorTint");
        _ColorBrightness = _raylib64->get_function<uint32_t(uint32_t, float)>("ColorBrightness");
        _ColorContrast = _raylib64->get_function<uint32_t(uint32_t, float)>("ColorContrast");
        _ColorAlpha = _raylib64->get_function<uint32_t(uint32_t, float)>("ColorAlpha");
        _ColorAlphaBlend = _raylib64->get_function<uint32_t(uint32_t, uint32_t, uint32_t)>("ColorAlphaBlend");
        _GetColor = _raylib64->get_function<uint32_t(unsigned int)>("GetColor");
        _GetPixelColor = _raylib64->get_function<uint32_t(void *, int)>("GetPixelColor");
        _SetPixelColor = _raylib64->get_function<void(void *, uint32_t, int)>("SetPixelColor");
        _GetPixelDataSize = _raylib64->get_function<int(int, int, int)>("GetPixelDataSize");
        _GetFontDefault = _raylib64->get_function<RFont()>("GetFontDefault");
        _LoadFont = _raylib64->get_function<RFont(char *)>("LoadFont");
        _LoadFontEx = _raylib64->get_function<RFont(char *, int, int *, int)>("LoadFontEx");
        _LoadFontFromImage = _raylib64->get_function<RFont(Image, uint32_t, int)>("LoadFontFromImage");
        _LoadFontFromMemory = _raylib64->get_function<RFont(char *, unsigned char *, int, int, int *, int)>("LoadFontFromMemory");
        _IsFontReady = _raylib64->get_function<bool(RFont)>("IsFontReady");
        _LoadFontData = _raylib64->get_function<GlyphInfo *(unsigned char *, int, int, int *, int, int)>("LoadFontData");
        _GenImageFontAtlas = _raylib64->get_function<Image(GlyphInfo *, RRectangle **, int, int, int, int)>("GenImageFontAtlas");
        _UnloadFontData = _raylib64->get_function<void(GlyphInfo *, int)>("UnloadFontData");
        _UnloadFont = _raylib64->get_function<void(RFont)>("UnloadFont");
        _ExportFontAsCode = _raylib64->get_function<bool(RFont, char *)>("ExportFontAsCode");
        _DrawFPS = _raylib64->get_function<void(int, int)>("DrawFPS");
        _DrawText = _raylib64->get_function<void(char *, int, int, int, uint32_t)>("DrawText");
        _DrawTextEx = _raylib64->get_function<void(RFont, char *, Vector2, float, float, uint32_t)>("DrawTextEx");
        _DrawTextPro = _raylib64->get_function<void(RFont, char *, Vector2, Vector2, float, float, float, uint32_t)>("DrawTextPro");
        _DrawTextCodepoint = _raylib64->get_function<void(RFont, int, Vector2, float, uint32_t)>("DrawTextCodepoint");
        _DrawTextCodepoints = _raylib64->get_function<void(RFont, int *, int, Vector2, float, float, uint32_t)>("DrawTextCodepoints");
        _SetTextLineSpacing = _raylib64->get_function<void(int)>("SetTextLineSpacing");
        _MeasureText = _raylib64->get_function<int(char *, int)>("MeasureText");
        _MeasureTextEx = _raylib64->get_function<Vector2(RFont, char *, float, float)>("MeasureTextEx");
        _GetGlyphIndex = _raylib64->get_function<int(RFont, int)>("GetGlyphIndex");
        _GetGlyphInfo = _raylib64->get_function<GlyphInfo(RFont, int)>("GetGlyphInfo");
        _GetGlyphAtlasRec = _raylib64->get_function<RRectangle(RFont, int)>("GetGlyphAtlasRec");
        _LoadUTF8 = _raylib64->get_function<char *(int *, int)>("LoadUTF8");
        _UnloadUTF8 = _raylib64->get_function<void(char *)>("UnloadUTF8");
        _LoadCodepoints = _raylib64->get_function<int *(char *, int *)>("LoadCodepoints");
        _UnloadCodepoints = _raylib64->get_function<void(int *)>("UnloadCodepoints");
        _GetCodepointCount = _raylib64->get_function<int(char *)>("GetCodepointCount");
        _GetCodepoint = _raylib64->get_function<int(char *, int *)>("GetCodepoint");
        _GetCodepointNext = _raylib64->get_function<int(char *, int *)>("GetCodepointNext");
        _GetCodepointPrevious = _raylib64->get_function<int(char *, int *)>("GetCodepointPrevious");
        _CodepointToUTF8 = _raylib64->get_function<char *(int, int *)>("CodepointToUTF8");
        _TextCopy = _raylib64->get_function<int(char *, char *)>("TextCopy");
        _TextIsEqual = _raylib64->get_function<bool(char *, char *)>("TextIsEqual");
        _TextLength = _raylib64->get_function<unsigned int(char *)>("TextLength");
        _TextFormat = _raylib64->get_function<char *(char *, ...)>("TextFormat");
        _TextSubtext = _raylib64->get_function<char *(char *, int, int)>("TextSubtext");
        _TextReplace = _raylib64->get_function<char *(char *, char *, char *)>("TextReplace");
        _TextInsert = _raylib64->get_function<char *(char *, char *, int)>("TextInsert");
        _TextJoin = _raylib64->get_function<char *(char **, int, char *)>("TextJoin");
        _TextSplit = _raylib64->get_function<char **(char *, char, int *)>("TextSplit");
        _TextAppend = _raylib64->get_function<void(char *, char *, int *)>("TextAppend");
        _TextFindIndex = _raylib64->get_function<int(char *, char *)>("TextFindIndex");
        _TextToUpper = _raylib64->get_function<char *(char *)>("TextToUpper");
        _TextToLower = _raylib64->get_function<char *(char *)>("TextToLower");
        _TextToPascal = _raylib64->get_function<char *(char *)>("TextToPascal");
        _TextToInteger = _raylib64->get_function<int(char *)>("TextToInteger");
        _DrawLine3D = _raylib64->get_function<void(Vector3, Vector3, uint32_t)>("DrawLine3D");
        _DrawPoint3D = _raylib64->get_function<void(Vector3, uint32_t)>("DrawPoint3D");
        _DrawCircle3D = _raylib64->get_function<void(Vector3, float, Vector3, float, uint32_t)>("DrawCircle3D");
        _DrawTriangle3D = _raylib64->get_function<void(Vector3, Vector3, Vector3, uint32_t)>("DrawTriangle3D");
        _DrawTriangleStrip3D = _raylib64->get_function<void(Vector3 *, int, uint32_t)>("DrawTriangleStrip3D");
        _DrawCube = _raylib64->get_function<void(Vector3, float, float, float, uint32_t)>("DrawCube");
        _DrawCubeV = _raylib64->get_function<void(Vector3, Vector3, uint32_t)>("DrawCubeV");
        _DrawCubeWires = _raylib64->get_function<void(Vector3, float, float, float, uint32_t)>("DrawCubeWires");
        _DrawCubeWiresV = _raylib64->get_function<void(Vector3, Vector3, uint32_t)>("DrawCubeWiresV");
        _DrawSphere = _raylib64->get_function<void(Vector3, float, uint32_t)>("DrawSphere");
        _DrawSphereEx = _raylib64->get_function<void(Vector3, float, int, int, uint32_t)>("DrawSphereEx");
        _DrawSphereWires = _raylib64->get_function<void(Vector3, float, int, int, uint32_t)>("DrawSphereWires");
        _DrawCylinder = _raylib64->get_function<void(Vector3, float, float, float, int, uint32_t)>("DrawCylinder");
        _DrawCylinderEx = _raylib64->get_function<void(Vector3, Vector3, float, float, int, uint32_t)>("DrawCylinderEx");
        _DrawCylinderWires = _raylib64->get_function<void(Vector3, float, float, float, int, uint32_t)>("DrawCylinderWires");
        _DrawCylinderWiresEx = _raylib64->get_function<void(Vector3, Vector3, float, float, int, uint32_t)>("DrawCylinderWiresEx");
        _DrawCapsule = _raylib64->get_function<void(Vector3, Vector3, float, int, int, uint32_t)>("DrawCapsule");
        _DrawCapsuleWires = _raylib64->get_function<void(Vector3, Vector3, float, int, int, uint32_t)>("DrawCapsuleWires");
        _DrawPlane = _raylib64->get_function<void(Vector3, Vector2, uint32_t)>("DrawPlane");
        _DrawRay = _raylib64->get_function<void(Ray, uint32_t)>("DrawRay");
        _DrawGrid = _raylib64->get_function<void(int, float)>("DrawGrid");
        _LoadModel = _raylib64->get_function<Model(char *)>("LoadModel");
        _LoadModelFromMesh = _raylib64->get_function<Model(Mesh)>("LoadModelFromMesh");
        _IsModelReady = _raylib64->get_function<bool(Model)>("IsModelReady");
        _UnloadModel = _raylib64->get_function<void(Model)>("UnloadModel");
        _GetModelBoundingBox = _raylib64->get_function<BoundingBox(Model)>("GetModelBoundingBox");
        _DrawModel = _raylib64->get_function<void(Model, Vector3, float, uint32_t)>("DrawModel");
        _DrawModelEx = _raylib64->get_function<void(Model, Vector3, Vector3, float, Vector3, uint32_t)>("DrawModelEx");
        _DrawModelWires = _raylib64->get_function<void(Model, Vector3, float, uint32_t)>("DrawModelWires");
        _DrawModelWiresEx = _raylib64->get_function<void(Model, Vector3, Vector3, float, Vector3, uint32_t)>("DrawModelWiresEx");
        _DrawBoundingBox = _raylib64->get_function<void(BoundingBox, uint32_t)>("DrawBoundingBox");
        _DrawBillboard = _raylib64->get_function<void(Camera3D, Texture, Vector3, float, uint32_t)>("DrawBillboard");
        _DrawBillboardRec = _raylib64->get_function<void(Camera3D, Texture, RRectangle, Vector3, Vector2, uint32_t)>("DrawBillboardRec");
        _DrawBillboardPro = _raylib64->get_function<void(Camera3D, Texture, RRectangle, Vector3, Vector3, Vector2, Vector2, float, uint32_t)>("DrawBillboardPro");
        _UploadMesh = _raylib64->get_function<void(Mesh *, bool)>("UploadMesh");
        _UpdateMeshBuffer = _raylib64->get_function<void(Mesh, int, void *, int, int)>("UpdateMeshBuffer");
        _UnloadMesh = _raylib64->get_function<void(Mesh)>("UnloadMesh");
        _DrawMesh = _raylib64->get_function<void(Mesh, Material, Matrix)>("DrawMesh");
        _DrawMeshInstanced = _raylib64->get_function<void(Mesh, Material, Matrix *, int)>("DrawMeshInstanced");
        _ExportMesh = _raylib64->get_function<bool(Mesh, char *)>("ExportMesh");
        _GetMeshBoundingBox = _raylib64->get_function<BoundingBox(Mesh)>("GetMeshBoundingBox");
        _GenMeshTangents = _raylib64->get_function<void(Mesh *)>("GenMeshTangents");
        _GenMeshPoly = _raylib64->get_function<Mesh(int, float)>("GenMeshPoly");
        _GenMeshPlane = _raylib64->get_function<Mesh(float, float, int, int)>("GenMeshPlane");
        _GenMeshCube = _raylib64->get_function<Mesh(float, float, float)>("GenMeshCube");
        _GenMeshSphere = _raylib64->get_function<Mesh(float, int, int)>("GenMeshSphere");
        _GenMeshHemiSphere = _raylib64->get_function<Mesh(float, int, int)>("GenMeshHemiSphere");
        _GenMeshCylinder = _raylib64->get_function<Mesh(float, float, int)>("GenMeshCylinder");
        _GenMeshCone = _raylib64->get_function<Mesh(float, float, int)>("GenMeshCone");
        _GenMeshTorus = _raylib64->get_function<Mesh(float, float, int, int)>("GenMeshTorus");
        _GenMeshKnot = _raylib64->get_function<Mesh(float, float, int, int)>("GenMeshKnot");
        _GenMeshHeightmap = _raylib64->get_function<Mesh(Image, Vector3)>("GenMeshHeightmap");
        _GenMeshCubicmap = _raylib64->get_function<Mesh(Image, Vector3)>("GenMeshCubicmap");
        _LoadMaterials = _raylib64->get_function<Material *(char *, int *)>("LoadMaterials");
        _LoadMaterialDefault = _raylib64->get_function<Material()>("LoadMaterialDefault");
        _IsMaterialReady = _raylib64->get_function<bool(Material)>("IsMaterialReady");
        _UnloadMaterial = _raylib64->get_function<void(Material)>("UnloadMaterial");
        _SetMaterialTexture = _raylib64->get_function<void(Material *, int, Texture)>("SetMaterialTexture");
        _SetModelMeshMaterial = _raylib64->get_function<void(Model *, int, int)>("SetModelMeshMaterial");
        _LoadModelAnimations = _raylib64->get_function<ModelAnimation *(char *, int *)>("LoadModelAnimations");
        _UpdateModelAnimation = _raylib64->get_function<void(Model, ModelAnimation, int)>("UpdateModelAnimation");
        _UnloadModelAnimation = _raylib64->get_function<void(ModelAnimation)>("UnloadModelAnimation");
        _UnloadModelAnimations = _raylib64->get_function<void(ModelAnimation *, int)>("UnloadModelAnimations");
        _IsModelAnimationValid = _raylib64->get_function<bool(Model, ModelAnimation)>("IsModelAnimationValid");
        _CheckCollisionSpheres = _raylib64->get_function<bool(Vector3, float, Vector3, float)>("CheckCollisionSpheres");
        _CheckCollisionBoxes = _raylib64->get_function<bool(BoundingBox, BoundingBox)>("CheckCollisionBoxes");
        _CheckCollisionBoxSphere = _raylib64->get_function<bool(BoundingBox, Vector3, float)>("CheckCollisionBoxSphere");
        _GetRayCollisionSphere = _raylib64->get_function<RayCollision(Ray, Vector3, float)>("GetRayCollisionSphere");
        _GetRayCollisionBox = _raylib64->get_function<RayCollision(Ray, BoundingBox)>("GetRayCollisionBox");
        _GetRayCollisionMesh = _raylib64->get_function<RayCollision(Ray, Mesh, Matrix)>("GetRayCollisionMesh");
        _GetRayCollisionTriangle = _raylib64->get_function<RayCollision(Ray, Vector3, Vector3, Vector3)>("GetRayCollisionTriangle");
        _GetRayCollisionQuad = _raylib64->get_function<RayCollision(Ray, Vector3, Vector3, Vector3, Vector3)>("GetRayCollisionQuad");
        _InitAudioDevice = _raylib64->get_function<void()>("InitAudioDevice");
        _CloseAudioDevice = _raylib64->get_function<void()>("CloseAudioDevice");
        _IsAudioDeviceReady = _raylib64->get_function<bool()>("IsAudioDeviceReady");
        _SetMasterVolume = _raylib64->get_function<void(float)>("SetMasterVolume");
        _GetMasterVolume = _raylib64->get_function<float()>("GetMasterVolume");
        _LoadWave = _raylib64->get_function<Wave(char *)>("LoadWave");
        _LoadWaveFromMemory = _raylib64->get_function<Wave(char *, unsigned char *, int)>("LoadWaveFromMemory");
        _IsWaveReady = _raylib64->get_function<bool(Wave)>("IsWaveReady");
        _LoadSound = _raylib64->get_function<RSound(char *)>("LoadSound");
        _LoadSoundFromWave = _raylib64->get_function<RSound(Wave)>("LoadSoundFromWave");
        _LoadSoundAlias = _raylib64->get_function<RSound(RSound)>("LoadSoundAlias");
        _IsSoundReady = _raylib64->get_function<bool(RSound)>("IsSoundReady");
        _UpdateSound = _raylib64->get_function<void(RSound, void *, int)>("UpdateSound");
        _UnloadWave = _raylib64->get_function<void(Wave)>("UnloadWave");
        _UnloadSound = _raylib64->get_function<void(RSound)>("UnloadSound");
        _UnloadSoundAlias = _raylib64->get_function<void(RSound)>("UnloadSoundAlias");
        _ExportWave = _raylib64->get_function<bool(Wave, char *)>("ExportWave");
        _ExportWaveAsCode = _raylib64->get_function<bool(Wave, char *)>("ExportWaveAsCode");
        _PlaySound = _raylib64->get_function<void(RSound)>("PlaySound");
        _StopSound = _raylib64->get_function<void(RSound)>("StopSound");
        _PauseSound = _raylib64->get_function<void(RSound)>("PauseSound");
        _ResumeSound = _raylib64->get_function<void(RSound)>("ResumeSound");
        _IsSoundPlaying = _raylib64->get_function<bool(RSound)>("IsSoundPlaying");
        _SetSoundVolume = _raylib64->get_function<void(RSound, float)>("SetSoundVolume");
        _SetSoundPitch = _raylib64->get_function<void(RSound, float)>("SetSoundPitch");
        _SetSoundPan = _raylib64->get_function<void(RSound, float)>("SetSoundPan");
        _WaveCopy = _raylib64->get_function<Wave(Wave)>("WaveCopy");
        _WaveCrop = _raylib64->get_function<void(Wave *, int, int)>("WaveCrop");
        _WaveFormat = _raylib64->get_function<void(Wave *, int, int, int)>("WaveFormat");
        _LoadWaveSamples = _raylib64->get_function<float *(Wave)>("LoadWaveSamples");
        _UnloadWaveSamples = _raylib64->get_function<void(float *)>("UnloadWaveSamples");
        _LoadMusicStream = _raylib64->get_function<Music(char *)>("LoadMusicStream");
        _LoadMusicStreamFromMemory = _raylib64->get_function<Music(char *, unsigned char *, int)>("LoadMusicStreamFromMemory");
        _IsMusicReady = _raylib64->get_function<bool(Music)>("IsMusicReady");
        _UnloadMusicStream = _raylib64->get_function<void(Music)>("UnloadMusicStream");
        _PlayMusicStream = _raylib64->get_function<void(Music)>("PlayMusicStream");
        _IsMusicStreamPlaying = _raylib64->get_function<bool(Music)>("IsMusicStreamPlaying");
        _UpdateMusicStream = _raylib64->get_function<void(Music)>("UpdateMusicStream");
        _StopMusicStream = _raylib64->get_function<void(Music)>("StopMusicStream");
        _PauseMusicStream = _raylib64->get_function<void(Music)>("PauseMusicStream");
        _ResumeMusicStream = _raylib64->get_function<void(Music)>("ResumeMusicStream");
        _SeekMusicStream = _raylib64->get_function<void(Music, float)>("SeekMusicStream");
        _SetMusicVolume = _raylib64->get_function<void(Music, float)>("SetMusicVolume");
        _SetMusicPitch = _raylib64->get_function<void(Music, float)>("SetMusicPitch");
        _SetMusicPan = _raylib64->get_function<void(Music, float)>("SetMusicPan");
        _GetMusicTimeLength = _raylib64->get_function<float(Music)>("GetMusicTimeLength");
        _GetMusicTimePlayed = _raylib64->get_function<float(Music)>("GetMusicTimePlayed");
        _LoadAudioStream = _raylib64->get_function<AudioStream(unsigned int, unsigned int, unsigned int)>("LoadAudioStream");
        _IsAudioStreamReady = _raylib64->get_function<bool(AudioStream)>("IsAudioStreamReady");
        _UnloadAudioStream = _raylib64->get_function<void(AudioStream)>("UnloadAudioStream");
        _UpdateAudioStream = _raylib64->get_function<void(AudioStream, void *, int)>("UpdateAudioStream");
        _IsAudioStreamProcessed = _raylib64->get_function<bool(AudioStream)>("IsAudioStreamProcessed");
        _PlayAudioStream = _raylib64->get_function<void(AudioStream)>("PlayAudioStream");
        _PauseAudioStream = _raylib64->get_function<void(AudioStream)>("PauseAudioStream");
        _ResumeAudioStream = _raylib64->get_function<void(AudioStream)>("ResumeAudioStream");
        _IsAudioStreamPlaying = _raylib64->get_function<bool(AudioStream)>("IsAudioStreamPlaying");
        _StopAudioStream = _raylib64->get_function<void(AudioStream)>("StopAudioStream");
        _SetAudioStreamVolume = _raylib64->get_function<void(AudioStream, float)>("SetAudioStreamVolume");
        _SetAudioStreamPitch = _raylib64->get_function<void(AudioStream, float)>("SetAudioStreamPitch");
        _SetAudioStreamPan = _raylib64->get_function<void(AudioStream, float)>("SetAudioStreamPan");
        _SetAudioStreamBufferSizeDefault = _raylib64->get_function<void(int)>("SetAudioStreamBufferSizeDefault");
        _SetAudioStreamCallback = _raylib64->get_function<void(AudioStream, AudioCallback)>("SetAudioStreamCallback");
        _AttachAudioStreamProcessor = _raylib64->get_function<void(AudioStream, AudioCallback)>("AttachAudioStreamProcessor");
        _DetachAudioStreamProcessor = _raylib64->get_function<void(AudioStream, AudioCallback)>("DetachAudioStreamProcessor");
        _AttachAudioMixedProcessor = _raylib64->get_function<void(AudioCallback)>("AttachAudioMixedProcessor");
        _DetachAudioMixedProcessor = _raylib64->get_function<void(AudioCallback)>("DetachAudioMixedProcessor");
    }
    catch (dylib::symbol_error e)
    {
        RAYLIB_DEBUG_PRINT("Error: %s", e.what());
        ___done_raylib64();
        return QB_FALSE;
    }

    atexit(___done_raylib64);

    RAYLIB_DEBUG_PRINT("Shared library loaded");

    return QB_TRUE;
}

// Various interop functions that make life easy when working with external libs

/// @brief Returns QB style bool
/// @param x Any number
/// @return 0 when x is 0 and -1 when x is non-zero
inline qb_bool ToQBBool(int32_t x)
{
    return TO_QB_BOOL(x);
}

/// @brief Returns C style bool
/// @param x Any number
/// @return 0 when x is 0 and 1 when x is non-zero
inline bool ToCBool(int32_t x)
{
    return TO_C_BOOL(x);
}

/// @brief Casts a QB64 _OFFSET to a C string. QB64 does the right thing to convert this to a QB64 string
/// @param p A pointer (_OFFSET)
/// @return A C string (char ptr)
inline const uint8_t *CStr(uintptr_t p)
{
    return (const uint8_t *)p;
}

/// @brief Copies count bytes from src to dst
/// @param dst The destination memory pointer
/// @param src The source memory pointer
/// @param count The number of bytes to copy
inline void RCopyMemory(uintptr_t dst, uintptr_t src, size_t count)
{
    memcpy((void *)(dst), (void *)(src), (size_t)(count));
}

/// @brief Peeks a BYTE (8-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return BYTE value
inline uint8_t PeekByte(uintptr_t p, uintptr_t o)
{
    return *((uint8_t *)p + o);
}

/// @brief Poke a BYTE (8-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n BYTE value
inline void PokeByte(uintptr_t p, uintptr_t o, uint8_t n)
{
    *((uint8_t *)p + o) = n;
}

/// @brief Peek an INTEGER (16-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return INTEGER value
inline uint16_t PeekInteger(uintptr_t p, uintptr_t o)
{
    return *((uint16_t *)p + o);
}

/// @brief Poke an INTEGER (16-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n INTEGER value
inline void PokeInteger(uintptr_t p, uintptr_t o, uint16_t n)
{
    *((uint16_t *)p + o) = n;
}

/// @brief Peek a LONG (32-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return LONG value
inline uint32_t PeekLong(uintptr_t p, uintptr_t o)
{
    return *((uint32_t *)p + o);
}

/// @brief Poke a LONG (32-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n LONG value
inline void PokeLong(uintptr_t p, uintptr_t o, uint32_t n)
{
    *((uint32_t *)p + o) = n;
}

/// @brief Peek a INTEGER64 (64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return INTEGER64 value
inline uint64_t PeekInteger64(uintptr_t p, uintptr_t o)
{
    return *((uint64_t *)p + o);
}

/// @brief Poke a INTEGER64 (64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n INTEGER64 value
inline void PokeInteger64(uintptr_t p, uintptr_t o, uint64_t n)
{
    *((uint64_t *)p + o) = n;
}

/// @brief Peek a SINGLE (32-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return SINGLE value
inline float PeekSingle(uintptr_t p, uintptr_t o)
{
    return *((float *)p + o);
}

/// @brief Poke a SINGLE (32-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n SINGLE value
inline void PokeSingle(uintptr_t p, uintptr_t o, float n)
{
    *((float *)p + o) = n;
}

/// @brief Peek a DOUBLE (64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return DOUBLE value
inline double PeekDouble(uintptr_t p, uintptr_t o)
{
    return *((double *)p + o);
}

/// @brief Poke a DOUBLE (64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n DOUBLE value
inline void PokeDouble(uintptr_t p, uintptr_t o, double n)
{
    *((double *)p + o) = n;
}

/// @brief Peek an OFFSET (32/64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @return DOUBLE value
inline uintptr_t PeekOffset(uintptr_t p, uintptr_t o)
{
    return *((uintptr_t *)p + o);
}

/// @brief Poke an OFFSET (32/64-bits) value at p + o
/// @param p Pointer base
/// @param o Offset from base
/// @param n DOUBLE value
inline void PokeOffset(uintptr_t p, uintptr_t o, uintptr_t n)
{
    *((uintptr_t *)p + o) = n;
}

/// @brief Gets a UDT value from a pointer positon offset by o. Same as t = p[o]
/// @param p The base pointer
/// @param o Offset from base (each offset is t_size bytes)
/// @param t A pointer to the UDT variable
/// @param t_size The size of the UTD variable in bytes
inline void PeekType(uintptr_t p, uintptr_t o, uintptr_t t, size_t t_size)
{
    memcpy((void *)t, (const uint8_t *)p + (o * t_size), t_size);
}

/// @brief Sets a UDT value to a pointer position offset by o. Same as p[o] = t
/// @param p The base pointer
/// @param o Offset from base (each offset is t_size bytes)
/// @param t A pointer to the UDT variable
/// @param t_size The size of the UTD variable in bytes
inline void PokeType(uintptr_t p, uintptr_t o, uintptr_t t, size_t t_size)
{
    memcpy((uint8_t *)p + (o * t_size), (void *)t, t_size);
}

/// @brief Peek a character value in a string. Zero based, faster and unsafe than ASC
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The ASCII character at position o
inline int8_t PeekStringByte(const char *s, uintptr_t o)
{
    return s[o];
}

/// @brief Poke a character value in a string. Zero based, faster and unsafe than ASC
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The ASCII character at position o
inline void PokeStringByte(char *s, uintptr_t o, int8_t n)
{
    s[o] = n;
}

/// @brief Peek an integer value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The integer at position o
inline int16_t PeekStringInteger(const char *s, uintptr_t o)
{
    return *((const int16_t *)&s[o * sizeof(int16_t)]);
}

/// @brief Poke an integer value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The integer at position o
inline void PokeStringInteger(char *s, uintptr_t o, int16_t n)
{
    *((int16_t *)&s[o * sizeof(int16_t)]) = n;
}

/// @brief Peek a long value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The long at position o
inline int32_t PeekStringLong(const char *s, uintptr_t o)
{
    return *((const int32_t *)&s[o * sizeof(int32_t)]);
}

/// @brief Poke an long value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The long at position o
inline void PokeStringLong(char *s, uintptr_t o, int32_t n)
{
    *((int32_t *)&s[o * sizeof(int32_t)]) = n;
}

/// @brief Peek an integer64 value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The integer64 at position o
inline int64_t PeekStringInteger64(const char *s, uintptr_t o)
{
    return *((const int64_t *)&s[o * sizeof(int64_t)]);
}

/// @brief Poke an integer64 value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The integer64 at position o
inline void PokeStringInteger64(char *s, uintptr_t o, int64_t n)
{
    *((int64_t *)&s[o * sizeof(int64_t)]) = n;
}

/// @brief Peek a single value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The single at position o
inline float PeekStringSingle(const char *s, uintptr_t o)
{
    return *((const float *)&s[o * sizeof(float)]);
}

/// @brief Poke a single value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The single at position o
inline void PokeStringSingle(char *s, uintptr_t o, float n)
{
    *((float *)&s[o * sizeof(float)]) = n;
}

/// @brief Peek a double value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The double at position o
inline double PeekStringDouble(const char *s, uintptr_t o)
{
    return *((const double *)&s[o * sizeof(double)]);
}

/// @brief Poke a double value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The double at position o
inline void PokeStringDouble(char *s, uintptr_t o, double n)
{
    *((double *)&s[o * sizeof(double)]) = n;
}

/// @brief Peek an Offset value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @return The Offset at position o
inline uintptr_t PeekStringOffset(const char *s, uintptr_t o)
{
    return *((const uintptr_t *)&s[o * sizeof(uintptr_t)]);
}

/// @brief Poke an Offset value in a string
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param n The Offset at position o
inline void PokeStringOffset(char *s, uintptr_t o, uintptr_t n)
{
    *((uintptr_t *)&s[o * sizeof(uintptr_t)]) = n;
}

/// @brief Gets a UDT value from a string offset
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param t A pointer to the UDT variable
/// @param t_size The size of the UTD variable in bytes
inline void PeekStringType(const char *s, uintptr_t o, uintptr_t t, size_t t_size)
{
    memcpy((void *)t, s + (o * t_size), t_size);
}

/// @brief Sets a UDT value to a string offset
/// @param s A QB64 string
/// @param o Offset from base (zero based)
/// @param t A pointer to the UDT variable
/// @param t_size The size of the UTD variable in bytes
inline void PokeStringType(char *s, uintptr_t o, uintptr_t t, size_t t_size)
{
    memcpy(s + (o * t_size), (void *)t, t_size);
}

/// @brief Makes a RGBA color from RGBA components (the return value is the same as raylib Color in memory)
/// @param r Red (0 - 255)
/// @param g Green (0 - 255)
/// @param b Blue (0 - 255)
/// @param a Alpha (0 - 255)
/// @return Returns an RGBA color
inline uint32_t ToRGBA(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
    return ((uint32_t)a << 24) | ((uint32_t)b << 16) | ((uint32_t)g << 8) | (uint32_t)(r);
}

/// @brief Returns the Red component
/// @param rgba An RGBA color
/// @return Red
inline uint8_t GetRed(uint32_t rgba)
{
    return (uint8_t)(rgba & 0xFF);
}

/// @brief Returns the Green component
/// @param rgba An RGBA color
/// @return Green
inline uint8_t GetGreen(uint32_t rgba)
{
    return (uint8_t)((rgba >> 8) & 0xFF);
}

/// @brief Returns the Blue component
/// @param rgba An RGBA color
/// @return Blue
inline uint8_t GetBlue(uint32_t rgba)
{
    return (uint8_t)((rgba >> 16) & 0xFF);
}

/// @brief Returns the Alpha value
/// @param rgba An RGBA color
/// @return Alpha
inline uint8_t GetAlpha(uint32_t rgba)
{
    return (uint8_t)(rgba >> 24);
}

/// @brief Gets the RGB value without the alpha
/// @param rgba An RGBA color
/// @return RGB value
inline uint32_t GetRGB(uint32_t rgba)
{
    return rgba & 0xFFFFFF;
}

/// @brief Helps convert a BGRA color to an RGBA color and back
/// @param bgra A BGRA color or an RGBA color
/// @return An RGBA color or a BGRA color
inline uint32_t SwapRedBlue(uint32_t clr)
{
    return (clr & 0xFF00FF00) | ((clr & 0x00FF0000) >> 16) | ((clr & 0x000000FF) << 16);
}

/// @brief Sets a Vector2 variable
/// @param v The Vector2 variable
/// @param x The x component
/// @param y The y component
inline void SetVector2(void *v, float x, float y)
{
    (*reinterpret_cast<Vector2 *>(v)) = {x, y};
}

/// @brief Sets a Vector3 variable
/// @param v The Vector3 variable
/// @param x The x component
/// @param y The y component
/// @param z The z component
inline void SetVector3(void *v, float x, float y, float z)
{
    (*reinterpret_cast<Vector3 *>(v)) = {x, y, z};
}

/// @brief Sets a Vector4 variable
/// @param v The Vector4 variable
/// @param x The x component
/// @param y The y component
/// @param z The z component
/// @param w The w component
inline void SetVector4(void *v, float x, float y, float z, float w)
{
    (*reinterpret_cast<Vector4 *>(v)) = {x, y, z, w};
}

/// @brief Sets a RColor variable
/// @param c The RColor variable
/// @param r The r component
/// @param g The g component
/// @param b The b component
/// @param a The a component
inline void SetColor(void *c, uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
    (*reinterpret_cast<RColor *>(c)) = {r, g, b, a};
}

// Initialize window and OpenGL context
inline void InitWindow(int width, int height, char *title)
{
    _InitWindow(width, height, title);
}

// Close window and unload OpenGL context
inline void CloseWindow()
{
    _CloseWindow();
}

// Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
inline qb_bool WindowShouldClose()
{
    return TO_QB_BOOL(_WindowShouldClose());
}

// Check if window has been initialized successfully
inline qb_bool IsWindowReady()
{
    return TO_QB_BOOL(_IsWindowReady());
}

// Check if window is currently fullscreen
inline qb_bool IsWindowFullscreen()
{
    return TO_QB_BOOL(_IsWindowFullscreen());
}

// Check if window is currently hidden (only PLATFORM_DESKTOP)
inline qb_bool IsWindowHidden()
{
    return TO_QB_BOOL(_IsWindowHidden());
}

// Check if window is currently minimized (only PLATFORM_DESKTOP)
inline qb_bool IsWindowMinimized()
{
    return TO_QB_BOOL(_IsWindowMinimized());
}

// Check if window is currently maximized (only PLATFORM_DESKTOP)
inline qb_bool IsWindowMaximized()
{
    return TO_QB_BOOL(_IsWindowMaximized());
}

// Check if window is currently focused (only PLATFORM_DESKTOP)
inline qb_bool IsWindowFocused()
{
    return TO_QB_BOOL(_IsWindowFocused());
}

// Check if window has been resized last frame
inline qb_bool IsWindowResized()
{
    return TO_QB_BOOL(_IsWindowResized());
}

// Check if one specific window flag is enabled
inline qb_bool IsWindowState(unsigned int flag)
{
    return TO_QB_BOOL(_IsWindowState(flag));
}

// Set window configuration state using flags (only PLATFORM_DESKTOP)
inline void SetWindowState(unsigned int flags)
{
    _SetWindowState(flags);
}

// Clear window configuration state flags
inline void ClearWindowState(unsigned int flags)
{
    _ClearWindowState(flags);
}

// Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
inline void ToggleFullscreen()
{
    _ToggleFullscreen();
}

// Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
inline void ToggleBorderlessWindowed()
{
    _ToggleBorderlessWindowed();
}

// Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
inline void MaximizeWindow()
{
    _MaximizeWindow();
}

// Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
inline void MinimizeWindow()
{
    _MinimizeWindow();
}

// Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
inline void RestoreWindow()
{
    _RestoreWindow();
}

// Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
inline void SetWindowIcon(void *image)
{
    _SetWindowIcon(*(Image *)image);
}

// Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
inline void SetWindowIcons(void *images, int count)
{
    _SetWindowIcons((Image *)images, count);
}

// Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
inline void SetWindowTitle(char *title)
{
    _SetWindowTitle(title);
}

// Set window position on screen (only PLATFORM_DESKTOP)
inline void SetWindowPosition(int x, int y)
{
    _SetWindowPosition(x, y);
}

// Set monitor for the current window
inline void SetWindowMonitor(int monitor)
{
    _SetWindowMonitor(monitor);
}

// Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
inline void SetWindowMinSize(int width, int height)
{
    _SetWindowMinSize(width, height);
}

// Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
inline void SetWindowMaxSize(int width, int height)
{
    _SetWindowMaxSize(width, height);
}

// Set window dimensions
inline void SetWindowSize(int width, int height)
{
    _SetWindowSize(width, height);
}

// Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
inline void SetWindowOpacity(float opacity)
{
    _SetWindowOpacity(opacity);
}

// Set window focused (only PLATFORM_DESKTOP)
inline void SetWindowFocused()
{
    _SetWindowFocused();
}

// Get native window handle
inline void *GetWindowHandle()
{
    return _GetWindowHandle();
}

// Get current screen width
inline int GetScreenWidth()
{
    return _GetScreenWidth();
}

// Get current screen height
inline int GetScreenHeight()
{
    return _GetScreenHeight();
}

// Get current render width (it considers HiDPI)
inline int GetRenderWidth()
{
    return _GetRenderWidth();
}

// Get current render height (it considers HiDPI)
inline int GetRenderHeight()
{
    return _GetRenderHeight();
}

// Get number of connected monitors
inline int GetMonitorCount()
{
    return _GetMonitorCount();
}

// Get current connected monitor
inline int GetCurrentMonitor()
{
    return _GetCurrentMonitor();
}

// Get specified monitor position
inline void GetMonitorPosition(int monitor, void *retVal)
{
    *(Vector2 *)retVal = _GetMonitorPosition(monitor);
}

// Get specified monitor width (current video mode used by monitor)
inline int GetMonitorWidth(int monitor)
{
    return _GetMonitorWidth(monitor);
}

// Get specified monitor height (current video mode used by monitor)
inline int GetMonitorHeight(int monitor)
{
    return _GetMonitorHeight(monitor);
}

// Get specified monitor physical width in millimetres
inline int GetMonitorPhysicalWidth(int monitor)
{
    return _GetMonitorPhysicalWidth(monitor);
}

// Get specified monitor physical height in millimetres
inline int GetMonitorPhysicalHeight(int monitor)
{
    return _GetMonitorPhysicalHeight(monitor);
}

// Get specified monitor refresh rate
inline int GetMonitorRefreshRate(int monitor)
{
    return _GetMonitorRefreshRate(monitor);
}

// Get window position XY on monitor
inline void GetWindowPosition(void *retVal)
{
    *(Vector2 *)retVal = _GetWindowPosition();
}

// Get window scale DPI factor
inline void GetWindowScaleDPI(void *retVal)
{
    *(Vector2 *)retVal = _GetWindowScaleDPI();
}

// Get the human-readable, UTF-8 encoded name of the specified monitor
inline const char *GetMonitorName(int monitor)
{
    return _GetMonitorName(monitor);
}

// Set clipboard text content
inline void SetClipboardText(char *text)
{
    _SetClipboardText(text);
}

// Get clipboard text content
inline const char *GetClipboardText()
{
    return _GetClipboardText();
}

// Enable waiting for events on EndDrawing(), no automatic event polling
inline void EnableEventWaiting()
{
    _EnableEventWaiting();
}

// Disable waiting for events on EndDrawing(), automatic events polling
inline void DisableEventWaiting()
{
    _DisableEventWaiting();
}

// Shows cursor
inline void ShowCursor()
{
    _ShowCursor();
}

// Hides cursor
inline void HideCursor()
{
    _HideCursor();
}

// Check if cursor is not visible
inline qb_bool IsCursorHidden()
{
    return TO_QB_BOOL(_IsCursorHidden());
}

// Enables cursor (unlock cursor)
inline void EnableCursor()
{
    _EnableCursor();
}

// Disables cursor (lock cursor)
inline void DisableCursor()
{
    _DisableCursor();
}

// Check if cursor is on the screen
inline qb_bool IsCursorOnScreen()
{
    return TO_QB_BOOL(_IsCursorOnScreen());
}

// Set background color (framebuffer clear color)
inline void ClearBackground(uint32_t color)
{
    _ClearBackground(color);
}

// Setup canvas (framebuffer) to start drawing
inline void BeginDrawing()
{
    _BeginDrawing();
}

// End canvas drawing and swap buffers (double buffering)
inline void EndDrawing()
{
    _EndDrawing();
}

// Begin 2D mode with custom camera (2D)
inline void BeginMode2D(void *camera)
{
    _BeginMode2D(*(Camera2D *)camera);
}

// Ends 2D mode with custom camera
inline void EndMode2D()
{
    _EndMode2D();
}

// Begin 3D mode with custom camera (3D)
inline void BeginMode3D(void *camera)
{
    _BeginMode3D(*(Camera3D *)camera);
}

// Ends 3D mode and returns to default 2D orthographic mode
inline void EndMode3D()
{
    _EndMode3D();
}

// Begin drawing to render texture
inline void BeginTextureMode(void *target)
{
    _BeginTextureMode(*(RenderTexture *)target);
}

// Ends drawing to render texture
inline void EndTextureMode()
{
    _EndTextureMode();
}

// Begin custom shader drawing
inline void BeginShaderMode(void *shader)
{
    _BeginShaderMode(*(Shader *)shader);
}

// End custom shader drawing (use default shader)
inline void EndShaderMode()
{
    _EndShaderMode();
}

// Begin blending mode (alpha, additive, multiplied, subtract, custom)
inline void BeginBlendMode(int mode)
{
    _BeginBlendMode(mode);
}

// End blending mode (reset to default: alpha blending)
inline void EndBlendMode()
{
    _EndBlendMode();
}

// Begin scissor mode (define screen area for following drawing)
inline void BeginScissorMode(int x, int y, int width, int height)
{
    _BeginScissorMode(x, y, width, height);
}

// End scissor mode
inline void EndScissorMode()
{
    _EndScissorMode();
}

// Begin stereo rendering (requires VR simulator)
inline void BeginVrStereoMode(void *config)
{
    _BeginVrStereoMode(*(VrStereoConfig *)config);
}

// End stereo rendering (requires VR simulator)
inline void EndVrStereoMode()
{
    _EndVrStereoMode();
}

// Load VR stereo config for VR simulator device parameters
inline void LoadVrStereoConfig(void *device, void *retVal)
{
    *(VrStereoConfig *)retVal = _LoadVrStereoConfig(*(VrDeviceInfo *)device);
}

// Unload VR stereo config
inline void UnloadVrStereoConfig(void *config)
{
    _UnloadVrStereoConfig(*(VrStereoConfig *)config);
}

// Load shader from files and bind default locations
inline void LoadShader(char *vsFileName, char *fsFileName, void *retVal)
{
    *(Shader *)retVal = _LoadShader(vsFileName, fsFileName);
}

// Load shader from code strings and bind default locations
inline void LoadShaderFromMemory(char *vsCode, char *fsCode, void *retVal)
{
    *(Shader *)retVal = _LoadShaderFromMemory(vsCode, fsCode);
}

// Check if a shader is ready
inline qb_bool IsShaderReady(void *shader)
{
    return TO_QB_BOOL(_IsShaderReady(*(Shader *)shader));
}

// Get shader uniform location
inline int GetShaderLocation(void *shader, char *uniformName)
{
    return _GetShaderLocation(*(Shader *)shader, uniformName);
}

// Get shader attribute location
inline int GetShaderLocationAttrib(void *shader, char *attribName)
{
    return _GetShaderLocationAttrib(*(Shader *)shader, attribName);
}

// Set shader uniform value
inline void SetShaderValue(void *shader, int locIndex, uintptr_t value, int uniformType)
{
    _SetShaderValue(*(Shader *)shader, locIndex, (void *)value, uniformType);
}

// Set shader uniform value vector
inline void SetShaderValueV(void *shader, int locIndex, uintptr_t value, int uniformType, int count)
{
    _SetShaderValueV(*(Shader *)shader, locIndex, (void *)value, uniformType, count);
}

// Set shader uniform value (matrix 4x4)
inline void SetShaderValueMatrix(void *shader, int locIndex, void *mat)
{
    _SetShaderValueMatrix(*(Shader *)shader, locIndex, *(Matrix *)mat);
}

// Set shader uniform value for texture (sampler2d)
inline void SetShaderValueTexture(void *shader, int locIndex, void *texture)
{
    _SetShaderValueTexture(*(Shader *)shader, locIndex, *(Texture *)texture);
}

// Unload shader from GPU memory (VRAM)
inline void UnloadShader(void *shader)
{
    _UnloadShader(*(Shader *)shader);
}

// Get a ray trace from mouse position
inline void GetMouseRay(void *mousePosition, void *camera, void *retVal)
{
    *(Ray *)retVal = _GetMouseRay(*(Vector2 *)mousePosition, *(Camera3D *)camera);
}

// Get camera transform matrix (view matrix)
inline void GetCameraMatrix(void *camera, void *retVal)
{
    *(Matrix *)retVal = _GetCameraMatrix(*(Camera3D *)camera);
}

// Get camera 2d transform matrix
inline void GetCameraMatrix2D(void *camera, void *retVal)
{
    *(Matrix *)retVal = _GetCameraMatrix2D(*(Camera2D *)camera);
}

// Get the screen space position for a 3d world space position
inline void GetWorldToScreen(void *position, void *camera, void *retVal)
{
    *(Vector2 *)retVal = _GetWorldToScreen(*(Vector3 *)position, *(Camera3D *)camera);
}

// Get the world space position for a 2d camera screen space position
inline void GetScreenToWorld2D(void *position, void *camera, void *retVal)
{
    *(Vector2 *)retVal = _GetScreenToWorld2D(*(Vector2 *)position, *(Camera2D *)camera);
}

// Get size position for a 3d world space position
inline void GetWorldToScreenEx(void *position, void *camera, int width, int height, void *retVal)
{
    *(Vector2 *)retVal = _GetWorldToScreenEx(*(Vector3 *)position, *(Camera3D *)camera, width, height);
}

// Get the screen space position for a 2d camera world space position
inline void GetWorldToScreen2D(void *position, void *camera, void *retVal)
{
    *(Vector2 *)retVal = _GetWorldToScreen2D(*(Vector2 *)position, *(Camera2D *)camera);
}

// Set target FPS (maximum)
inline void SetTargetFPS(int fps)
{
    _SetTargetFPS(fps);
}

// Get time in seconds for last frame drawn (delta time)
inline float GetFrameTime()
{
    return _GetFrameTime();
}

// Get elapsed time in seconds since InitWindow()
inline double GetTime()
{
    return _GetTime();
}

// Get current FPS
inline int GetFPS()
{
    return _GetFPS();
}

// Swap back buffer with front buffer (screen drawing)
inline void SwapScreenBuffer()
{
    _SwapScreenBuffer();
}

// Register all input events
inline void PollInputEvents()
{
    _PollInputEvents();
}

// Wait for some time (halt program execution)
inline void WaitTime(double seconds)
{
    _WaitTime(seconds);
}

// Set the seed for the random number generator
inline void SetRandomSeed(unsigned int seed)
{
    _SetRandomSeed(seed);
}

// Get a random value between min and max (both included)
inline int GetRandomValue(int min, int max)
{
    return _GetRandomValue(min, max);
}

// Load random values sequence, no values repeated
inline void *LoadRandomSequence(unsigned int count, int min, int max)
{
    return _LoadRandomSequence(count, min, max);
}

// Unload random values sequence
inline void UnloadRandomSequence(void *sequence)
{
    _UnloadRandomSequence((int *)sequence);
}

// Takes a screenshot of current screen (filename extension defines format)
inline void TakeScreenshot(char *fileName)
{
    _TakeScreenshot(fileName);
}

// Setup init configuration flags (view FLAGS)
inline void SetConfigFlags(unsigned int flags)
{
    _SetConfigFlags(flags);
}

// Open URL with default system browser (if available)
inline void OpenURL(char *url)
{
    _OpenURL(url);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text)
{
    _TraceLog(logLevel, text);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text, char *s)
{
    _TraceLog(logLevel, text, s);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text, int32_t i)
{
    _TraceLog(logLevel, text, i);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text, int64_t i)
{
    _TraceLog(logLevel, text, i);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text, float f)
{
    _TraceLog(logLevel, text, f);
}

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
inline void TraceLog(int logLevel, char *text, double d)
{
    _TraceLog(logLevel, text, d);
}

// Set the current threshold (minimum) log level
inline void SetTraceLogLevel(int logLevel)
{
    _SetTraceLogLevel(logLevel);
}

// Internal memory allocator
inline void *MemAlloc(unsigned int size)
{
    return _MemAlloc(size);
}

// Internal memory reallocator
inline void *MemRealloc(uintptr_t ptr, unsigned int size)
{
    return _MemRealloc((void *)ptr, size);
}

// Internal memory free
inline void RMemFree(uintptr_t ptr)
{
    _MemFree((void *)ptr);
}

// Set custom trace log
inline void SetTraceLogCallback(void *callback)
{
    _SetTraceLogCallback((TraceLogCallback)callback);
}

// Set custom file binary data loader
inline void SetLoadFileDataCallback(void *callback)
{
    _SetLoadFileDataCallback((LoadFileDataCallback)callback);
}

// Set custom file binary data saver
inline void SetSaveFileDataCallback(void *callback)
{
    _SetSaveFileDataCallback((SaveFileDataCallback)callback);
}

// Set custom file text data loader
inline void SetLoadFileTextCallback(void *callback)
{
    _SetLoadFileTextCallback((LoadFileTextCallback)callback);
}

// Set custom file text data saver
inline void SetSaveFileTextCallback(void *callback)
{
    _SetSaveFileTextCallback((SaveFileTextCallback)callback);
}

// Load file data as byte array (read)
inline void *LoadFileData(char *fileName, void *dataSize)
{
    return _LoadFileData(fileName, (int *)dataSize);
}

// Unload file data allocated by LoadFileData()
inline void UnloadFileData(uintptr_t data)
{
    _UnloadFileData((unsigned char *)data);
}

// Save data to file from byte array (write), returns true on success
inline qb_bool SaveFileData(char *fileName, uintptr_t data, int dataSize)
{
    return TO_QB_BOOL(_SaveFileData(fileName, (void *)data, dataSize));
}

// Export data to code (.h), returns true on success
inline qb_bool ExportDataAsCode(uintptr_t data, int dataSize, char *fileName)
{
    return TO_QB_BOOL(_ExportDataAsCode((unsigned char *)data, dataSize, fileName));
}

// Load text data from file (read), returns a '\\0' terminated string
inline void *LoadFileText(char *fileName)
{
    return _LoadFileText(fileName);
}

// Unload file text data allocated by LoadFileText()
inline void UnloadFileText(uintptr_t text)
{
    _UnloadFileText((char *)text);
}

// Save text data to file (write), string must be '\0' terminated, returns true on success
inline qb_bool SaveFileText(char *fileName, char *text)
{
    return TO_QB_BOOL(_SaveFileText(fileName, text));
}

// Check if file exists
inline qb_bool RFileExists(char *fileName)
{
    return TO_QB_BOOL(_FileExists(fileName));
}

// Check if a directory path exists
inline qb_bool DirectoryExists(char *dirPath)
{
    return TO_QB_BOOL(_DirectoryExists(dirPath));
}

// Check file extension (including point: .png, .wav)
inline qb_bool IsFileExtension(char *fileName, char *ext)
{
    return TO_QB_BOOL(_IsFileExtension(fileName, ext));
}

// Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
inline int GetFileLength(char *fileName)
{
    return _GetFileLength(fileName);
}

// Get pointer to extension for a filename string (includes dot: '.png')
inline const char *GetFileExtension(char *fileName)
{
    return _GetFileExtension(fileName);
}

// Get pointer to filename for a path string
inline const char *GetFileName(char *filePath)
{
    return _GetFileName(filePath);
}

// Get filename string without extension (uses static string)
inline const char *GetFileNameWithoutExt(char *filePath)
{
    return _GetFileNameWithoutExt(filePath);
}

// Get full path for a given fileName with path (uses static string)
inline const char *GetDirectoryPath(char *filePath)
{
    return _GetDirectoryPath(filePath);
}

// Get previous directory path for a given path (uses static string)
inline const char *GetPrevDirectoryPath(char *dirPath)
{
    return _GetPrevDirectoryPath(dirPath);
}

// Get current working directory (uses static string)
inline const char *GetWorkingDirectory()
{
    return _GetWorkingDirectory();
}

// Get the directory of the running application (uses static string)
inline const char *GetApplicationDirectory()
{
    return _GetApplicationDirectory();
}

// Change working directory, return true on success
inline qb_bool ChangeDirectory(char *dir)
{
    return TO_QB_BOOL(_ChangeDirectory(dir));
}

// Check if a given path is a file or a directory
inline qb_bool IsPathFile(char *path)
{
    return TO_QB_BOOL(_IsPathFile(path));
}

// Load directory filepaths
inline void LoadDirectoryFiles(char *dirPath, void *retVal)
{
    *(FilePathList *)retVal = _LoadDirectoryFiles(dirPath);
}

// Load directory filepaths with extension filtering and recursive directory scan
inline void LoadDirectoryFilesEx(char *basePath, char *filter, bool scanSubdirs, void *retVal)
{
    *(FilePathList *)retVal = _LoadDirectoryFilesEx(basePath, filter, scanSubdirs);
}

// Unload filepaths
inline void UnloadDirectoryFiles(void *files)
{
    _UnloadDirectoryFiles(*(FilePathList *)files);
}

// Check if a file has been dropped into window
inline qb_bool IsFileDropped()
{
    return TO_QB_BOOL(_IsFileDropped());
}

// Load dropped filepaths
inline void LoadDroppedFiles(void *retVal)
{
    *(FilePathList *)retVal = _LoadDroppedFiles();
}

// Unload dropped filepaths
inline void UnloadDroppedFiles(void *files)
{
    _UnloadDroppedFiles(*(FilePathList *)files);
}

// Get file modification time (last write time)
inline long GetFileModTime(char *fileName)
{
    return _GetFileModTime(fileName);
}

// Compress data (DEFLATE algorithm), memory must be MemFree()
inline void *CompressData(char *data, int dataSize, int *compDataSize)
{
    return _CompressData((unsigned char *)data, dataSize, compDataSize);
}

// Decompress data (DEFLATE algorithm), memory must be MemFree()
inline void *DecompressData(char *compData, int compDataSize, int *dataSize)
{
    return _DecompressData((unsigned char *)compData, compDataSize, dataSize);
}

// Encode data to Base64 string, memory must be MemFree()
inline void *EncodeDataBase64(char *data, int dataSize, int *outputSize)
{
    return _EncodeDataBase64((unsigned char *)data, dataSize, outputSize);
}

// Decode Base64 string data, memory must be MemFree()
inline void *DecodeDataBase64(char *data, int *outputSize)
{
    return _DecodeDataBase64((unsigned char *)data, outputSize);
}

// Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
inline void LoadAutomationEventList(char *fileName, void *retVal)
{
    *(AutomationEventList *)retVal = _LoadAutomationEventList(fileName);
}

// Unload automation events list from file
inline void UnloadAutomationEventList(void *list)
{
    _UnloadAutomationEventList((AutomationEventList *)list);
}

// Export automation events list as text file
inline qb_bool ExportAutomationEventList(void *list, char *fileName)
{
    return TO_QB_BOOL(_ExportAutomationEventList(*(AutomationEventList *)list, fileName));
}

// Set automation event list to record to
inline void SetAutomationEventList(void *list)
{
    _SetAutomationEventList((AutomationEventList *)list);
}

// Set automation event internal base frame to start recording
inline void SetAutomationEventBaseFrame(int frame)
{
    _SetAutomationEventBaseFrame(frame);
}

// Start recording automation events (AutomationEventList must be set)
inline void StartAutomationEventRecording()
{
    _StartAutomationEventRecording();
}

// Stop recording automation events
inline void StopAutomationEventRecording()
{
    _StopAutomationEventRecording();
}

// Play a recorded automation event
inline void PlayAutomationEvent(void *event)
{
    _PlayAutomationEvent(*(AutomationEvent *)event);
}

// Check if a key has been pressed once
inline qb_bool IsKeyPressed(int key)
{
    return TO_QB_BOOL(_IsKeyPressed(key));
}

// Check if a key has been pressed again (Only PLATFORM_DESKTOP)
inline qb_bool IsKeyPressedRepeat(int key)
{
    return TO_QB_BOOL(_IsKeyPressedRepeat(key));
}

// Check if a key is being pressed
inline qb_bool IsKeyDown(int key)
{
    return TO_QB_BOOL(_IsKeyDown(key));
}

// Check if a key has been released once
inline qb_bool IsKeyReleased(int key)
{
    return TO_QB_BOOL(_IsKeyReleased(key));
}

// Check if a key is NOT being pressed
inline qb_bool IsKeyUp(int key)
{
    return TO_QB_BOOL(_IsKeyUp(key));
}

// Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
inline int GetKeyPressed()
{
    return _GetKeyPressed();
}

// Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
inline int GetCharPressed()
{
    return _GetCharPressed();
}

// Set a custom key to exit program (default is ESC)
inline void SetExitKey(int key)
{
    _SetExitKey(key);
}

// Check if a gamepad is available
inline qb_bool IsGamepadAvailable(int gamepad)
{
    return TO_QB_BOOL(_IsGamepadAvailable(gamepad));
}

// Get gamepad internal name id
inline const char *GetGamepadName(int gamepad)
{
    return _GetGamepadName(gamepad);
}

// Check if a gamepad button has been pressed once
inline qb_bool IsGamepadButtonPressed(int gamepad, int button)
{
    return TO_QB_BOOL(_IsGamepadButtonPressed(gamepad, button));
}

// Check if a gamepad button is being pressed
inline qb_bool IsGamepadButtonDown(int gamepad, int button)
{
    return TO_QB_BOOL(_IsGamepadButtonDown(gamepad, button));
}

// Check if a gamepad button has been released once
inline qb_bool IsGamepadButtonReleased(int gamepad, int button)
{
    return TO_QB_BOOL(_IsGamepadButtonReleased(gamepad, button));
}

// Check if a gamepad button is NOT being pressed
inline qb_bool IsGamepadButtonUp(int gamepad, int button)
{
    return TO_QB_BOOL(_IsGamepadButtonUp(gamepad, button));
}

// Get the last gamepad button pressed
inline int GetGamepadButtonPressed()
{
    return _GetGamepadButtonPressed();
}

// Get gamepad axis count for a gamepad
inline int GetGamepadAxisCount(int gamepad)
{
    return _GetGamepadAxisCount(gamepad);
}

// Get axis movement value for a gamepad axis
inline float GetGamepadAxisMovement(int gamepad, int axis)
{
    return _GetGamepadAxisMovement(gamepad, axis);
}

// Set internal gamepad mappings (SDL_GameControllerDB)
inline int SetGamepadMappings(char *mappings)
{
    return _SetGamepadMappings(mappings);
}

// Check if a mouse button has been pressed once
inline qb_bool IsMouseButtonPressed(int button)
{
    return TO_QB_BOOL(_IsMouseButtonPressed(button));
}

// Check if a mouse button is being pressed
inline qb_bool IsMouseButtonDown(int button)
{
    return TO_QB_BOOL(_IsMouseButtonDown(button));
}

// Check if a mouse button has been released once
inline qb_bool IsMouseButtonReleased(int button)
{
    return TO_QB_BOOL(_IsMouseButtonReleased(button));
}

// Check if a mouse button is NOT being pressed
inline qb_bool IsMouseButtonUp(int button)
{
    return TO_QB_BOOL(_IsMouseButtonUp(button));
}

// Get mouse position X
inline int GetMouseX()
{
    return _GetMouseX();
}

// Get mouse position Y
inline int GetMouseY()
{
    return _GetMouseY();
}

// Get mouse position XY
inline void GetMousePosition(void *retVal)
{
    *(Vector2 *)retVal = _GetMousePosition();
}

// Get mouse delta between frames
inline void GetMouseDelta(void *retVal)
{
    *(Vector2 *)retVal = _GetMouseDelta();
}

// Set mouse position XY
inline void SetMousePosition(int x, int y)
{
    _SetMousePosition(x, y);
}

// Set mouse offset
inline void SetMouseOffset(int offsetX, int offsetY)
{
    _SetMouseOffset(offsetX, offsetY);
}

// Set mouse scaling
inline void SetMouseScale(float scaleX, float scaleY)
{
    _SetMouseScale(scaleX, scaleY);
}

// Get mouse wheel movement for X or Y, whichever is larger
inline float GetMouseWheelMove()
{
    return _GetMouseWheelMove();
}

// Get mouse wheel movement for both X and Y
inline void GetMouseWheelMoveV(void *retVal)
{
    *(Vector2 *)retVal = _GetMouseWheelMoveV();
}

// Set mouse cursor
inline void SetMouseCursor(int cursor)
{
    _SetMouseCursor(cursor);
}

// Get touch position X for touch point 0 (relative to screen size)
inline int GetTouchX()
{
    return _GetTouchX();
}

// Get touch position Y for touch point 0 (relative to screen size)
inline int GetTouchY()
{
    return _GetTouchY();
}

// Get touch position XY for a touch point index (relative to screen size)
inline void GetTouchPosition(int index, void *retVal)
{
    *(Vector2 *)retVal = _GetTouchPosition(index);
}

// Get touch point identifier for given index
inline int GetTouchPointId(int index)
{
    return _GetTouchPointId(index);
}

// Get number of touch points
inline int GetTouchPointCount()
{
    return _GetTouchPointCount();
}

// Enable a set of gestures using flags
inline void SetGesturesEnabled(unsigned int flags)
{
    _SetGesturesEnabled(flags);
}

// Check if a gesture have been detected
inline qb_bool IsGestureDetected(unsigned int gesture)
{
    return TO_QB_BOOL(_IsGestureDetected(gesture));
}

// Get latest detected gesture
inline int GetGestureDetected()
{
    return _GetGestureDetected();
}

// Get gesture hold time in milliseconds
inline float GetGestureHoldDuration()
{
    return _GetGestureHoldDuration();
}

// Get gesture drag vector
inline void GetGestureDragVector(void *retVal)
{
    *(Vector2 *)retVal = _GetGestureDragVector();
}

// Get gesture drag angle
inline float GetGestureDragAngle()
{
    return _GetGestureDragAngle();
}

// Get gesture pinch delta
inline void GetGesturePinchVector(void *retVal)
{
    *(Vector2 *)retVal = _GetGesturePinchVector();
}

// Get gesture pinch angle
inline float GetGesturePinchAngle()
{
    return _GetGesturePinchAngle();
}

// Update camera position for selected mode
inline void UpdateCamera(void *camera, int mode)
{
    _UpdateCamera((Camera3D *)camera, mode);
}

// Update camera movement/rotation
inline void UpdateCameraPro(void *camera, void *movement, void *rotation, float zoom)
{
    _UpdateCameraPro((Camera3D *)camera, *(Vector3 *)movement, *(Vector3 *)rotation, zoom);
}

// Set texture and rectangle to be used on shapes drawing
inline void SetShapesTexture(void *texture, void *source)
{
    _SetShapesTexture(*(Texture *)texture, *(RRectangle *)source);
}

// Draw a pixel
inline void DrawPixel(int posX, int posY, uint32_t color)
{
    _DrawPixel(posX, posY, color);
}

// Draw a pixel (Vector version)
inline void DrawPixelV(void *position, uint32_t color)
{
    _DrawPixelV(*(Vector2 *)position, color);
}

// Draw a line
inline void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, uint32_t color)
{
    _DrawLine(startPosX, startPosY, endPosX, endPosY, color);
}

// Draw a line (using gl lines)
inline void DrawLineV(void *startPos, void *endPos, uint32_t color)
{
    _DrawLineV(*(Vector2 *)startPos, *(Vector2 *)endPos, color);
}

// Draw a line (using triangles/quads)
inline void DrawLineEx(void *startPos, void *endPos, float thick, uint32_t color)
{
    _DrawLineEx(*(Vector2 *)startPos, *(Vector2 *)endPos, thick, color);
}

// Draw lines sequence (using gl lines)
inline void DrawLineStrip(void *points, int pointCount, uint32_t color)
{
    _DrawLineStrip((Vector2 *)points, pointCount, color);
}

// Draw line segment cubic-bezier in-out interpolation
inline void DrawLineBezier(void *startPos, void *endPos, float thick, uint32_t color)
{
    _DrawLineBezier(*(Vector2 *)startPos, *(Vector2 *)endPos, thick, color);
}

// Draw a color-filled circle
inline void DrawCircle(int centerX, int centerY, float radius, uint32_t color)
{
    _DrawCircle(centerX, centerY, radius, color);
}

// Draw a piece of a circle
inline void DrawCircleSector(void *center, float radius, float startAngle, float endAngle, int segments, uint32_t color)
{
    _DrawCircleSector(*(Vector2 *)center, radius, startAngle, endAngle, segments, color);
}

// Draw circle sector outline
inline void DrawCircleSectorLines(void *center, float radius, float startAngle, float endAngle, int segments, uint32_t color)
{
    _DrawCircleSectorLines(*(Vector2 *)center, radius, startAngle, endAngle, segments, color);
}

// Draw a gradient-filled circle
inline void DrawCircleGradient(int centerX, int centerY, float radius, uint32_t color1, uint32_t color2)
{
    _DrawCircleGradient(centerX, centerY, radius, color1, color2);
}

// Draw a color-filled circle (Vector version)
inline void DrawCircleV(void *center, float radius, uint32_t color)
{
    _DrawCircleV(*(Vector2 *)center, radius, color);
}

// Draw circle outline
inline void DrawCircleLines(int centerX, int centerY, float radius, uint32_t color)
{
    _DrawCircleLines(centerX, centerY, radius, color);
}

// Draw circle outline (Vector version)
inline void DrawCircleLinesV(void *center, float radius, uint32_t color)
{
    _DrawCircleLinesV(*(Vector2 *)center, radius, color);
}

// Draw ellipse
inline void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, uint32_t color)
{
    _DrawEllipse(centerX, centerY, radiusH, radiusV, color);
}

// Draw ellipse outline
inline void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, uint32_t color)
{
    _DrawEllipseLines(centerX, centerY, radiusH, radiusV, color);
}

// Draw ring
inline void DrawRing(void *center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, uint32_t color)
{
    _DrawRing(*(Vector2 *)center, innerRadius, outerRadius, startAngle, endAngle, segments, color);
}

// Draw ring outline
inline void DrawRingLines(void *center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, uint32_t color)
{
    _DrawRingLines(*(Vector2 *)center, innerRadius, outerRadius, startAngle, endAngle, segments, color);
}

// Draw a color-filled rectangle
inline void DrawRectangle(int posX, int posY, int width, int height, uint32_t color)
{
    _DrawRectangle(posX, posY, width, height, color);
}

// Draw a color-filled rectangle (Vector version)
inline void DrawRectangleV(void *position, void *size, uint32_t color)
{
    _DrawRectangleV(*(Vector2 *)position, *(Vector2 *)size, color);
}

// Draw a color-filled rectangle
inline void DrawRectangleRec(void *rec, uint32_t color)
{
    _DrawRectangleRec(*(RRectangle *)rec, color);
}

// Draw a color-filled rectangle with pro parameters
inline void DrawRectanglePro(void *rec, void *origin, float rotation, uint32_t color)
{
    _DrawRectanglePro(*(RRectangle *)rec, *(Vector2 *)origin, rotation, color);
}

// Draw a vertical-gradient-filled rectangle
inline void DrawRectangleGradientV(int posX, int posY, int width, int height, uint32_t color1, uint32_t color2)
{
    _DrawRectangleGradientV(posX, posY, width, height, color1, color2);
}

// Draw a horizontal-gradient-filled rectangle
inline void DrawRectangleGradientH(int posX, int posY, int width, int height, uint32_t color1, uint32_t color2)
{
    _DrawRectangleGradientH(posX, posY, width, height, color1, color2);
}

// Draw a gradient-filled rectangle with custom vertex colors
inline void DrawRectangleGradientEx(void *rec, uint32_t col1, uint32_t col2, uint32_t col3, uint32_t col4)
{
    _DrawRectangleGradientEx(*(RRectangle *)rec, col1, col2, col3, col4);
}

// Draw rectangle outline
inline void DrawRectangleLines(int posX, int posY, int width, int height, uint32_t color)
{
    _DrawRectangleLines(posX, posY, width, height, color);
}

// Draw rectangle outline with extended parameters
inline void DrawRectangleLinesEx(void *rec, float lineThick, uint32_t color)
{
    _DrawRectangleLinesEx(*(RRectangle *)rec, lineThick, color);
}

// Draw rectangle with rounded edges
inline void DrawRectangleRounded(void *rec, float roundness, int segments, uint32_t color)
{
    _DrawRectangleRounded(*(RRectangle *)rec, roundness, segments, color);
}

// Draw rectangle with rounded edges outline
inline void DrawRectangleRoundedLines(void *rec, float roundness, int segments, float lineThick, uint32_t color)
{
    _DrawRectangleRoundedLines(*(RRectangle *)rec, roundness, segments, lineThick, color);
}

// Draw a color-filled triangle (vertex in counter-clockwise order!)
inline void DrawTriangle(void *v1, void *v2, void *v3, uint32_t color)
{
    _DrawTriangle(*(Vector2 *)v1, *(Vector2 *)v2, *(Vector2 *)v3, color);
}

// Draw triangle outline (vertex in counter-clockwise order!)
inline void DrawTriangleLines(void *v1, void *v2, void *v3, uint32_t color)
{
    _DrawTriangleLines(*(Vector2 *)v1, *(Vector2 *)v2, *(Vector2 *)v3, color);
}

// Draw a triangle fan defined by points (first vertex is the center)
inline void DrawTriangleFan(void *points, int pointCount, uint32_t color)
{
    _DrawTriangleFan((Vector2 *)points, pointCount, color);
}

// Draw a triangle strip defined by points
inline void DrawTriangleStrip(void *points, int pointCount, uint32_t color)
{
    _DrawTriangleStrip((Vector2 *)points, pointCount, color);
}

// Draw a regular polygon (Vector version)
inline void DrawPoly(void *center, int sides, float radius, float rotation, uint32_t color)
{
    _DrawPoly(*(Vector2 *)center, sides, radius, rotation, color);
}

// Draw a polygon outline of n sides
inline void DrawPolyLines(void *center, int sides, float radius, float rotation, uint32_t color)
{
    _DrawPolyLines(*(Vector2 *)center, sides, radius, rotation, color);
}

// Draw a polygon outline of n sides with extended parameters
inline void DrawPolyLinesEx(void *center, int sides, float radius, float rotation, float lineThick, uint32_t color)
{
    _DrawPolyLinesEx(*(Vector2 *)center, sides, radius, rotation, lineThick, color);
}

// Draw spline: Linear, minimum 2 points
inline void DrawSplineLinear(void *points, int pointCount, float thick, uint32_t color)
{
    _DrawSplineLinear((Vector2 *)points, pointCount, thick, color);
}

// Draw spline: B-Spline, minimum 4 points
inline void DrawSplineBasis(void *points, int pointCount, float thick, uint32_t color)
{
    _DrawSplineBasis((Vector2 *)points, pointCount, thick, color);
}

// Draw spline: Catmull-Rom, minimum 4 points
inline void DrawSplineCatmullRom(void *points, int pointCount, float thick, uint32_t color)
{
    _DrawSplineCatmullRom((Vector2 *)points, pointCount, thick, color);
}

// Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
inline void DrawSplineBezierQuadratic(void *points, int pointCount, float thick, uint32_t color)
{
    _DrawSplineBezierQuadratic((Vector2 *)points, pointCount, thick, color);
}

// Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
inline void DrawSplineBezierCubic(void *points, int pointCount, float thick, uint32_t color)
{
    _DrawSplineBezierCubic((Vector2 *)points, pointCount, thick, color);
}

// Draw spline segment: Linear, 2 points
inline void DrawSplineSegmentLinear(void *p1, void *p2, float thick, uint32_t color)
{
    _DrawSplineSegmentLinear(*(Vector2 *)p1, *(Vector2 *)p2, thick, color);
}

// Draw spline segment: B-Spline, 4 points
inline void DrawSplineSegmentBasis(void *p1, void *p2, void *p3, void *p4, float thick, uint32_t color)
{
    _DrawSplineSegmentBasis(*(Vector2 *)p1, *(Vector2 *)p2, *(Vector2 *)p3, *(Vector2 *)p4, thick, color);
}

// Draw spline segment: Catmull-Rom, 4 points
inline void DrawSplineSegmentCatmullRom(void *p1, void *p2, void *p3, void *p4, float thick, uint32_t color)
{
    _DrawSplineSegmentCatmullRom(*(Vector2 *)p1, *(Vector2 *)p2, *(Vector2 *)p3, *(Vector2 *)p4, thick, color);
}

// Draw spline segment: Quadratic Bezier, 2 points, 1 control point
inline void DrawSplineSegmentBezierQuadratic(void *p1, void *c2, void *p3, float thick, uint32_t color)
{
    _DrawSplineSegmentBezierQuadratic(*(Vector2 *)p1, *(Vector2 *)c2, *(Vector2 *)p3, thick, color);
}

// Draw spline segment: Cubic Bezier, 2 points, 2 control points
inline void DrawSplineSegmentBezierCubic(void *p1, void *c2, void *c3, void *p4, float thick, uint32_t color)
{
    _DrawSplineSegmentBezierCubic(*(Vector2 *)p1, *(Vector2 *)c2, *(Vector2 *)c3, *(Vector2 *)p4, thick, color);
}

// Get (evaluate) spline point: Linear
inline void GetSplinePointLinear(void *startPos, void *endPos, float t, void *retVal)
{
    *(Vector2 *)retVal = _GetSplinePointLinear(*(Vector2 *)startPos, *(Vector2 *)endPos, t);
}

// Get (evaluate) spline point: B-Spline
inline void GetSplinePointBasis(void *p1, void *p2, void *p3, void *p4, float t, void *retVal)
{
    *(Vector2 *)retVal = _GetSplinePointBasis(*(Vector2 *)p1, *(Vector2 *)p2, *(Vector2 *)p3, *(Vector2 *)p4, t);
}

// Get (evaluate) spline point: Catmull-Rom
inline void GetSplinePointCatmullRom(void *p1, void *p2, void *p3, void *p4, float t, void *retVal)
{
    *(Vector2 *)retVal = _GetSplinePointCatmullRom(*(Vector2 *)p1, *(Vector2 *)p2, *(Vector2 *)p3, *(Vector2 *)p4, t);
}

// Get (evaluate) spline point: Quadratic Bezier
inline void GetSplinePointBezierQuad(void *p1, void *c2, void *p3, float t, void *retVal)
{
    *(Vector2 *)retVal = _GetSplinePointBezierQuad(*(Vector2 *)p1, *(Vector2 *)c2, *(Vector2 *)p3, t);
}

// Get (evaluate) spline point: Cubic Bezier
inline void GetSplinePointBezierCubic(void *p1, void *c2, void *c3, void *p4, float t, void *retVal)
{
    *(Vector2 *)retVal = _GetSplinePointBezierCubic(*(Vector2 *)p1, *(Vector2 *)c2, *(Vector2 *)c3, *(Vector2 *)p4, t);
}

// Check collision between two rectangles
inline qb_bool CheckCollisionRecs(void *rec1, void *rec2)
{
    return TO_QB_BOOL(_CheckCollisionRecs(*(RRectangle *)rec1, *(RRectangle *)rec2));
}

// Check collision between two circles
inline qb_bool CheckCollisionCircles(void *center1, float radius1, void *center2, float radius2)
{
    return TO_QB_BOOL(_CheckCollisionCircles(*(Vector2 *)center1, radius1, *(Vector2 *)center2, radius2));
}

// Check collision between circle and rectangle
inline qb_bool CheckCollisionCircleRec(void *center, float radius, void *rec)
{
    return TO_QB_BOOL(_CheckCollisionCircleRec(*(Vector2 *)center, radius, *(RRectangle *)rec));
}

// Check if point is inside rectangle
inline qb_bool CheckCollisionPointRec(void *point, void *rec)
{
    return TO_QB_BOOL(_CheckCollisionPointRec(*(Vector2 *)point, *(RRectangle *)rec));
}

// Check if point is inside circle
inline qb_bool CheckCollisionPointCircle(void *point, void *center, float radius)
{
    return TO_QB_BOOL(_CheckCollisionPointCircle(*(Vector2 *)point, *(Vector2 *)center, radius));
}

// Check if point is inside a triangle
inline qb_bool CheckCollisionPointTriangle(void *point, void *p1, void *p2, void *p3)
{
    return TO_QB_BOOL(_CheckCollisionPointTriangle(*(Vector2 *)point, *(Vector2 *)p1, *(Vector2 *)p2, *(Vector2 *)p3));
}

// Check if point is within a polygon described by array of vertices
inline qb_bool CheckCollisionPointPoly(void *point, void *points, int pointCount)
{
    return TO_QB_BOOL(_CheckCollisionPointPoly(*(Vector2 *)point, (Vector2 *)points, pointCount));
}

// Check the collision between two lines defined by two points each, returns collision point by reference
inline qb_bool CheckCollisionLines(void *startPos1, void *endPos1, void *startPos2, void *endPos2, void *collisionPoint)
{
    return TO_QB_BOOL(_CheckCollisionLines(*(Vector2 *)startPos1, *(Vector2 *)endPos1, *(Vector2 *)startPos2, *(Vector2 *)endPos2, (Vector2 *)collisionPoint));
}

// Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
inline qb_bool CheckCollisionPointLine(void *point, void *p1, void *p2, int threshold)
{
    return TO_QB_BOOL(_CheckCollisionPointLine(*(Vector2 *)point, *(Vector2 *)p1, *(Vector2 *)p2, threshold));
}

// Get collision rectangle for two rectangles collision
inline void GetCollisionRec(void *rec1, void *rec2, void *retVal)
{
    *(RRectangle *)retVal = _GetCollisionRec(*(RRectangle *)rec1, *(RRectangle *)rec2);
}

// Load image from file into CPU memory (RAM)
inline void RLoadImage(char *fileName, void *retVal)
{
    *(Image *)retVal = _LoadImage(fileName);
}

// Load image from RAW file data
inline void LoadImageRaw(char *fileName, int width, int height, int format, int headerSize, void *retVal)
{
    *(Image *)retVal = _LoadImageRaw(fileName, width, height, format, headerSize);
}

// Load image from SVG file data or string with specified size
inline void LoadImageSvg(char *fileNameOrString, int width, int height, void *retVal)
{
    *(Image *)retVal = _LoadImageSvg(fileNameOrString, width, height);
}

// Load image sequence from file (frames appended to image.data)
inline void LoadImageAnim(char *fileName, void *frames, void *retVal)
{
    *(Image *)retVal = _LoadImageAnim(fileName, (int *)frames);
}

// Load image from memory buffer, fileType refers to extension: i.e. '.png'
inline void LoadImageFromMemory(char *fileType, uintptr_t fileData, int dataSize, void *retVal)
{
    *(Image *)retVal = _LoadImageFromMemory(fileType, (unsigned char *)fileData, dataSize);
}

// Load image from GPU texture data
inline void LoadImageFromTexture(void *texture, void *retVal)
{
    *(Image *)retVal = _LoadImageFromTexture(*(Texture *)texture);
}

// Load image from screen buffer and (screenshot)
inline void LoadImageFromScreen(void *retVal)
{
    *(Image *)retVal = _LoadImageFromScreen();
}

// Check if an image is ready
inline qb_bool IsImageReady(void *image)
{
    return TO_QB_BOOL(_IsImageReady(*(Image *)image));
}

// Unload image from CPU memory (RAM)
inline void UnloadImage(void *image)
{
    _UnloadImage(*(Image *)image);
}

// Export image data to file, returns true on success
inline qb_bool ExportImage(void *image, char *fileName)
{
    return TO_QB_BOOL(_ExportImage(*(Image *)image, fileName));
}

// Export image to memory buffer
inline void *ExportImageToMemory(void *image, char *fileType, void *fileSize)
{
    return _ExportImageToMemory(*(Image *)image, fileType, (int *)fileSize);
}

// Export image as code file defining an array of bytes, returns true on success
inline qb_bool ExportImageAsCode(void *image, char *fileName)
{
    return TO_QB_BOOL(_ExportImageAsCode(*(Image *)image, fileName));
}

// Generate image: plain color
inline void GenImageColor(int width, int height, uint32_t color, void *retVal)
{
    *(Image *)retVal = _GenImageColor(width, height, color);
}

// Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
inline void GenImageGradientLinear(int width, int height, int direction, uint32_t start, uint32_t end, void *retVal)
{
    *(Image *)retVal = _GenImageGradientLinear(width, height, direction, start, end);
}

// Generate image: radial gradient
inline void GenImageGradientRadial(int width, int height, float density, uint32_t inner, uint32_t outer, void *retVal)
{
    *(Image *)retVal = _GenImageGradientRadial(width, height, density, inner, outer);
}

// Generate image: square gradient
inline void GenImageGradientSquare(int width, int height, float density, uint32_t inner, uint32_t outer, void *retVal)
{
    *(Image *)retVal = _GenImageGradientSquare(width, height, density, inner, outer);
}

// Generate image: checked
inline void GenImageChecked(int width, int height, int checksX, int checksY, uint32_t col1, uint32_t col2, void *retVal)
{
    *(Image *)retVal = _GenImageChecked(width, height, checksX, checksY, col1, col2);
}

// Generate image: white noise
inline void GenImageWhiteNoise(int width, int height, float factor, void *retVal)
{
    *(Image *)retVal = _GenImageWhiteNoise(width, height, factor);
}

// Generate image: perlin noise
inline void GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale, void *retVal)
{
    *(Image *)retVal = _GenImagePerlinNoise(width, height, offsetX, offsetY, scale);
}

// Generate image: cellular algorithm, bigger tileSize means bigger cells
inline void GenImageCellular(int width, int height, int tileSize, void *retVal)
{
    *(Image *)retVal = _GenImageCellular(width, height, tileSize);
}

// Generate image: grayscale image from text data
inline void GenImageText(int width, int height, char *text, void *retVal)
{
    *(Image *)retVal = _GenImageText(width, height, text);
}

// Create an image duplicate (useful for transformations)
inline void ImageCopy(void *image, void *retVal)
{
    *(Image *)retVal = _ImageCopy(*(Image *)image);
}

// Create an image from another image piece
inline void ImageFromImage(void *image, void *rec, void *retVal)
{
    *(Image *)retVal = _ImageFromImage(*(Image *)image, *(RRectangle *)rec);
}

// Create an image from text (default font)
inline void ImageText(char *text, int fontSize, uint32_t color, void *retVal)
{
    *(Image *)retVal = _ImageText(text, fontSize, color);
}

// Create an image from text (custom sprite font)
inline void ImageTextEx(void *font, char *text, float fontSize, float spacing, uint32_t tint, void *retVal)
{
    *(Image *)retVal = _ImageTextEx(*(RFont *)font, text, fontSize, spacing, tint);
}

// Convert image data to desired format
inline void ImageFormat(void *image, int newFormat)
{
    _ImageFormat((Image *)image, newFormat);
}

// Convert image to POT (power-of-two)
inline void ImageToPOT(void *image, uint32_t fill)
{
    _ImageToPOT((Image *)image, fill);
}

// Crop an image to a defined rectangle
inline void ImageCrop(void *image, void *crop)
{
    _ImageCrop((Image *)image, *(RRectangle *)crop);
}

// Crop image depending on alpha value
inline void ImageAlphaCrop(void *image, float threshold)
{
    _ImageAlphaCrop((Image *)image, threshold);
}

// Clear alpha channel to desired color
inline void ImageAlphaClear(void *image, uint32_t color, float threshold)
{
    _ImageAlphaClear((Image *)image, color, threshold);
}

// Apply alpha mask to image
inline void ImageAlphaMask(void *image, void *alphaMask)
{
    _ImageAlphaMask((Image *)image, *(Image *)alphaMask);
}

// Premultiply alpha channel
inline void ImageAlphaPremultiply(void *image)
{
    _ImageAlphaPremultiply((Image *)image);
}

// Apply Gaussian blur using a box blur approximation
inline void ImageBlurGaussian(void *image, int blurSize)
{
    _ImageBlurGaussian((Image *)image, blurSize);
}

// Resize image (Bicubic scaling algorithm)
inline void ImageResize(void *image, int newWidth, int newHeight)
{
    _ImageResize((Image *)image, newWidth, newHeight);
}

// Resize image (Nearest-Neighbor scaling algorithm)
inline void ImageResizeNN(void *image, int newWidth, int newHeight)
{
    _ImageResizeNN((Image *)image, newWidth, newHeight);
}

// Resize canvas and fill with color
inline void ImageResizeCanvas(void *image, int newWidth, int newHeight, int offsetX, int offsetY, uint32_t fill)
{
    _ImageResizeCanvas((Image *)image, newWidth, newHeight, offsetX, offsetY, fill);
}

// Compute all mipmap levels for a provided image
inline void ImageMipmaps(void *image)
{
    _ImageMipmaps((Image *)image);
}

// Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
inline void ImageDither(void *image, int rBpp, int gBpp, int bBpp, int aBpp)
{
    _ImageDither((Image *)image, rBpp, gBpp, bBpp, aBpp);
}

// Flip image vertically
inline void ImageFlipVertical(void *image)
{
    _ImageFlipVertical((Image *)image);
}

// Flip image horizontally
inline void ImageFlipHorizontal(void *image)
{
    _ImageFlipHorizontal((Image *)image);
}

// Rotate image by input angle in degrees (-359 to 359)
inline void ImageRotate(void *image, int degrees)
{
    _ImageRotate((Image *)image, degrees);
}

// Rotate image clockwise 90deg
inline void ImageRotateCW(void *image)
{
    _ImageRotateCW((Image *)image);
}

// Rotate image counter-clockwise 90deg
inline void ImageRotateCCW(void *image)
{
    _ImageRotateCCW((Image *)image);
}

// Modify image color: tint
inline void ImageColorTint(void *image, uint32_t color)
{
    _ImageColorTint((Image *)image, color);
}

// Modify image color: invert
inline void ImageColorInvert(void *image)
{
    _ImageColorInvert((Image *)image);
}

// Modify image color: grayscale
inline void ImageColorGrayscale(void *image)
{
    _ImageColorGrayscale((Image *)image);
}

// Modify image color: contrast (-100 to 100)
inline void ImageColorContrast(void *image, float contrast)
{
    _ImageColorContrast((Image *)image, contrast);
}

// Modify image color: brightness (-255 to 255)
inline void ImageColorBrightness(void *image, int brightness)
{
    _ImageColorBrightness((Image *)image, brightness);
}

// Modify image color: replace color
inline void ImageColorReplace(void *image, uint32_t color, uint32_t replace)
{
    _ImageColorReplace((Image *)image, color, replace);
}

// Load color data from image as a Color array (RGBA - 32bit)
inline void *LoadImageColors(void *image)
{
    return _LoadImageColors(*(Image *)image);
}

// Load colors palette from image as a Color array (RGBA - 32bit)
inline void *LoadImagePalette(void *image, int maxPaletteSize, void *colorCount)
{
    return _LoadImagePalette(*(Image *)image, maxPaletteSize, (int *)colorCount);
}

// Unload color data loaded with LoadImageColors()
inline void UnloadImageColors(uintptr_t colors)
{
    _UnloadImageColors((uint32_t *)colors);
}

// Unload colors palette loaded with LoadImagePalette()
inline void UnloadImagePalette(uintptr_t colors)
{
    _UnloadImagePalette((uint32_t *)colors);
}

// Get image alpha border rectangle
inline void GetImageAlphaBorder(void *image, float threshold, void *retVal)
{
    *(RRectangle *)retVal = _GetImageAlphaBorder(*(Image *)image, threshold);
}

// Get image pixel color at (x, y) position
inline uint32_t GetImageColor(void *image, int x, int y)
{
    return _GetImageColor(*(Image *)image, x, y);
}

// Clear image background with given color
inline void ImageClearBackground(void *dst, uint32_t color)
{
    _ImageClearBackground((Image *)dst, color);
}

// Draw pixel within an image
inline void ImageDrawPixel(void *dst, int posX, int posY, uint32_t color)
{
    _ImageDrawPixel((Image *)dst, posX, posY, color);
}

// Draw pixel within an image (Vector version)
inline void ImageDrawPixelV(void *dst, void *position, uint32_t color)
{
    _ImageDrawPixelV((Image *)dst, *(Vector2 *)position, color);
}

// Draw line within an image
inline void ImageDrawLine(void *dst, int startPosX, int startPosY, int endPosX, int endPosY, uint32_t color)
{
    _ImageDrawLine((Image *)dst, startPosX, startPosY, endPosX, endPosY, color);
}

// Draw line within an image (Vector version)
inline void ImageDrawLineV(void *dst, void *start, void *end, uint32_t color)
{
    _ImageDrawLineV((Image *)dst, *(Vector2 *)start, *(Vector2 *)end, color);
}

// Draw a filled circle within an image
inline void ImageDrawCircle(void *dst, int centerX, int centerY, int radius, uint32_t color)
{
    _ImageDrawCircle((Image *)dst, centerX, centerY, radius, color);
}

// Draw a filled circle within an image (Vector version)
inline void ImageDrawCircleV(void *dst, void *center, int radius, uint32_t color)
{
    _ImageDrawCircleV((Image *)dst, *(Vector2 *)center, radius, color);
}

// Draw circle outline within an image
inline void ImageDrawCircleLines(void *dst, int centerX, int centerY, int radius, uint32_t color)
{
    _ImageDrawCircleLines((Image *)dst, centerX, centerY, radius, color);
}

// Draw circle outline within an image (Vector version)
inline void ImageDrawCircleLinesV(void *dst, void *center, int radius, uint32_t color)
{
    _ImageDrawCircleLinesV((Image *)dst, *(Vector2 *)center, radius, color);
}

// Draw rectangle within an image
inline void ImageDrawRectangle(void *dst, int posX, int posY, int width, int height, uint32_t color)
{
    _ImageDrawRectangle((Image *)dst, posX, posY, width, height, color);
}

// Draw rectangle within an image (Vector version)
inline void ImageDrawRectangleV(void *dst, void *position, void *size, uint32_t color)
{
    _ImageDrawRectangleV((Image *)dst, *(Vector2 *)position, *(Vector2 *)size, color);
}

// Draw rectangle within an image
inline void ImageDrawRectangleRec(void *dst, void *rec, uint32_t color)
{
    _ImageDrawRectangleRec((Image *)dst, *(RRectangle *)rec, color);
}

// Draw rectangle lines within an image
inline void ImageDrawRectangleLines(void *dst, void *rec, int thick, uint32_t color)
{
    _ImageDrawRectangleLines((Image *)dst, *(RRectangle *)rec, thick, color);
}

// Draw a source image within a destination image (tint applied to source)
inline void ImageDraw(void *dst, void *src, void *srcRec, void *dstRec, uint32_t tint)
{
    _ImageDraw((Image *)dst, *(Image *)src, *(RRectangle *)srcRec, *(RRectangle *)dstRec, tint);
}

// Draw text (using default font) within an image (destination)
inline void ImageDrawText(void *dst, char *text, int posX, int posY, int fontSize, uint32_t color)
{
    _ImageDrawText((Image *)dst, text, posX, posY, fontSize, color);
}

// Draw text (custom sprite font) within an image (destination)
inline void ImageDrawTextEx(void *dst, void *font, char *text, void *position, float fontSize, float spacing, uint32_t tint)
{
    _ImageDrawTextEx((Image *)dst, *(RFont *)font, text, *(Vector2 *)position, fontSize, spacing, tint);
}

// Load texture from file into GPU memory (VRAM)
inline void LoadTexture(char *fileName, void *retVal)
{
    *(Texture *)retVal = _LoadTexture(fileName);
}

// Load texture from image data
inline void LoadTextureFromImage(void *image, void *retVal)
{
    *(Texture *)retVal = _LoadTextureFromImage(*(Image *)image);
}

// Load cubemap from image, multiple image cubemap layouts supported
inline void LoadTextureCubemap(void *image, int layout, void *retVal)
{
    *(Texture *)retVal = _LoadTextureCubemap(*(Image *)image, layout);
}

// Load texture for rendering (framebuffer)
inline void LoadRenderTexture(int width, int height, void *retVal)
{
    *(RenderTexture *)retVal = _LoadRenderTexture(width, height);
}

// Check if a texture is ready
inline qb_bool IsTextureReady(void *texture)
{
    return TO_QB_BOOL(_IsTextureReady(*(Texture *)texture));
}

// Unload texture from GPU memory (VRAM)
inline void UnloadTexture(void *texture)
{
    _UnloadTexture(*(Texture *)texture);
}

// Check if a render texture is ready
inline qb_bool IsRenderTextureReady(void *target)
{
    return TO_QB_BOOL(_IsRenderTextureReady(*(RenderTexture *)target));
}

// Unload render texture from GPU memory (VRAM)
inline void UnloadRenderTexture(void *target)
{
    _UnloadRenderTexture(*(RenderTexture *)target);
}

// Update GPU texture with new data
inline void UpdateTexture(void *texture, uintptr_t pixels)
{
    _UpdateTexture(*(Texture *)texture, (void *)pixels);
}

// Update GPU texture rectangle with new data
inline void UpdateTextureRec(void *texture, void *rec, uintptr_t pixels)
{
    _UpdateTextureRec(*(Texture *)texture, *(RRectangle *)rec, (void *)pixels);
}

// Generate GPU mipmaps for a texture
inline void GenTextureMipmaps(void *texture)
{
    _GenTextureMipmaps((Texture *)texture);
}

// Set texture scaling filter mode
inline void SetTextureFilter(void *texture, int filter)
{
    _SetTextureFilter(*(Texture *)texture, filter);
}

// Set texture wrapping mode
inline void SetTextureWrap(void *texture, int wrap)
{
    _SetTextureWrap(*(Texture *)texture, wrap);
}

// Draw a Texture2D
inline void DrawTexture(void *texture, int posX, int posY, uint32_t tint)
{
    _DrawTexture(*(Texture *)texture, posX, posY, tint);
}

// Draw a Texture2D with position defined as Vector2
inline void DrawTextureV(void *texture, void *position, uint32_t tint)
{
    _DrawTextureV(*(Texture *)texture, *(Vector2 *)position, tint);
}

// Draw a Texture2D with extended parameters
inline void DrawTextureEx(void *texture, void *position, float rotation, float scale, uint32_t tint)
{
    _DrawTextureEx(*(Texture *)texture, *(Vector2 *)position, rotation, scale, tint);
}

// Draw a part of a texture defined by a rectangle
inline void DrawTextureRec(void *texture, void *source, void *position, uint32_t tint)
{
    _DrawTextureRec(*(Texture *)texture, *(RRectangle *)source, *(Vector2 *)position, tint);
}

// Draw a part of a texture defined by a rectangle with 'pro' parameters
inline void DrawTexturePro(void *texture, void *source, void *dest, void *origin, float rotation, uint32_t tint)
{
    _DrawTexturePro(*(Texture *)texture, *(RRectangle *)source, *(RRectangle *)dest, *(Vector2 *)origin, rotation, tint);
}

// Draws a texture (or part of it) that stretches or shrinks nicely
inline void DrawTextureNPatch(void *texture, void *nPatchInfo, void *dest, void *origin, float rotation, uint32_t tint)
{
    _DrawTextureNPatch(*(Texture *)texture, *(NPatchInfo *)nPatchInfo, *(RRectangle *)dest, *(Vector2 *)origin, rotation, tint);
}

// Get color with alpha applied, alpha goes from 0.0f to 1.0f
inline uint32_t Fade(uint32_t color, float alpha)
{
    return _Fade(color, alpha);
}

// Get hexadecimal value for a Color
inline int ColorToInt(uint32_t color)
{
    return _ColorToInt(color);
}

// Get Color normalized as float [0..1]
inline void ColorNormalize(uint32_t color, void *retVal)
{
    *(Vector4 *)retVal = _ColorNormalize(color);
}

// Get Color from normalized values [0..1]
inline uint32_t ColorFromNormalized(void *normalized)
{
    return _ColorFromNormalized(*(Vector4 *)normalized);
}

// Get HSV values for a Color, hue [0..360], saturation/value [0..1]
inline void ColorToHSV(uint32_t color, void *retVal)
{
    *(Vector3 *)retVal = _ColorToHSV(color);
}

// Get a Color from HSV values, hue [0..360], saturation/value [0..1]
inline uint32_t ColorFromHSV(float hue, float saturation, float value)
{
    return _ColorFromHSV(hue, saturation, value);
}

// Get color multiplied with another color
inline uint32_t ColorTint(uint32_t color, uint32_t tint)
{
    return _ColorTint(color, tint);
}

// Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
inline uint32_t ColorBrightness(uint32_t color, float factor)
{
    return _ColorBrightness(color, factor);
}

// Get color with contrast correction, contrast values between -1.0f and 1.0f
inline uint32_t ColorContrast(uint32_t color, float contrast)
{
    return _ColorContrast(color, contrast);
}

// Get color with alpha applied, alpha goes from 0.0f to 1.0f
inline uint32_t ColorAlpha(uint32_t color, float alpha)
{
    return _ColorAlpha(color, alpha);
}

// Get src alpha-blended into dst color with tint
inline uint32_t ColorAlphaBlend(uint32_t dst, uint32_t src, uint32_t tint)
{
    return _ColorAlphaBlend(dst, src, tint);
}

// Get Color structure from hexadecimal value
inline uint32_t GetColor(unsigned int hexValue)
{
    return _GetColor(hexValue);
}

// Get Color from a source pixel pointer of certain format
inline uint32_t GetPixelColor(uintptr_t srcPtr, int format)
{
    return _GetPixelColor((void *)srcPtr, format);
}

// Set color formatted into destination pixel pointer
inline void SetPixelColor(uintptr_t dstPtr, uint32_t color, int format)
{
    _SetPixelColor((void *)dstPtr, color, format);
}

// Get pixel data size in bytes for certain format
inline int GetPixelDataSize(int width, int height, int format)
{
    return _GetPixelDataSize(width, height, format);
}

// Get the default Font
inline void GetFontDefault(void *retVal)
{
    *(RFont *)retVal = _GetFontDefault();
}

// Load font from file into GPU memory (VRAM)
inline void RLoadFont(char *fileName, void *retVal)
{
    *(RFont *)retVal = _LoadFont(fileName);
}

// Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character setFont
inline void LoadFontEx(char *fileName, int fontSize, uintptr_t codepoints, int codepointCount, void *retVal)
{
    *(RFont *)retVal = _LoadFontEx(fileName, fontSize, (int *)codepoints, codepointCount);
}

// Load font from Image (XNA style)
inline void LoadFontFromImage(void *image, uint32_t key, int firstChar, void *retVal)
{
    *(RFont *)retVal = _LoadFontFromImage(*(Image *)image, key, firstChar);
}

// Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
inline void LoadFontFromMemory(char *fileType, uintptr_t fileData, int dataSize, int fontSize, uintptr_t codepoints, int codepointCount, void *retVal)
{
    *(RFont *)retVal = _LoadFontFromMemory(fileType, (unsigned char *)fileData, dataSize, fontSize, (int *)codepoints, codepointCount);
}

// Check if a font is ready
inline qb_bool IsFontReady(void *font)
{
    return TO_QB_BOOL(_IsFontReady(*(RFont *)font));
}

// Load font data for further use
inline void *LoadFontData(uintptr_t fileData, int dataSize, int fontSize, uintptr_t codepoints, int codepointCount, int type)
{
    return _LoadFontData((unsigned char *)fileData, dataSize, fontSize, (int *)codepoints, codepointCount, type);
}

// Generate image font atlas using chars info
inline void GenImageFontAtlas(uintptr_t glyphs, uintptr_t *glyphRecs, int glyphCount, int fontSize, int padding, int packMethod, void *retVal)
{
    *(Image *)retVal = _GenImageFontAtlas((GlyphInfo *)glyphs, (RRectangle **)glyphRecs, glyphCount, fontSize, padding, packMethod);
}

// Unload font chars info data (RAM)
inline void UnloadFontData(uintptr_t glyphs, int glyphCount)
{
    _UnloadFontData((GlyphInfo *)glyphs, glyphCount);
}

// Unload font from GPU memory (VRAM)
inline void UnloadFont(void *font)
{
    _UnloadFont(*(RFont *)font);
}

// Export font as code file, returns true on success
inline qb_bool ExportFontAsCode(void *font, char *fileName)
{
    return TO_QB_BOOL(_ExportFontAsCode(*(RFont *)font, fileName));
}

// Draw current FPS
inline void DrawFPS(int posX, int posY)
{
    _DrawFPS(posX, posY);
}

// Draw text (using default font)
inline void DrawText(char *text, int posX, int posY, int fontSize, uint32_t color)
{
    _DrawText(text, posX, posY, fontSize, color);
}

// Draw text using font and additional parameters
inline void DrawTextEx(void *font, char *text, void *position, float fontSize, float spacing, uint32_t tint)
{
    _DrawTextEx(*(RFont *)font, text, *(Vector2 *)position, fontSize, spacing, tint);
}

// Draw text using Font and pro parameters (rotation)
inline void DrawTextPro(void *font, char *text, void *position, void *origin, float rotation, float fontSize, float spacing, uint32_t tint)
{
    _DrawTextPro(*(RFont *)font, text, *(Vector2 *)position, *(Vector2 *)origin, rotation, fontSize, spacing, tint);
}

// Draw one character (codepoint)
inline void DrawTextCodepoint(void *font, int codepoint, void *position, float fontSize, uint32_t tint)
{
    _DrawTextCodepoint(*(RFont *)font, codepoint, *(Vector2 *)position, fontSize, tint);
}

// Draw multiple character (codepoint)
inline void DrawTextCodepoints(void *font, void *codepoints, int codepointCount, void *position, float fontSize, float spacing, uint32_t tint)
{
    _DrawTextCodepoints(*(RFont *)font, (int *)codepoints, codepointCount, *(Vector2 *)position, fontSize, spacing, tint);
}

// Set vertical line spacing when drawing with line-breaks
inline void SetTextLineSpacing(int spacing)
{
    _SetTextLineSpacing(spacing);
}

// Measure string width for default font
inline int MeasureText(char *text, int fontSize)
{
    return _MeasureText(text, fontSize);
}

// Measure string size for Font
inline void MeasureTextEx(void *font, char *text, float fontSize, float spacing, void *retVal)
{
    *(Vector2 *)retVal = _MeasureTextEx(*(RFont *)font, text, fontSize, spacing);
}

// Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
inline int GetGlyphIndex(void *font, int codepoint)
{
    return _GetGlyphIndex(*(RFont *)font, codepoint);
}

// Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
inline void GetGlyphInfo(void *font, int codepoint, void *retVal)
{
    *(GlyphInfo *)retVal = _GetGlyphInfo(*(RFont *)font, codepoint);
}

// Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
inline void GetGlyphAtlasRec(void *font, int codepoint, void *retVal)
{
    *(RRectangle *)retVal = _GetGlyphAtlasRec(*(RFont *)font, codepoint);
}

// Load UTF-8 text encoded from codepoints array
inline char *LoadUTF8(void *codepoints, int length)
{
    return _LoadUTF8((int *)codepoints, length);
}

// Unload UTF-8 text encoded from codepoints array
inline void UnloadUTF8(char *text)
{
    _UnloadUTF8(text);
}

// Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
inline void *LoadCodepoints(char *text, void *count)
{
    return _LoadCodepoints(text, (int *)count);
}

// Unload codepoints data from memory
inline void UnloadCodepoints(void *codepoints)
{
    _UnloadCodepoints((int *)codepoints);
}

// Get total number of codepoints in a UTF-8 encoded string
inline int GetCodepointCount(char *text)
{
    return _GetCodepointCount(text);
}

// Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
inline int GetCodepoint(char *text, void *codepointSize)
{
    return _GetCodepoint(text, (int *)codepointSize);
}

// Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
inline int GetCodepointNext(char *text, void *codepointSize)
{
    return _GetCodepointNext(text, (int *)codepointSize);
}

// Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
inline int GetCodepointPrevious(char *text, void *codepointSize)
{
    return _GetCodepointPrevious(text, (int *)codepointSize);
}

// Encode one codepoint into UTF-8 byte array (array length returned as parameter)
inline const char *CodepointToUTF8(int codepoint, void *utf8Size)
{
    return _CodepointToUTF8(codepoint, (int *)utf8Size);
}

// TextCopy() ignored

// Check if two text string are equal
inline qb_bool TextIsEqual(char *text1, char *text2)
{
    return TO_QB_BOOL(_TextIsEqual(text1, text2));
}

// Get text length, checks for '\0' ending
inline unsigned int TextLength(char *text)
{
    return _TextLength(text);
}

// Text formatting with variables (sprintf() style)
inline char *TextFormat(char *text, char *s)
{
    return _TextFormat(text, s);
}

// Text formatting with variables (sprintf() style)
inline char *TextFormat(char *text, int32_t i)
{
    return _TextFormat(text, i);
}

// Text formatting with variables (sprintf() style)
inline char *TextFormat(char *text, int64_t i)
{
    return _TextFormat(text, i);
}

// Text formatting with variables (sprintf() style)
inline char *TextFormat(char *text, float f)
{
    return _TextFormat(text, f);
}

// Text formatting with variables (sprintf() style)
inline char *TextFormat(char *text, double d)
{
    return _TextFormat(text, d);
}

// TextSubtext() ignored

// TextReplace() ignored

// TextInsert() ignored

// TextJoin() ignored

// TextSplit() ignored

// TextAppend() ignored

// Find first text occurrence within a string
inline int TextFindIndex(char *text, char *find)
{
    return _TextFindIndex(text, find);
}

// Get upper case version of provided string
inline const char *TextToUpper(char *text)
{
    return _TextToUpper(text);
}

// Get lower case version of provided string
inline const char *TextToLower(char *text)
{
    return _TextToLower(text);
}

// Get Pascal case notation version of provided string
inline const char *TextToPascal(char *text)
{
    return _TextToPascal(text);
}

// Get integer value from text (negative values not supported)
inline int TextToInteger(char *text)
{
    return _TextToInteger(text);
}

// Draw a line in 3D world space
inline void DrawLine3D(void *startPos, void *endPos, uint32_t color)
{
    _DrawLine3D(*(Vector3 *)startPos, *(Vector3 *)endPos, color);
}

// Draw a point in 3D space, actually a small line
inline void DrawPoint3D(void *position, uint32_t color)
{
    _DrawPoint3D(*(Vector3 *)position, color);
}

// Draw a circle in 3D world space
inline void DrawCircle3D(void *center, float radius, void *rotationAxis, float rotationAngle, uint32_t color)
{
    _DrawCircle3D(*(Vector3 *)center, radius, *(Vector3 *)rotationAxis, rotationAngle, color);
}

// Draw a color-filled triangle (vertex in counter-clockwise order!)
inline void DrawTriangle3D(void *v1, void *v2, void *v3, uint32_t color)
{
    _DrawTriangle3D(*(Vector3 *)v1, *(Vector3 *)v2, *(Vector3 *)v3, color);
}

// Draw a triangle strip defined by points
inline void DrawTriangleStrip3D(void *points, int pointCount, uint32_t color)
{
    _DrawTriangleStrip3D((Vector3 *)points, pointCount, color);
}

// Draw cube
inline void DrawCube(void *position, float width, float height, float length, uint32_t color)
{
    _DrawCube(*(Vector3 *)position, width, height, length, color);
}

// Draw cube (Vector version)
inline void DrawCubeV(void *position, void *size, uint32_t color)
{
    _DrawCubeV(*(Vector3 *)position, *(Vector3 *)size, color);
}

// Draw cube wires
inline void DrawCubeWires(void *position, float width, float height, float length, uint32_t color)
{
    _DrawCubeWires(*(Vector3 *)position, width, height, length, color);
}

// Draw cube wires (Vector version)
inline void DrawCubeWiresV(void *position, void *size, uint32_t color)
{
    _DrawCubeWiresV(*(Vector3 *)position, *(Vector3 *)size, color);
}

// Draw sphere
inline void DrawSphere(void *centerPos, float radius, uint32_t color)
{
    _DrawSphere(*(Vector3 *)centerPos, radius, color);
}

// Draw sphere with extended parameters
inline void DrawSphereEx(void *centerPos, float radius, int rings, int slices, uint32_t color)
{
    _DrawSphereEx(*(Vector3 *)centerPos, radius, rings, slices, color);
}

// Draw sphere wires
inline void DrawSphereWires(void *centerPos, float radius, int rings, int slices, uint32_t color)
{
    _DrawSphereWires(*(Vector3 *)centerPos, radius, rings, slices, color);
}

// Draw a cylinder/cone
inline void DrawCylinder(void *position, float radiusTop, float radiusBottom, float height, int slices, uint32_t color)
{
    _DrawCylinder(*(Vector3 *)position, radiusTop, radiusBottom, height, slices, color);
}

// Draw a cylinder with base at startPos and top at endPos
inline void DrawCylinderEx(void *startPos, void *endPos, float startRadius, float endRadius, int sides, uint32_t color)
{
    _DrawCylinderEx(*(Vector3 *)startPos, *(Vector3 *)endPos, startRadius, endRadius, sides, color);
}

// Draw a cylinder/cone wires
inline void DrawCylinderWires(void *position, float radiusTop, float radiusBottom, float height, int slices, uint32_t color)
{
    _DrawCylinderWires(*(Vector3 *)position, radiusTop, radiusBottom, height, slices, color);
}

// Draw a cylinder wires with base at startPos and top at endPos
inline void DrawCylinderWiresEx(void *startPos, void *endPos, float startRadius, float endRadius, int sides, uint32_t color)
{
    _DrawCylinderWiresEx(*(Vector3 *)startPos, *(Vector3 *)endPos, startRadius, endRadius, sides, color);
}

// Draw a capsule with the center of its sphere caps at startPos and endPos
inline void DrawCapsule(void *startPos, void *endPos, float radius, int slices, int rings, uint32_t color)
{
    _DrawCapsule(*(Vector3 *)startPos, *(Vector3 *)endPos, radius, slices, rings, color);
}

// Draw capsule wireframe with the center of its sphere caps at startPos and endPos
inline void DrawCapsuleWires(void *startPos, void *endPos, float radius, int slices, int rings, uint32_t color)
{
    _DrawCapsuleWires(*(Vector3 *)startPos, *(Vector3 *)endPos, radius, slices, rings, color);
}

// Draw a plane XZ
inline void DrawPlane(void *centerPos, void *size, uint32_t color)
{
    _DrawPlane(*(Vector3 *)centerPos, *(Vector2 *)size, color);
}

// Draw a ray line
inline void DrawRay(void *ray, uint32_t color)
{
    _DrawRay(*(Ray *)ray, color);
}

// Draw a grid (centered at (0, 0, 0))
inline void DrawGrid(int slices, float spacing)
{
    _DrawGrid(slices, spacing);
}

// Load model from files (meshes and materials)
inline void LoadModel(char *fileName, void *retVal)
{
    *(Model *)retVal = _LoadModel(fileName);
}

// Load model from generated mesh (default material)
inline void LoadModelFromMesh(void *mesh, void *retVal)
{
    *(Model *)retVal = _LoadModelFromMesh(*(Mesh *)mesh);
}

// Check if a model is ready
inline qb_bool IsModelReady(void *model)
{
    return TO_QB_BOOL(_IsModelReady(*(Model *)model));
}

// Unload model (including meshes) from memory (RAM and/or VRAM)
inline void UnloadModel(void *model)
{
    _UnloadModel(*(Model *)model);
}

// Compute model bounding box limits (considers all meshes)
inline void GetModelBoundingBox(void *model, void *retVal)
{
    *(BoundingBox *)retVal = _GetModelBoundingBox(*(Model *)model);
}

// Draw a model (with texture if set)
inline void DrawModel(void *model, void *position, float scale, uint32_t tint)
{
    _DrawModel(*(Model *)model, *(Vector3 *)position, scale, tint);
}

// Draw a model with extended parameters
inline void DrawModelEx(void *model, void *position, void *rotationAxis, float rotationAngle, void *scale, uint32_t tint)
{
    _DrawModelEx(*(Model *)model, *(Vector3 *)position, *(Vector3 *)rotationAxis, rotationAngle, *(Vector3 *)scale, tint);
}

// Draw a model wires (with texture if set)
inline void DrawModelWires(void *model, void *position, float scale, uint32_t tint)
{
    _DrawModelWires(*(Model *)model, *(Vector3 *)position, scale, tint);
}

// Draw a model wires (with texture if set) with extended parameters
inline void DrawModelWiresEx(void *model, void *position, void *rotationAxis, float rotationAngle, void *scale, uint32_t tint)
{
    _DrawModelWiresEx(*(Model *)model, *(Vector3 *)position, *(Vector3 *)rotationAxis, rotationAngle, *(Vector3 *)scale, tint);
}

// Draw bounding box (wires)
inline void DrawBoundingBox(void *box, uint32_t color)
{
    _DrawBoundingBox(*(BoundingBox *)box, color);
}

// Draw a billboard texture
inline void DrawBillboard(void *camera, void *texture, void *position, float size, uint32_t tint)
{
    _DrawBillboard(*(Camera3D *)camera, *(Texture *)texture, *(Vector3 *)position, size, tint);
}

// Draw a billboard texture defined by source
inline void DrawBillboardRec(void *camera, void *texture, void *source, void *position, void *size, uint32_t tint)
{
    _DrawBillboardRec(*(Camera3D *)camera, *(Texture *)texture, *(RRectangle *)source, *(Vector3 *)position, *(Vector2 *)size, tint);
}

// Draw a billboard texture defined by source and rotation
inline void DrawBillboardPro(void *camera, void *texture, void *source, void *position, void *up, void *size, void *origin, float rotation, uint32_t tint)
{
    _DrawBillboardPro(*(Camera3D *)camera, *(Texture *)texture, *(RRectangle *)source, *(Vector3 *)position, *(Vector3 *)up, *(Vector2 *)size, *(Vector2 *)origin, rotation, tint);
}

// Upload mesh vertex data in GPU and provide VAO/VBO ids
inline void UploadMesh(void *mesh, bool dynamic)
{
    _UploadMesh((Mesh *)mesh, dynamic);
}

// Update mesh vertex data in GPU for a specific buffer index
inline void UpdateMeshBuffer(void *mesh, int index, uintptr_t data, int dataSize, int offset)
{
    _UpdateMeshBuffer(*(Mesh *)mesh, index, (void *)data, dataSize, offset);
}

// Unload mesh data from CPU and GPU
inline void UnloadMesh(void *mesh)
{
    _UnloadMesh(*(Mesh *)mesh);
}

// Draw a 3d mesh with material and transform
inline void DrawMesh(void *mesh, void *material, void *transform)
{
    _DrawMesh(*(Mesh *)mesh, *(Material *)material, *(Matrix *)transform);
}

// Draw multiple mesh instances with material and different transforms
inline void DrawMeshInstanced(void *mesh, void *material, void *transforms, int instances)
{
    _DrawMeshInstanced(*(Mesh *)mesh, *(Material *)material, (Matrix *)transforms, instances);
}

// Export mesh data to file, returns true on success
inline qb_bool ExportMesh(void *mesh, char *fileName)
{
    return TO_QB_BOOL(_ExportMesh(*(Mesh *)mesh, fileName));
}

// Compute mesh bounding box limits
inline void GetMeshBoundingBox(void *mesh, void *retVal)
{
    *(BoundingBox *)retVal = _GetMeshBoundingBox(*(Mesh *)mesh);
}

// Compute mesh tangents
inline void GenMeshTangents(void *mesh)
{
    _GenMeshTangents((Mesh *)mesh);
}

// Generate polygonal mesh
inline void GenMeshPoly(int sides, float radius, void *retVal)
{
    *(Mesh *)retVal = _GenMeshPoly(sides, radius);
}

// Generate plane mesh (with subdivisions)
inline void GenMeshPlane(float width, float length, int resX, int resZ, void *retVal)
{
    *(Mesh *)retVal = _GenMeshPlane(width, length, resX, resZ);
}

// Generate cuboid mesh
inline void GenMeshCube(float width, float height, float length, void *retVal)
{
    *(Mesh *)retVal = _GenMeshCube(width, height, length);
}

// Generate sphere mesh (standard sphere)
inline void GenMeshSphere(float radius, int rings, int slices, void *retVal)
{
    *(Mesh *)retVal = _GenMeshSphere(radius, rings, slices);
}

// Generate half-sphere mesh (no bottom cap)
inline void GenMeshHemiSphere(float radius, int rings, int slices, void *retVal)
{
    *(Mesh *)retVal = _GenMeshHemiSphere(radius, rings, slices);
}

// Generate cylinder mesh
inline void GenMeshCylinder(float radius, float height, int slices, void *retVal)
{
    *(Mesh *)retVal = _GenMeshCylinder(radius, height, slices);
}

// Generate cone/pyramid mesh
inline void GenMeshCone(float radius, float height, int slices, void *retVal)
{
    *(Mesh *)retVal = _GenMeshCone(radius, height, slices);
}

// Generate torus mesh
inline void GenMeshTorus(float radius, float size, int radSeg, int sides, void *retVal)
{
    *(Mesh *)retVal = _GenMeshTorus(radius, size, radSeg, sides);
}

// Generate trefoil knot mesh
inline void GenMeshKnot(float radius, float size, int radSeg, int sides, void *retVal)
{
    *(Mesh *)retVal = _GenMeshKnot(radius, size, radSeg, sides);
}

// Generate heightmap mesh from image data
inline void GenMeshHeightmap(void *heightmap, void *size, void *retVal)
{
    *(Mesh *)retVal = _GenMeshHeightmap(*(Image *)heightmap, *(Vector3 *)size);
}

// Generate cubes-based map mesh from image data
inline void GenMeshCubicmap(void *cubicmap, void *cubeSize, void *retVal)
{
    *(Mesh *)retVal = _GenMeshCubicmap(*(Image *)cubicmap, *(Vector3 *)cubeSize);
}

// Load materials from model file
inline void *LoadMaterials(char *fileName, void *materialCount)
{
    return _LoadMaterials(fileName, (int *)materialCount);
}

// Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
inline void LoadMaterialDefault(void *retVal)
{
    *(Material *)retVal = _LoadMaterialDefault();
}

// Check if a material is ready
inline qb_bool IsMaterialReady(void *material)
{
    return TO_QB_BOOL(_IsMaterialReady(*(Material *)material));
}

// Unload material from GPU memory (VRAM)
inline void UnloadMaterial(void *material)
{
    _UnloadMaterial(*(Material *)material);
}

// Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
inline void SetMaterialTexture(void *material, int mapType, void *texture)
{
    _SetMaterialTexture((Material *)material, mapType, *(Texture *)texture);
}

// Set material for a mesh
inline void SetModelMeshMaterial(void *model, int meshId, int materialId)
{
    _SetModelMeshMaterial((Model *)model, meshId, materialId);
}

// Load model animations from file
inline void *LoadModelAnimations(char *fileName, void *animCount)
{
    return _LoadModelAnimations(fileName, (int *)animCount);
}

// Update model animation pose
inline void UpdateModelAnimation(void *model, void *anim, int frame)
{
    _UpdateModelAnimation(*(Model *)model, *(ModelAnimation *)anim, frame);
}

// Unload animation data
inline void UnloadModelAnimation(void *anim)
{
    _UnloadModelAnimation(*(ModelAnimation *)anim);
}

// Unload animation array data
inline void UnloadModelAnimations(void *animations, int animCount)
{
    _UnloadModelAnimations((ModelAnimation *)animations, animCount);
}

// Check model animation skeleton match
inline qb_bool IsModelAnimationValid(void *model, void *anim)
{
    return TO_QB_BOOL(_IsModelAnimationValid(*(Model *)model, *(ModelAnimation *)anim));
}

// Check collision between two spheres
inline qb_bool CheckCollisionSpheres(void *center1, float radius1, void *center2, float radius2)
{
    return TO_QB_BOOL(_CheckCollisionSpheres(*(Vector3 *)center1, radius1, *(Vector3 *)center2, radius2));
}

// Check collision between two bounding boxes
inline qb_bool CheckCollisionBoxes(void *box1, void *box2)
{
    return TO_QB_BOOL(_CheckCollisionBoxes(*(BoundingBox *)box1, *(BoundingBox *)box2));
}

// Check collision between box and sphere
inline qb_bool CheckCollisionBoxSphere(void *box, void *center, float radius)
{
    return TO_QB_BOOL(_CheckCollisionBoxSphere(*(BoundingBox *)box, *(Vector3 *)center, radius));
}

// Get collision info between ray and sphere
inline void GetRayCollisionSphere(void *ray, void *center, float radius, void *retVal)
{
    *(RayCollision *)retVal = _GetRayCollisionSphere(*(Ray *)ray, *(Vector3 *)center, radius);
}

// Get collision info between ray and box
inline void GetRayCollisionBox(void *ray, void *box, void *retVal)
{
    *(RayCollision *)retVal = _GetRayCollisionBox(*(Ray *)ray, *(BoundingBox *)box);
}

// Get collision info between ray and mesh
inline void GetRayCollisionMesh(void *ray, void *mesh, void *transform, void *retVal)
{
    *(RayCollision *)retVal = _GetRayCollisionMesh(*(Ray *)ray, *(Mesh *)mesh, *(Matrix *)transform);
}

// Get collision info between ray and triangle
inline void GetRayCollisionTriangle(void *ray, void *p1, void *p2, void *p3, void *retVal)
{
    *(RayCollision *)retVal = _GetRayCollisionTriangle(*(Ray *)ray, *(Vector3 *)p1, *(Vector3 *)p2, *(Vector3 *)p3);
}

// Get collision info between ray and quad
inline void GetRayCollisionQuad(void *ray, void *p1, void *p2, void *p3, void *p4, void *retVal)
{
    *(RayCollision *)retVal = _GetRayCollisionQuad(*(Ray *)ray, *(Vector3 *)p1, *(Vector3 *)p2, *(Vector3 *)p3, *(Vector3 *)p4);
}

// Initialize audio device and context
inline void InitAudioDevice()
{
    _InitAudioDevice();
}

// Close the audio device and context
inline void CloseAudioDevice()
{
    _CloseAudioDevice();
}

// Check if audio device has been initialized successfully
inline qb_bool IsAudioDeviceReady()
{
    return TO_QB_BOOL(_IsAudioDeviceReady());
}

// Set master volume (listener)
inline void SetMasterVolume(float volume)
{
    _SetMasterVolume(volume);
}

// Get master volume (listener)
inline float GetMasterVolume()
{
    return _GetMasterVolume();
}

// Load wave data from file
inline void LoadWave(char *fileName, void *retVal)
{
    *(Wave *)retVal = _LoadWave(fileName);
}

// Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
inline void LoadWaveFromMemory(char *fileType, uintptr_t fileData, int dataSize, void *retVal)
{
    *(Wave *)retVal = _LoadWaveFromMemory(fileType, (unsigned char *)fileData, dataSize);
}

// Checks if wave data is ready
inline qb_bool IsWaveReady(void *wave)
{
    return TO_QB_BOOL(_IsWaveReady(*(Wave *)wave));
}

// Load sound from file
inline void LoadSound(char *fileName, void *retVal)
{
    *(RSound *)retVal = _LoadSound(fileName);
}

// Load sound from wave data
inline void LoadSoundFromWave(void *wave, void *retVal)
{
    *(RSound *)retVal = _LoadSoundFromWave(*(Wave *)wave);
}

// Create a new sound that shares the same sample data as the source sound, does not own the sound data
inline void LoadSoundAlias(void *source, void *retVal)
{
    *(RSound *)retVal = _LoadSoundAlias(*(RSound *)source);
}

// Checks if a sound is ready
inline qb_bool IsSoundReady(void *sound)
{
    return TO_QB_BOOL(_IsSoundReady(*(RSound *)sound));
}

// Update sound buffer with new data
inline void UpdateSound(void *sound, uintptr_t data, int sampleCount)
{
    _UpdateSound(*(RSound *)sound, (void *)data, sampleCount);
}

// Unload wave data
inline void UnloadWave(void *wave)
{
    _UnloadWave(*(Wave *)wave);
}

// Unload sound
inline void UnloadSound(void *sound)
{
    _UnloadSound(*(RSound *)sound);
}

// Unload a sound alias (does not deallocate sample data)
inline void UnloadSoundAlias(void *alias)
{
    _UnloadSoundAlias(*(RSound *)alias);
}

// Export wave data to file, returns true on success
inline qb_bool ExportWave(void *wave, char *fileName)
{
    return TO_QB_BOOL(_ExportWave(*(Wave *)wave, fileName));
}

// Export wave sample data to code (.h), returns true on success
inline qb_bool ExportWaveAsCode(void *wave, char *fileName)
{
    return TO_QB_BOOL(_ExportWaveAsCode(*(Wave *)wave, fileName));
}

// Play a sound
inline void PlaySound(void *sound)
{
    _PlaySound(*(RSound *)sound);
}

// Stop playing a sound
inline void StopSound(void *sound)
{
    _StopSound(*(RSound *)sound);
}

// Pause a sound
inline void PauseSound(void *sound)
{
    _PauseSound(*(RSound *)sound);
}

// Resume a paused sound
inline void ResumeSound(void *sound)
{
    _ResumeSound(*(RSound *)sound);
}

// Check if a sound is currently playing
inline qb_bool IsSoundPlaying(void *sound)
{
    return TO_QB_BOOL(_IsSoundPlaying(*(RSound *)sound));
}

// Set volume for a sound (1.0 is max level)
inline void SetSoundVolume(void *sound, float volume)
{
    _SetSoundVolume(*(RSound *)sound, volume);
}

// Set pitch for a sound (1.0 is base level)
inline void SetSoundPitch(void *sound, float pitch)
{
    _SetSoundPitch(*(RSound *)sound, pitch);
}

// Set pan for a sound (0.5 is center)
inline void SetSoundPan(void *sound, float pan)
{
    _SetSoundPan(*(RSound *)sound, pan);
}

// Copy a wave to a new wave
inline void WaveCopy(void *wave, void *retVal)
{
    *(Wave *)retVal = _WaveCopy(*(Wave *)wave);
}

// Crop a wave to defined samples range
inline void WaveCrop(void *wave, int initSample, int finalSample)
{
    _WaveCrop((Wave *)wave, initSample, finalSample);
}

// Convert wave data to desired format
inline void WaveFormat(void *wave, int sampleRate, int sampleSize, int channels)
{
    _WaveFormat((Wave *)wave, sampleRate, sampleSize, channels);
}

// Load samples data from wave as a 32bit float data array
inline void *LoadWaveSamples(void *wave)
{
    return _LoadWaveSamples(*(Wave *)wave);
}

// Unload samples data loaded with LoadWaveSamples()
inline void UnloadWaveSamples(void *samples)
{
    _UnloadWaveSamples((float *)samples);
}

// Load music stream from file
inline void LoadMusicStream(char *fileName, void *retVal)
{
    *(Music *)retVal = _LoadMusicStream(fileName);
}

// Load music stream from data
inline void LoadMusicStreamFromMemory(char *fileType, uintptr_t data, int dataSize, void *retVal)
{
    *(Music *)retVal = _LoadMusicStreamFromMemory(fileType, (unsigned char *)data, dataSize);
}

// Checks if a music stream is ready
inline qb_bool IsMusicReady(void *music)
{
    return TO_QB_BOOL(_IsMusicReady(*(Music *)music));
}

// Unload music stream
inline void UnloadMusicStream(void *music)
{
    _UnloadMusicStream(*(Music *)music);
}

// Start music playing
inline void PlayMusicStream(void *music)
{
    _PlayMusicStream(*(Music *)music);
}

// Check if music is playing
inline qb_bool IsMusicStreamPlaying(void *music)
{
    return TO_QB_BOOL(_IsMusicStreamPlaying(*(Music *)music));
}

// Updates buffers for music streaming
inline void UpdateMusicStream(void *music)
{
    _UpdateMusicStream(*(Music *)music);
}

// Stop music playing
inline void StopMusicStream(void *music)
{
    _StopMusicStream(*(Music *)music);
}

// Pause music playing
inline void PauseMusicStream(void *music)
{
    _PauseMusicStream(*(Music *)music);
}

// Resume playing paused music
inline void ResumeMusicStream(void *music)
{
    _ResumeMusicStream(*(Music *)music);
}

// Seek music to a position (in seconds)
inline void SeekMusicStream(void *music, float position)
{
    _SeekMusicStream(*(Music *)music, position);
}

// Set volume for music (1.0 is max level)
inline void SetMusicVolume(void *music, float volume)
{
    _SetMusicVolume(*(Music *)music, volume);
}

// Set pitch for a music (1.0 is base level)
inline void SetMusicPitch(void *music, float pitch)
{
    _SetMusicPitch(*(Music *)music, pitch);
}

// Set pan for a music (0.5 is center)
inline void SetMusicPan(void *music, float pan)
{
    _SetMusicPan(*(Music *)music, pan);
}

// Get music time length (in seconds)
inline float GetMusicTimeLength(void *music)
{
    return _GetMusicTimeLength(*(Music *)music);
}

// Get current music time played (in seconds)
inline float GetMusicTimePlayed(void *music)
{
    return _GetMusicTimePlayed(*(Music *)music);
}

// Load audio stream (to stream raw audio pcm data)
inline void LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels, void *retVal)
{
    *(AudioStream *)retVal = _LoadAudioStream(sampleRate, sampleSize, channels);
}

// Checks if an audio stream is ready
inline qb_bool IsAudioStreamReady(void *stream)
{
    return TO_QB_BOOL(_IsAudioStreamReady(*(AudioStream *)stream));
}

// Unload audio stream and free memory
inline void UnloadAudioStream(void *stream)
{
    _UnloadAudioStream(*(AudioStream *)stream);
}

// Update audio stream buffers with data
inline void UpdateAudioStream(void *stream, uintptr_t data, int frameCount)
{
    _UpdateAudioStream(*(AudioStream *)stream, (void *)data, frameCount);
}

// Check if any audio stream buffers requires refill
inline qb_bool IsAudioStreamProcessed(void *stream)
{
    return TO_QB_BOOL(_IsAudioStreamProcessed(*(AudioStream *)stream));
}

// Play audio stream
inline void PlayAudioStream(void *stream)
{
    _PlayAudioStream(*(AudioStream *)stream);
}

// Pause audio stream
inline void PauseAudioStream(void *stream)
{
    _PauseAudioStream(*(AudioStream *)stream);
}

// Resume audio stream
inline void ResumeAudioStream(void *stream)
{
    _ResumeAudioStream(*(AudioStream *)stream);
}

// Check if audio stream is playing
inline qb_bool IsAudioStreamPlaying(void *stream)
{
    return TO_QB_BOOL(_IsAudioStreamPlaying(*(AudioStream *)stream));
}

// Stop audio stream
inline void StopAudioStream(void *stream)
{
    _StopAudioStream(*(AudioStream *)stream);
}

// Set volume for audio stream (1.0 is max level)
inline void SetAudioStreamVolume(void *stream, float volume)
{
    _SetAudioStreamVolume(*(AudioStream *)stream, volume);
}

// Set pitch for audio stream (1.0 is base level)
inline void SetAudioStreamPitch(void *stream, float pitch)
{
    _SetAudioStreamPitch(*(AudioStream *)stream, pitch);
}

// Set pan for audio stream (0.5 is centered)
inline void SetAudioStreamPan(void *stream, float pan)
{
    _SetAudioStreamPan(*(AudioStream *)stream, pan);
}

// Default size for new audio streams
inline void SetAudioStreamBufferSizeDefault(int size)
{
    _SetAudioStreamBufferSizeDefault(size);
}

// Audio thread callback to request new data
inline void SetAudioStreamCallback(void *stream, void *callback)
{
    _SetAudioStreamCallback(*(AudioStream *)stream, (AudioCallback)callback);
}

// Attach audio stream processor to stream, receives the samples as <float>s
inline void AttachAudioStreamProcessor(void *stream, void *processor)
{
    _AttachAudioStreamProcessor(*(AudioStream *)stream, (AudioCallback)processor);
}

// Detach audio stream processor from stream
inline void DetachAudioStreamProcessor(void *stream, void *processor)
{
    _DetachAudioStreamProcessor(*(AudioStream *)stream, (AudioCallback)processor);
}

// Attach audio stream processor to the entire audio pipeline, receives the samples as <float>s
inline void AttachAudioMixedProcessor(void *processor)
{
    _AttachAudioMixedProcessor((AudioCallback)processor);
}

// Detach audio stream processor from the entire audio pipeline
inline void DetachAudioMixedProcessor(void *processor)
{
    _DetachAudioMixedProcessor((AudioCallback)processor);
}
